C0102	3	Basic	Black listed name
C0103	3	Basic	Invalid name
C0112	3	Basic	Empty docstring
C0113	5	Refactoring	Used when a boolean expression contains an unneeded negation.
C0114	3	Basic	Missing docstring
C0115	3	Basic	Missing class docstring
C0116	3	Basic	Missing function or method docstring
C0122	5	Basic	Used when the constant is placed on the left side of a comparison. It is usually clearer in intent to place it in the right hand side of the comparison.
C0123	5	Basic	The idiomatic way to perform an explicit typecheck in Python is to use isinstance(x, Y) rather than type(x) == Y, type(x) is Y. Though there are unusual situations where these give different results.
C0198	5	Docstyle	Used when a docstring does not have triple double quotes.
C0199	5	Docstyle	Used when a blank line is found at the beginning of a docstring.
C0200	5	Refactoring	Emitted when code that iterates with range and len is encountered. Such code can be simplified by using the enumerate builtin.
C0201	5	Refactoring	Emitted when the keys of a dictionary are iterated through the .keys() method. It is enough to just iterate through the dictionary itself, as in "for key in dictionary".
C0202	3	Classes	Class method should have "cls" as first argument
C0203	3	Classes	Metaclass method should have "mcs" as first argument
C0204	5	Classes	Used when a metaclass class method has a first argument named differently than the value specified in valid-metaclass-classmethod-first-arg option (default to "mcs"), recommended to easily differentiate them from regular instance methods.
C0205	1	Classes	A class __slots__ is a simple string, rather than an iterable.
C0325	5	Format	Used when a single item in parentheses follows an if, for, or other keyword.
C0327	5	Format	Used when there are mixed (LF and CRLF) newline signs in a file.
C0328	5	Format	Used when there is different newline than expected.
C0330	5	Format	TODO
C0401	5	Spelling	Used when a word in comment is not spelled correctly.
C0402	5	Spelling	Used when a word in docstring is not spelled correctly.
C0403	5	Spelling	Used when a word in docstring cannot be checked by enchant.
C0411	5	Imports	Used when PEP8 import order is not respected (standard imports first, then third-party libraries, then local imports)
C0412	5	Imports	Used when imports are not grouped by packages
C0413	5	Imports	Used when code and imports are mixed
C0414	3	Imports	An import alias is same as original package.
E0100	1	Basic	__init__ method is a generator
E0101	1	Basic	Explicit return in __init__
E0102	1	Basic	item already defined
E0110	5	Basic	Used when an abstract class with `abc.ABCMeta` as metaclass has abstract methods and is instantiated.
E0111	5	Basic	Used when the first argument to reversed() builtin isn't a sequence (does not implement __reversed__, nor __getitem__ and __len__
E0113	5	Basic	Emitted when a star expression is used as a starred assignment target.
E0114	5	Basic	Emitted when a star expression is not used in an assignment target.
E0115	5	Basic	Emitted when a name is both nonlocal and global.
E0117	5	Basic	Emitted when a nonlocal variable does not have an attached name somewhere in the parent scopes
E0202	1	Classes	An attribute inherited hides this method
E0203	1	Classes	Access to member before its definition
E0211	1	Classes	Method has no argument
E0213	1	Classes	Method should have "self" as first argument
E0221	1	Classes	Interface resolved is not a class
E0222	1	Classes	Missing method from interface
E0236	5	Classes	Used when an invalid (non-string) object occurs in __slots__.
E0237	5	Classes	Used when assigning to an attribute not defined in the class slots.
E0238	5	Classes	Used when an invalid __slots__ is found in class. Only a string, an iterable or a sequence is permitted.
E0239	5	Classes	Used when a class inherits from something which is not a class.
E0240	5	Classes	Used when a class has an inconsistent method resolution order.
E0241	5	Classes	Used when a class has duplicate bases.
E0301	5	Classes	Used when an __iter__ method returns something which is not an iterable (i.e. has no `next` method)
E0302	5	Classes	Emitted when a special method was defined with an invalid number of parameters. If it has too few or too many, it might not work at all.
E0303	5	Classes	Used when an __len__ method returns something which is not a non-negative integer
E0312	1	Format	Found incorrect indentation
E0401	5	Imports	Used when pylint has been unable to import a module.
E0402	5	Imports	Used when a relative import tries to access too many levels in the current package.
E0601	1	Variables	Using variable before assignment
E0602	1	Variables	Undefined variable
E0603	5	Variables	Used when an undefined variable name is referenced in __all__.
E0604	5	Variables	Used when an invalid (non-string) object occurs in __all__.
E0611	1	Variables	No name in module
E0701	1	Exceptions	Bad except clauses order
E0702	1	Exceptions	Raising item while only classes, instances or string are allowed
E0703	5	Exceptions	Used when using the syntax "raise ... from ...", where the exception context is not an exception, nor None.
E0704	5	Exceptions	Used when a bare raise is not used inside an except clause. This generates an error, since there are no active exceptions to be reraised. An exception to this rule is represented by a bare raise inside a finally clause, which might work, as long as an exception is raised inside the try block, but it is nevertheless a code smell that must not be relied upon.
E0710	5	Exceptions	Used when a new style class which doesn't inherit from BaseException is raised.
E0711	5	Exceptions	Used when NotImplemented is raised instead of NotImplementedError
E0712	5	Exceptions	Used when a class which doesn't inherit from BaseException is used as an exception in an except clause.
E1001	1	Newstyle	Use __slots__ on an old style class
E1002	1	Newstyle	Use super on an old style class
E1003	1	Newstyle	Bad first argument given to super class
E1004	5	Newstyle	Used when the super builtin didn't receive an argument.
E1102	1	Typecheck	item is not callable
E1111	1	Typecheck	Assigning to function call which doesn't return
E1120	5	Typecheck	Used when a function call passes too few arguments.
E1121	5	Typecheck	Used when a function call passes too many positional arguments.
E1123	5	Typecheck	Used when a function call passes a keyword argument that doesn't correspond to one of the function's parameter names.
E1124	5	Typecheck	Used when a function call would result in assigning multiple values to a function parameter, one value from a positional argument and one from a keyword argument.
E1125	5	Typecheck	Used when a function call does not pass a mandatory keyword-only argument.
E1127	5	Typecheck	Used when a slice index is not an integer, None, or an object with an __index__ method.
E1130	5	Typecheck	Emitted when a unary operand is used on an object which does not support this type of operation
E1131	5	Typecheck	Emitted when a binary arithmetic operation between two operands is not supported.
E1132	5	Typecheck	Emitted when a function call got multiple values for a keyword.
E1135	5	Typecheck	Emitted when an instance in membership test expression doesn't implement membership protocol (__contains__/__iter__/__getitem__)
E1137	5	Typecheck	Emitted when an object does not support item assignment (i.e. doesn't define __setitem__ method)
E1138	5	Typecheck	Emitted when an object does not support item deletion (i.e. doesn't define __delitem__ method)
E1139	1	Typescheck	A class is using, as a metaclass, something which might be invalid for using as  a metaclass.
E1140	1	Typescheck	A dict key is not hashable  (i.e. doesn't define __hash__ method).
E1200	5	Logging	Used when an unsupported format character is used in a logging statement format string.
E1201	5	Logging	Used when a logging statement format string terminates before the end of a conversion specifier.
E1205	5	Logging	Used when a logging format string is given too few arguments.
E1206	5	Logging	Used when a logging format string is given too many arguments
E1300	5	String	Used when a unsupported format character is used in a format string.
E1301	5	String	Used when a format string terminates before the end of a conversion specifier.
E1302	5	String	Used when a format string contains both named (e.g. '%(foo)d') and unnamed (e.g. '%d') conversion specifiers. This is also used when a named conversion specifier contains * for the minimum field width and/or precision.
E1303	5	String	Used when a format string that uses named conversion specifiers is used with an argument that is not a mapping.
E1304	5	String	Used when a format string that uses named conversion specifiers is used with a dictionary that doesn't contain all the keys required by the format string.
E1305	5	String	Used when a format string that uses unnamed conversion specifiers is given too many arguments.
E1306	5	String	Used when a format string that uses unnamed conversion specifiers is given too few arguments
E1307	1	Strings	A type required by format string is not suitable for actual argument type
E1310	5	Strings	The argument to a str.{l,r,}strip call contains a duplicate character,
E1507	1	Stdlib	Env manipulation functions support only string type arguments.
E1700	5	Async	Used when an `yield` or `yield from` statement is found inside an async function.
E1701	5	Async	Used when an async context manager is used with an object that does not implement the async context management protocol.
F0202	5	Classes	Used when Pylint has been unable to check methods signature compatibility for an unexpected reason. Please report this kind if you don't make sense of it.
I1101	1	Typescheck	A variable is accessed for non-existent member of C extension. Due to unavailability of source static analysis is impossible, but it may be performed by introspecting living objects in run-time.
PYCONTAINER	3	Container	Pylint container rule
R0122	4	Basic	Use of the exec statement
R0123	5	Basic	Used when comparing an object to a literal, which is usually what you do not want to do, since you can compare to a different literal than what was expected altogether.
R0201	4	Classes	Method could be a function
R0202	5	Classes	Used when a class method is defined without using the decorator syntax.
R0203	5	Classes	Used when a static method is defined without using the decorator syntax.
R0205	5	Classes	A class inherit from object, which under python3 is implicit, hence can be safely removed from bases.
R0221	4	Classes	Arguments number differs from method
R0401	4	Imports	Cyclic import
R0801	4	Similarities	Similar lines
R0901	4	DesignSet	Too many ancestors
R0902	4	DesignSet	Too many instance attributes
R0904	4	DesignSet	Too many public methods
R0911	4	DesignSet	Too many return statements
R0912	4	DesignSet	Too many branches
R0913	4	DesignSet	Too many arguments
R0914	4	DesignSet	Too many local variables
R0915	4	DesignSet	Too many statements
R0916	5	Design	Used when a if statement contains too many boolean expressions
R1701	5	Refactoring	Usen when multiple consecutive isinstance calls can be merged into one.
R1702	4	Refactoring	A function or a method has too many nested blocks.
R1703	4	Refactoring	An if statement can be replaced with 'bool(test)'.
R1704	2	Refactoring	A local name is redefining an argument, which might suggest a potential error.
R1705	2	Refactoring	Used in order to highlight an unnecessary block of code following an if containing a return statement.
R1706	4	Refactoring	One of known pre-python 2.5 ternary syntax is used.
R1707	3	Refactoring	In Python, a tuple is actually created by the comma symbol,  not by the parentheses. Unfortunately, one can actually create a  tuple by misplacing a trailing comma, which can lead to potential  weird bugs in your code. You should always use parentheses  explicitly for creating a tuple.
R1708	2	Refactoring	Do not raise StopIteration in generator, use return statement instead. According to PEP479, the raise of StopIteration to end the loop of  a generator may lead to hard to find bugs. This PEP specify that  raise StopIteration has to be replaced by a simple return statement
R1709	4	Refactoring	Redundant pre-python 2.5 ternary syntax is used.
R1710	3	Refactoring	Either all return statements in a function should return an expression, or none of them should.
R1711	3	Refactoring	Useless return at end of function or method.
R1712	4	Refactoring	Consider using tuple unpacking for swapping variables. You do not have to use a temporary variable in order to  tuple unpacking variables makes the intention more clear.
R1713	4	Refactoring	Consider using str.join(sequence) for concatenating strings from an iterable. Using str.join(sequence) is faster, uses less memory  and increases readability compared to for-loop iteration.
R1714	4	Refactoring	To check if a variable is equal to one of many values, combine the values into a tuple and check if the variable is contained "in" it instead of checking for equality against each of the values. This is faster and less verbose.
R1715	5	Refactoring	Using the builtin dict.get for getting a value from a dictionary; if a key is present or a default if not, is simpler and considered  more idiomatic, although sometimes a bit slower
R1716	4	Refactoring	A boolean operation like a < b and b < c" is encountered, suggesting instead to refactor it to "a < b < c
R1717	4	Refactoring	Consider using a dictionary comprehension, because it's more readable.
R1718	3	Refactoring	Consider using a set comprehension, because it's more readable.
R1719	4	Refactoring	An if expression can be replaced with 'bool(test)'.
R1720	4	Refactoring	An unnecessary block of code following an if containing a raise statement.
W0101	2	Basic	Unreachable code
W0102	2	Basic	Dangerous default value as argument
W0104	2	Basic	Statement seems to have no effect
W0105	2	Basic	String statement has no effect
W0107	2	Basic	Unnecessary pass statement
W0108	2	Basic	Lambda may not be necessary
W0109	5	Basic	Used when a dictionary expression binds the same key multiple times.
W0120	5	Basic	Loops should only have an else clause if they can exit early with a break statement, otherwise the statements under else should be on the same scope as the loop itself.
W0122	5	Basic	Used when you use the "exec" statement (function for Python 3), to discourage its usage. That doesn't mean you cannot use it !
W0123	5	Basic	Used when you use the "eval" function, to discourage its usage. Consider using `ast.literal_eval` for safely evaluating strings containing Python expressions from untrusted sources.
W0124	5	Basic	Emitted when a `with` statement component returns multiple values and uses name binding with `as` only for a part of those values, as in with ctx() as a, b. This can be misleading, since it's not clear if the context manager returns a tuple or if the node without a name binding is another context manager.
W0125	5	Basic	Emitted when a conditional statement (If or ternary if) uses a constant value for its test. This might not be what the user intended to do.
W0141	2	Basic	Used builtin function
W0150	2	Basic	return statement in finally block may swallow exception
W0199	5	Basic	A call of assert on a tuple will always evaluate to true if the tuple is not empty, and will always evaluate to false if it is.
W0201	2	Classes	Attribute defined outside __init__
W0211	2	Classes	Static method as first argument
W0212	2	Classes	Access to a protected member of a client class
W0221	5	Classes	Used when a method has a different number of arguments than in the implemented interface or in an overridden method.
W0222	2	Classes	Signature differs from method
W0223	2	Classes	Method is abstract in class but is not overridden
W0231	2	Classes	__init__ method from base class is not called
W0232	5	Classes	Used when a class has no __init__ method, neither its parent classes.
W0233	2	Classes	__init__ method from a non direct base class is called
W0235	3	Classes	Used whenever we can detect that an overridden method is useless.
W0301	2	Basic	Unnecessary semicolon
W0311	5	Format	Used when an unexpected number of indentation's tabulations or spaces has been found.
W0312	5	Format	Used when there are some mixed tabs and spaces in a module.
W0332	2	Format	Use l as long integer identifier
W0401	2	Imports	Wildcard import
W0402	2	Imports	Uses of a deprecated module
W0403	5	Imports	Used when an import relative to the package directory is detected.
W0404	2	Imports	Reimport
W0406	2	Imports	Module import itself
W0410	2	Imports	__future__ import is not the first non docstring statement
W0511	2	Miscellaneous	Warning notes in code comments
W0512	5	Miscellaneous	Used when a source line cannot be decoded using the specified source file encoding.
W0601	2	Variables	Global variable undefined at the module level
W0602	2	Variables	Using global but no assigment is done
W0604	2	Variables	Using the global statement at the module level
W0611	2	Variables	Unused import
W0612	2	Variables	Unused variable
W0614	2	Variables	Unused import from wildcard import
W0621	5	Variables	Used when a variable's name hide a name defined in the outer scope.
W0622	5	Variables	Used when a variable or function override a built-in.
W0623	5	Variables	Used when an exception handler assigns the exception to an existing name
W0631	2	Variables	Using possibly undefined loop variable
W0632	2	Variables	There is an unbalanced tuple unpacking in assignment.
W0640	5	Variables	A variable used in a closure is defined in a loop. This will result in all closures using the same value for the closed-over variable.
W0641	3	Variables	A Variable is defined but might not be used.
W0642	2	Variables	Invalid assignment to self or cls in instance or class method  respectively.
W0702	2	Exceptions	No exception type(s) specified
W0704	2	Exceptions	Except doesn't do anything
W0705	5	Exceptions	Used when an except catches a type that was already caught by a previous handler.
W0706	3	Exceptions	An except handler uses raise as its first or only operator.
W0711	5	Exceptions	Used when the exception to catch is of the form "except A or B:". If intending to catch multiple, rewrite as "except (A, B):"
W0715	3	Exceptions	Passing multiple arguments to an exception constructor, the first of them a string literal containing what appears to be placeholders intended for formatting
W0716	2	Exceptions	An operation is done against an exception, but the operation is not valid for the exception in question.
W1001	2	Newstyle	Use of "property" on an old style class
W1113	2	Typescheck	When defining a keyword argument before variable positional arguments, one can  end up in having multiple values passed for the aforementioned parameter in  case the method is called with keyword arguments.
W1201	5	Logging	Used when a logging statement has a call form of "logging.<logging method>(format_string % (format_args...))". Such calls should leave string interpolation to the logging method itself and be written "logging.<logging method>(format_string, format_args...)" so that the program may avoid incurring the cost of the interpolation in those cases in which no message will be logged. For more, see http://www.python.org/dev/peps/pep-0282/.
W1202	5	Logging	Used when a logging statement has a call form of "logging.<logging method>(format_string.format(format_args...))". Such calls should use % formatting instead, but leave interpolation to the logging function by passing the parameters as arguments.
W1203	3	Logging	A logging statement has a call form of "logging.method(f"..."))".
W1300	5	String	Used when a format string that uses named conversion specifiers is used with a dictionary whose keys are not all strings.
W1301	5	String	Used when a format string that uses named conversion specifiers is used with a dictionary that contains keys not required by the format string.
W1302	5	String	Used when a PEP 3101 format string is invalid.
W1303	5	String	Used when a PEP 3101 format string that uses named fields doesn't receive one or more required keywords.
W1304	5	String	Used when a PEP 3101 format string that uses named fields is used with an argument that is not required by the format string.
W1305	5	String	Used when a PEP 3101 format string contains both automatic field numbering (e.g. '{}') and manual field specification (e.g. '{0}').
W1306	5	String	Used when a PEP 3101 format string uses an attribute specifier ({0.length}), but the argument passed for formatting doesn't have that attribute.
W1307	5	String	Used when a PEP 3101 format string uses a lookup specifier ({a[1]}), but the argument passed for formatting doesn't contain or doesn't have that key as an attribute.
W1308	3	Strings	We detect that a string formatting is repeating an argument instead of using named string arguments
W1402	5	Strings	Used when an escape like \u is encountered in a byte string where it has no effect.
W1501	5	Stdlib	Python supports: r, w, a[, x] modes with b, +, and U (only with r) options. See http://docs.python.org/2/library/functions.html#open
W1502	5	Stdlib	Using datetime.time in a boolean context can hide subtle bugs when the time they represent matches midnight UTC. This behaviour was fixed in Python 3.5. See http://bugs.python.org/issue13936 for reference.
W1503	5	Stdlib	The first argument of assertTrue and assertFalse is a condition. If a constant is passed as parameter, that condition will be always true. In this case a warning should be emitted.
W1505	5	Stdlib	The method is marked as deprecated and will be removed in a future version of Python. Consider looking for an alternative in the documentation.
W1506	1	Stdlib	A threading.Thread class is instantiated without the target function being passed.  By default, the first parameter is the group param, not the target param.
W1507	3	Stdlib	Using copy.copy(os.environ). Use os.environ.copy() instead.
W1508	2	Stdlib	Env manipulation functions return None or str values. Supplying anything different as a default may cause bugs.
W1509	1	Stdlib	Using preexec_fn keyword which may be unsafe in the presence  of threads .The preexec_fn parameter is not safe to use in the presence  of threads in your application. The child process could deadlock before exec is called. If you must use it, keep it  trivial! Minimize the number of libraries you call into.
W9903	3	Miscellaneous	Don't use deprecated functions
W9904	5	Miscellaneous	Refactor with enumeration value provided by interface
