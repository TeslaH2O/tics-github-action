CppAbstractVirtualFunctionCallInCtor	1	CodeSmell	Call to a virtual function inside a constructor/destructor will result in a pure virtual function call
CppAccessSpecifierWithNoDeclarations	3	CodeRedundancy	Access specifier does not affect any declaration
CppAssignedValueIsNeverUsed	2	CodeSmell	Assigned value is never used
CppBooleanIncrementExpression	2	CodeSmell	Incrementing expression of type bool
CppBoostFormatBadCode	2	CodeSmell	Bad format code for boost::format
CppBoostFormatLegacyCode	3	CodeSmell	Legacy format code for boost::format
CppBoostFormatMixedArgs	1	CodeSmell	Mixed serial and positional arguments for boost::format
CppBoostFormatTooFewArgs	1	CodeSmell	Not enough arguments in a call to boost::format
CppBoostFormatTooManyArgs	2	CodeSmell	Too many arguments in a call to boost::format
CppCStyleCast	3	BestPractice	C-style cast used instead of a C++ cast
CppCVQualifierCanNotBeAppliedToReference	2	CodeSmell	Adding cv-qualifiers to references has no effect
CppClangTidyAndroidCloexecAccept	2	ClangTidy	The usage of accept() is not recommended, it's better to use accept4().
CppClangTidyAndroidCloexecAccept4	2	ClangTidy	accept4() should include SOCK_CLOEXEC in its type argument to avoid the file descriptor leakage.
CppClangTidyAndroidCloexecCreat	2	ClangTidy	The usage of creat() is not recommended, it's better to use open().
CppClangTidyAndroidCloexecDup	2	ClangTidy	The usage of dup() is not recommended, it's better to use fcntl(), which can set the close-on-exec flag.
CppClangTidyAndroidCloexecEpollCreate	2	ClangTidy	The usage of epoll_create() is not recommended, it's better to use epoll_create1(), which allows close-on-exec.
CppClangTidyAndroidCloexecEpollCreate1	2	ClangTidy	epoll_create1() should include EPOLL_CLOEXEC in its type argument to avoid the file descriptor leakage.
CppClangTidyAndroidCloexecFopen	2	ClangTidy	fopen() should include e in their mode string; so re would be valid.
CppClangTidyAndroidCloexecInotifyInit	2	ClangTidy	The usage of inotify_init() is not recommended, it's better to use inotify_init1().
CppClangTidyAndroidCloexecInotifyInit1	2	ClangTidy	inotify_init1() should include IN_CLOEXEC in its type argument to avoid the file descriptor leakage.
CppClangTidyAndroidCloexecMemfdCreate	2	ClangTidy	memfd_create() should include MFD_CLOEXEC in its type argument to avoid the file descriptor leakage.
CppClangTidyAndroidCloexecOpen	2	ClangTidy	A common source of security bugs is code that opens a file without using the O_CLOEXEC flag.
CppClangTidyAndroidCloexecSocket	2	ClangTidy	socket() should include SOCK_CLOEXEC in its type argument to avoid the file descriptor leakage.
CppClangTidyBoostUseToString	3	ClangTidy	This check finds conversion from integer type like int to std::string or std::wstring using boost::lexical_cast, and replace it with calls to std::to_string and std::to_wstring.
CppClangTidyBugproneArgumentComment	3	ClangTidy	Checks that argument comments match parameter names.
CppClangTidyBugproneAssertSideEffect	2	ClangTidy	Finds assert() with side effect.
CppClangTidyBugproneCopyConstructorInit	2	ClangTidy	Finds copy constructors where the constructor doesn't call the copy constructor of the base class.
CppClangTidyBugproneDanglingHandle	2	ClangTidy	Detect dangling references in value handles like std::experimental::string_view.
CppClangTidyBugproneFoldInitType	2	ClangTidy	The check flags type mismatches in folds like std::accumulate that might result in loss of precision.
CppClangTidyBugproneForwardDeclarationNamespace	2	ClangTidy	Checks if an unused forward declaration is in a wrong namespace.
CppClangTidyBugproneInaccurateErase	2	ClangTidy	Checks for inaccurate use of the erase() method.
CppClangTidyBugproneIntegerDivision	2	ClangTidy	Finds cases where integer division in a floating point context is likely to cause unintended loss of precision.
CppClangTidyBugproneMisplacedOperatorInStrlenInAlloc	2	ClangTidy	Finds cases where 1 is added to the string in the argument to strlen(), strnlen(), strnlen_s(), wcslen(), wcsnlen(), and wcsnlen_s() instead of the result and the value is used as an argument to a memory allocation function (malloc(), calloc(), realloc(), alloca()) or the new[] operator in C++.
CppClangTidyBugproneMoveForwardingReference	2	ClangTidy	Warns if std::move is called on a forwarding reference.
CppClangTidyBugproneMultipleStatementMacro	2	ClangTidy	Detect multiple statement macros that are used in unbraced conditionals.
CppClangTidyBugproneStringConstructor	2	ClangTidy	Finds string constructors that are suspicious and probably errors.
CppClangTidyBugproneSuspiciousMemsetUsage	2	ClangTidy	This check finds memset() calls with potential mistakes in their arguments.
CppClangTidyBugproneUndefinedMemoryManipulation	2	ClangTidy	Finds calls of memory manipulation functions memset(), memcpy() and memmove() on not TriviallyCopyable objects resulting in undefined behavior.
CppClangTidyBugproneUseAfterMove	2	ClangTidy	Warns if an object is used after it has been moved.
CppClangTidyBugproneVirtualNearMiss	3	ClangTidy	Warn if a function is a near miss.
CppClangTidyCertDcl58Cpp	2	ClangTidy	Modification of the std or posix namespace can result in undefined behavior.
CppClangTidyCertErr34C	3	ClangTidy	This check flags calls to string-to-number conversion functions that do not verify the validity of the conversion, such as atoi() or scanf().
CppClangTidyCertErr60Cpp	2	ClangTidy	This check flags all throw expressions where the exception object is not nothrow copy constructible.
CppClangTidyCertFlp30C	2	ClangTidy	This check flags for loops where the induction expression has a floating-point type.
CppClangTidyClangDiagnosticAbsoluteValue	2	Clang	Warn whenever suspicious absolute values are used.
CppClangTidyClangDiagnosticAbstractFinalClass	2	Clang	abstract class is marked 'final sealed'
CppClangTidyClangDiagnosticAbstractVbaseInit	2	Clang	initializer for virtual base class <A> of abstract class <B> will never be used
CppClangTidyClangDiagnosticAddressOfPackedMember	2	Clang	taking address of packed member <A> of class or structure <B> may result in an unaligned pointer value
CppClangTidyClangDiagnosticAddressOfTemporary	2	Clang	Warns when taking the address of a temporary object of type <A>
CppClangTidyClangDiagnosticAllocaWithAlignAlignof	2	Clang	second argument to __builtin_alloca_with_align is supposed to be in bits
CppClangTidyClangDiagnosticAmbiguousDelete	2	Clang	multiple suitable <A> functions for <B>; no 'operator delete' function will be invoked if initialization throws an exception
CppClangTidyClangDiagnosticAmbiguousEllipsis	2	Clang	Construct <A> in this location creates a C-style varargs function ,not a function parameter pack
CppClangTidyClangDiagnosticAmbiguousMacro	2	Clang	ambiguous expansion of macro <A>
CppClangTidyClangDiagnosticAmbiguousMemberTemplate	2	Clang	lookup of <A> in member access expression is ambiguous; using member of <B>
CppClangTidyClangDiagnosticAnalyzerIncompatiblePlugin	2	Clang	checker plugin <A> is not compatible with this version of the analyzer
CppClangTidyClangDiagnosticAnonymousPackParens	2	Clang	ISO C++11 requires a parenthesized pack declaration to have a name
CppClangTidyClangDiagnosticArcBridgeCastsDisallowedInNonarc	2	Clang	<A> casts have no effect when not using ARC
CppClangTidyClangDiagnosticArcMaybeRepeatedUseOfWeak	2	Clang	Warns whenever a weak property or variable may be accessed multiple times and may be unpredictably set to nil.
CppClangTidyClangDiagnosticArcNonPodMemaccess	2	Clang	Warns when parts of a call <B> are a pointer to ownership-qualified type <C>
CppClangTidyClangDiagnosticArcRepeatedUseOfWeak	2	Clang	Warns whenever a weak property or variable is accessed multiple times and may be unpredictably set to nil.
CppClangTidyClangDiagnosticArcRetainCycles	2	Clang	capturing <A> strongly in this block is likely to lead to a retain cycle
CppClangTidyClangDiagnosticArcUnsafeRetainedAssign	2	Clang	Warns whenever an object will be released after assignment.
CppClangTidyClangDiagnosticArrayBounds	2	Clang	Warns whenever an array may be going out of bounds.
CppClangTidyClangDiagnosticArrayBoundsPointerArithmetic	2	Clang	Warns whenever an array may be going out of bounds due to pointer arithmetic.
CppClangTidyClangDiagnosticAsmIgnoredQualifier	2	Clang	Warns whenever an ignored qualifier is used for assembly code.
CppClangTidyClangDiagnosticAsmOperandWidths	2	Clang	value size does not match register size specified by the constraint and modifier
CppClangTidyClangDiagnosticAssignEnum	2	Clang	integer constant not in range of enumerated type <A>
CppClangTidyClangDiagnosticAssume	2	Clang	the argument to <A> has side effects that will be discarded
CppClangTidyClangDiagnosticAtomicMemoryOrdering	2	Clang	memory order argument to atomic operation is invalid
CppClangTidyClangDiagnosticAtomicPropertyWithUserDefinedAccessor	2	Clang	Writable atomic property <A> cannot pair a synthesized amd user-defined getter/setters.
CppClangTidyClangDiagnosticAttributePackedForBitfield	2	Clang	'packed' attribute was ignored on bit-fields with single-byte alignment in older versions of GCC and Clang
CppClangTidyClangDiagnosticAutoDisableVptrSanitizer	2	Clang	implicitly disabling vptr sanitizer because rtti wasn't enabled
CppClangTidyClangDiagnosticAutoImport	2	Clang	Warns whenever an include is automatically treated as an import.
CppClangTidyClangDiagnosticAutoStorageClass	2	Clang	'auto' storage class specifier is not permitted in C++11, and will not be supported in future releases
CppClangTidyClangDiagnosticAutoVarId	2	Clang	'auto' deduced as 'id' in declaration of <A>
CppClangTidyClangDiagnosticAvailability	2	Clang	Warns whenever there may be an error in availability.
CppClangTidyClangDiagnosticBackslashNewlineEscape	2	Clang	backslash and newline separated by space
CppClangTidyClangDiagnosticBadFunctionCast	2	Clang	cast from function call of type <A> to non-matching type <B>
CppClangTidyClangDiagnosticBindToTemporaryCopy	2	Clang	Warns whenever there is no viable copy construct for binding a reference to a temporary.
CppClangTidyClangDiagnosticBindingInCondition	2	Clang	ISO C++17 does not permit structured binding declaration in a condition
CppClangTidyClangDiagnosticBitfieldConstantConversion	2	Clang	implicit truncation from <C> to bit-field changes value from <A> to <B>
CppClangTidyClangDiagnosticBitfieldEnumConversion	2	Clang	Warns whenever issues may result from converting bit-field <A> to enumerator <B>
CppClangTidyClangDiagnosticBitfieldWidth	2	Clang	Warns whenever bit-field <A> exceeds its width and will be truncated.
CppClangTidyClangDiagnosticBitwiseOpParentheses	2	Clang	<A> within <B>
CppClangTidyClangDiagnosticBlockCaptureAutoreleasing	2	Clang	block captures an autoreleasing out-parameter, which may result in use-after-free bugs
CppClangTidyClangDiagnosticBoolConversion	2	Clang	initialization of pointer of type <A> to null from a constant boolean expression
CppClangTidyClangDiagnosticBracedScalarInit	2	Clang	braces around scalar initializer
CppClangTidyClangDiagnosticBridgeCast	2	Clang	Warns whenever bridge-casting is misused.
CppClangTidyClangDiagnosticBuiltinMacroRedefined	2	Clang	Warns whenever builtin macros are redefined.
CppClangTidyClangDiagnosticBuiltinMemcpyChkSize	2	Clang	<A> will always overflow; destination buffer has size <B> , but size argument is <C>
CppClangTidyClangDiagnosticBuiltinRequiresHeader	2	Clang	declaration of built-in function <B> requires inclusion of the header <A>
CppClangTidyClangDiagnosticC11Extensions	2	Clang	Warns whenever compatibility issues may result in C++11.
CppClangTidyClangDiagnosticC99Compat	2	Clang	Warns whenever compatibility issues may result in C99.
CppClangTidyClangDiagnosticC99Extensions	2	Clang	Warns whenever C99 extensions are used.
CppClangTidyClangDiagnosticCastAlign	2	Clang	cast from <A> to <B> increases required alignment from <C> to <D>
CppClangTidyClangDiagnosticCastCallingConvention	2	Clang	cast between incompatible calling conventions <A> and <B>; calls through this pointer may abort at runtime
CppClangTidyClangDiagnosticCastOfSelType	2	Clang	cast of type <A> to <B> is deprecated; use sel_getName instead
CppClangTidyClangDiagnosticCastQual	2	Clang	Warns whenever casting types to each other drops qualifiers.
CppClangTidyClangDiagnosticCharSubscripts	2	Clang	Warns whenever array subscripts are of type 'char'.
CppClangTidyClangDiagnosticClassVarargs	2	Clang	Passing object of class type <A> through variadic construct.
CppClangTidyClangDiagnosticComma	2	Clang	possible misuse of comma operator here
CppClangTidyClangDiagnosticComment	2	Clang	Warns whenever wrong comments are used.
CppClangTidyClangDiagnosticCompareDistinctPointerTypes	2	Clang	comparison of distinct pointer types
CppClangTidyClangDiagnosticComplexComponentInit	2	Clang	complex initialization specifying real and imaginary components is an extension
CppClangTidyClangDiagnosticConditionalTypeMismatch	2	Clang	pointer/integer type mismatch in conditional expression
CppClangTidyClangDiagnosticConditionalUninitialized	2	Clang	Warns whenever a variable may be uninitialized under certain conditions.
CppClangTidyClangDiagnosticConfigMacros	2	Clang	Warns when configuration macros may not have the intended effect.
CppClangTidyClangDiagnosticConstantConversion	2	Clang	implicit conversion from <C> to <D> changes value from <A> to <B>
CppClangTidyClangDiagnosticConstantLogicalOperand	2	Clang	use of logical <A> with constant operand
CppClangTidyClangDiagnosticConstexprNotConst	2	Clang	'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior
CppClangTidyClangDiagnosticConsumed	2	Clang	consumed analysis attribute is attached to member of class 'A' which isn�t marked as consumable
CppClangTidyClangDiagnosticConversion	2	Clang	Warns whenever type conversion may have unintended side-effects.
CppClangTidyClangDiagnosticCoroutineMissingUnhandledException	2	Clang	<A> is required to declare the member 'unhandled_exception()' when exceptions are enabled
CppClangTidyClangDiagnosticCoveredSwitchDefault	2	Clang	default label in switch which covers all enumeration values
CppClangTidyClangDiagnosticCstringFormatDirective	2	Clang	Warns when a string format directive is wrongly used as a formatting argument.
CppClangTidyClangDiagnosticCudaCompat	2	Clang	Warns whenever compatibility issues may result in CUDA.
CppClangTidyClangDiagnosticCustomAtomicProperties	2	Clang	atomic by default property <A> has a user defined getter/setter. The property should be marked 'atomic' if this is intended.
CppClangTidyClangDiagnosticDanglingElse	2	Clang	add explicit braces to avoid dangling else
CppClangTidyClangDiagnosticDanglingField	2	Clang	Warns whenever dangling fields are used.
CppClangTidyClangDiagnosticDanglingInitializerList	2	Clang	array backing initializer list will be destroyed at the end of the full-expression
CppClangTidyClangDiagnosticDateTime	2	Clang	expansion of date or time macro is not reproducible
CppClangTidyClangDiagnosticDeallocInCategory	2	Clang	-dealloc is being overridden in a category
CppClangTidyClangDiagnosticDebugCompressionUnavailable	2	Clang	cannot compress debug sections (zlib not installed)
CppClangTidyClangDiagnosticDeclarationAfterStatement	2	Clang	ISO C90 forbids mixing declarations and code
CppClangTidyClangDiagnosticDelegatingCtorCycles	2	Clang	error:constructor for <A> creates a delegation cycle
CppClangTidyClangDiagnosticDeleteIncomplete	2	Clang	Cannot delete expression or pointer with either a pointer-to-'void' type <A> or an incomplete type <B>
CppClangTidyClangDiagnosticDeleteNonVirtualDtor	2	Clang	Delete or destructor called on <B> that has a non-virtual destructor
CppClangTidyClangDiagnosticDeprecated	2	Clang	Warns whenever a deprecated construct is used.
CppClangTidyClangDiagnosticDeprecatedAttributes	2	Clang	specifying vector types with the 'mode' attribute is deprecated; use the 'vector_size' attribute instead
CppClangTidyClangDiagnosticDeprecatedDeclarations	2	Clang	Warns whenever a deprecated declaration is used.
CppClangTidyClangDiagnosticDeprecatedDynamicExceptionSpec	2	Clang	dynamic exception specifications are deprecated
CppClangTidyClangDiagnosticDeprecatedImplementations	2	Clang	Warns whenever a deprecated implementation is used.
CppClangTidyClangDiagnosticDeprecatedIncrementBool	2	Clang	incrementing expression of type bool is deprecated and incompatible with C++17
CppClangTidyClangDiagnosticDeprecatedObjcIsaUsage	2	Clang	Assignment or direct access to Objective-C's isa is deprecated in favor of object_set/getClass()
CppClangTidyClangDiagnosticDeprecatedObjcPointerIntrospection	2	Clang	bitmasking for introspection of Objective-C object pointers is strongly discouraged
CppClangTidyClangDiagnosticDeprecatedRegister	2	Clang	'register' storage class specifier is deprecated and incompatible with C++17
CppClangTidyClangDiagnosticDirectIvarAccess	2	Clang	instance variable <A> is being directly accessed
CppClangTidyClangDiagnosticDisabledMacroExpansion	2	Clang	disabled expansion of recursive macro
CppClangTidyClangDiagnosticDistributedObjectModifiers	2	Clang	conflicting distributed object modifiers on parameter/return type in implementation of <A>
CppClangTidyClangDiagnosticDivisionByZero	2	Clang	Warns whenever a division by zero may occur.
CppClangTidyClangDiagnosticDllAttributeOnRedeclaration	2	Clang	redeclaration of <A> should not add <B> attribute
CppClangTidyClangDiagnosticDllexportExplicitInstantiationDecl	2	Clang	explicit instantiation declaration should not be 'dllexport'
CppClangTidyClangDiagnosticDllimportStaticFieldDef	2	Clang	definition of dllimport static field
CppClangTidyClangDiagnosticDocumentation	2	Clang	Warn whenever documentation is used improperly.
CppClangTidyClangDiagnosticDocumentationDeprecatedSync	2	Clang	declaration is marked with '\deprecated' command but does not have a deprecation attribute
CppClangTidyClangDiagnosticDocumentationHtml	2	Clang	Warn whenever HTML-tagged documents are used improperly.
CppClangTidyClangDiagnosticDocumentationPedantic	2	Clang	whitespace is not allowed in parameter passing direction
CppClangTidyClangDiagnosticDocumentationUnknownCommand	2	Clang	unknown command tag name <A>
CppClangTidyClangDiagnosticDollarInIdentifierExtension	2	Clang	'$' in identifier
CppClangTidyClangDiagnosticDoublePromotion	2	Clang	implicit conversion increases floating-point precision: <A> to <B>
CppClangTidyClangDiagnosticDuplicateDeclSpecifier	2	Clang	duplicate <A> declaration specifier
CppClangTidyClangDiagnosticDuplicateEnum	2	Clang	element <A> has been implicitly assigned <B> which another element has been assigned
CppClangTidyClangDiagnosticDuplicateMethodArg	2	Clang	redeclaration of method parameter <A>
CppClangTidyClangDiagnosticDuplicateMethodMatch	2	Clang	multiple declarations of method <A> found and ignored
CppClangTidyClangDiagnosticDuplicateProtocol	2	Clang	duplicate protocol definition of <A> is ignored
CppClangTidyClangDiagnosticDynamicClassMemaccess	2	Clang	Warns whenever pointers to dynamic classes are used.
CppClangTidyClangDiagnosticDynamicExceptionSpec	2	Clang	error:ISO C++17 does not allow dynamic exception specifications
CppClangTidyClangDiagnosticEmbeddedDirective	2	Clang	embedding a directive within macro arguments has undefined behavior
CppClangTidyClangDiagnosticEmptyBody	2	Clang	Warns for constructs with empty bodies.
CppClangTidyClangDiagnosticEmptyDecomposition	2	Clang	ISO C++17 does not allow a decomposition group to be empty
CppClangTidyClangDiagnosticEmptyTranslationUnit	2	Clang	ISO C requires a translation unit to contain at least one declaration
CppClangTidyClangDiagnosticEncodeType	2	Clang	encoding of <A> type is incomplete because <B> component has unknown encoding
CppClangTidyClangDiagnosticEnumCompare	2	Clang	comparison of two values with different enumeration types
CppClangTidyClangDiagnosticEnumCompareSwitch	2	Clang	comparison of two values with different enumeration types in switch statement
CppClangTidyClangDiagnosticEnumConversion	2	Clang	implicit conversion from enumeration type <A> to different enumeration type <B>
CppClangTidyClangDiagnosticEnumTooLarge	2	Clang	Warns whenever enumeration constructs may exceed their maximum.
CppClangTidyClangDiagnosticExceptions	2	Clang	Warns whenever there may be an error with exception use.
CppClangTidyClangDiagnosticExitTimeDestructors	2	Clang	declaration requires an exit-time destructor
CppClangTidyClangDiagnosticExpansionToDefined	2	Clang	macro expansion producing 'defined' has undefined behavior
CppClangTidyClangDiagnosticExperimentalIsel	2	Clang	-fexperimental-isel support for the <A> architecture is incomplete
CppClangTidyClangDiagnosticExplicitInitializeCall	2	Clang	Warns whenever explicit calls to +initialize are misused.
CppClangTidyClangDiagnosticExplicitOwnershipType	2	Clang	method parameter of type <A> with no explicit ownership
CppClangTidyClangDiagnosticExternCCompat	2	Clang	Warns whenever constructs may have different sizes in C and C++.
CppClangTidyClangDiagnosticExternInitializer	2	Clang	'extern' variable has an initializer
CppClangTidyClangDiagnosticExtraQualification	2	Clang	extra qualification on member <A>
CppClangTidyClangDiagnosticExtraSemi	2	Clang	Warns whenever an extra semicolon is found.
CppClangTidyClangDiagnosticExtraTokens	2	Clang	Warns whenever extra tokens are found after preprocessor directives.
CppClangTidyClangDiagnosticFallback	2	Clang	falling back to <A>
CppClangTidyClangDiagnosticFlagEnum	2	Clang	enumeration value <A> is out of range of flags in enumeration type <B>
CppClangTidyClangDiagnosticFlexibleArrayExtensions	2	Clang	Warns whenever flexible array members are used at in the wrong constructs.
CppClangTidyClangDiagnosticFloatConversion	2	Clang	implicit conversion turns floating-point number into integer: <A> to <B>
CppClangTidyClangDiagnosticFloatEqual	2	Clang	comparing floating point with == or != is unsafe
CppClangTidyClangDiagnosticFloatOverflowConversion	2	Clang	Warns whenever implicit conversion from <A> to <B> may result in unintended consequences.
CppClangTidyClangDiagnosticFloatZeroConversion	2	Clang	implicit conversion from <A> to <B> changes non-zero value from <C> to <D>
CppClangTidyClangDiagnosticForLoopAnalysis	2	Clang	Warn whenever for loops contain possible issues or unclear constructions.
CppClangTidyClangDiagnosticFormat	2	Clang	Warn whenever incorrect formats are used.
CppClangTidyClangDiagnosticFormatExtraArgs	2	Clang	data argument not used by format string
CppClangTidyClangDiagnosticFormatInvalidSpecifier	2	Clang	invalid conversion specifier <A>
CppClangTidyClangDiagnosticFormatNonIso	2	Clang	Warn whenever format conversions are used that are not supported by ISO C.
CppClangTidyClangDiagnosticFormatNonliteral	2	Clang	format string is not a string literal
CppClangTidyClangDiagnosticFormatPedantic	2	Clang	Warns whenever typing formats may be misused.
CppClangTidyClangDiagnosticFormatSecurity	2	Clang	format string is not a string literal (potentially insecure)
CppClangTidyClangDiagnosticFormatZeroLength	2	Clang	format string is empty
CppClangTidyClangDiagnosticFourCharConstants	2	Clang	multi-character character constant
CppClangTidyClangDiagnosticFunctionDefInObjcContainer	2	Clang	function definition inside an Objective-C container is deprecated
CppClangTidyClangDiagnosticGccCompat	2	Clang	Warn if code may not be compatible with GCC.
CppClangTidyClangDiagnosticGlobalConstructors	2	Clang	declaration requires a global constructor or destructor
CppClangTidyClangDiagnosticGnuAlignofExpression	2	Clang	<A> applied to an expression is a GNU extension
CppClangTidyClangDiagnosticGnuAnonymousStruct	2	Clang	anonymous structs are a GNU extension
CppClangTidyClangDiagnosticGnuArrayMemberParenInit	2	Clang	error:parenthesized initialization of a member array is a GNU extension
CppClangTidyClangDiagnosticGnuAutoType	2	Clang	'__auto_type' is a GNU extension
CppClangTidyClangDiagnosticGnuBinaryLiteral	2	Clang	binary integer literals are a GNU extension
CppClangTidyClangDiagnosticGnuCaseRange	2	Clang	use of GNU case range extension
CppClangTidyClangDiagnosticGnuComplexInteger	2	Clang	complex integer types are a GNU extension
CppClangTidyClangDiagnosticGnuCompoundLiteralInitializer	2	Clang	initialization of an arrayfrom a compound literalis a GNU extension
CppClangTidyClangDiagnosticGnuConditionalOmittedOperand	2	Clang	use of GNU ?: conditional expression extension, omitting middle operand
CppClangTidyClangDiagnosticGnuDesignator	2	Clang	use of GNU array range, 'missing =', or old-style field extension
CppClangTidyClangDiagnosticGnuEmptyInitializer	2	Clang	use of GNU empty initializer extension
CppClangTidyClangDiagnosticGnuEmptyStruct	2	Clang	use of GNU empty struct constructions
CppClangTidyClangDiagnosticGnuFlexibleArrayInitializer	2	Clang	flexible array initialization is a GNU extension
CppClangTidyClangDiagnosticGnuFlexibleArrayUnionMember	2	Clang	flexible array member <A> in a union is a GNU extension
CppClangTidyClangDiagnosticGnuFoldingConstant	2	Clang	folding certain constructions to a constant is a GNU extension
CppClangTidyClangDiagnosticGnuImaginaryConstant	2	Clang	imaginary constants are a GNU extension
CppClangTidyClangDiagnosticGnuIncludeNext	2	Clang	#include_next is a language extension
CppClangTidyClangDiagnosticGnuLabelAsValue	2	Clang	use of GNU address-of-label or indirect-goto extension
CppClangTidyClangDiagnosticGnuRedeclaredEnum	2	Clang	redeclaration of already-defined enum <A> is a GNU extension
CppClangTidyClangDiagnosticGnuStatementExpression	2	Clang	use of GNU statement expression extension
CppClangTidyClangDiagnosticGnuStaticFloatInit	2	Clang	in-class initializer for static data member of type <A> is a GNU extension
CppClangTidyClangDiagnosticGnuStringLiteralOperatorTemplate	2	Clang	string literal operator templates are a GNU extension
CppClangTidyClangDiagnosticGnuUnionCast	2	Clang	cast to union type is a GNU extension
CppClangTidyClangDiagnosticGnuVariableSizedTypeNotAtEnd	2	Clang	field <A> with variable sized type <B> not at the end of a struct or class is a GNU extension
CppClangTidyClangDiagnosticGnuZeroVariadicMacroArguments	2	Clang	must specify at least one argument for <A> parameter of variadic macro
CppClangTidyClangDiagnosticHeaderGuard	2	Clang	<A> is used as a header guard here, followed by #define of a different macro
CppClangTidyClangDiagnosticHeaderHygiene	2	Clang	using namespace directive in global context in header
CppClangTidyClangDiagnosticIdiomaticParentheses	2	Clang	using the result of an assignment as a condition without parentheses
CppClangTidyClangDiagnosticIgnoredAttributes	2	Clang	Warn whenever an attribute is ignored.
CppClangTidyClangDiagnosticIgnoredOptimizationArgument	2	Clang	Warn whenever an optimization argument is ignored.
CppClangTidyClangDiagnosticIgnoredPragmaIntrinsic	2	Clang	<A> is not a recognized builtin.
CppClangTidyClangDiagnosticIgnoredPragmas	2	Clang	Warn whenever a #pragma directive is ignored.
CppClangTidyClangDiagnosticIgnoredQualifiers	2	Clang	Warn whenever a qualifier is ignored or has no effect.
CppClangTidyClangDiagnosticImplicitAtomicProperties	2	Clang	Warn whenever a property is implicitly assumed atomic.
CppClangTidyClangDiagnosticImplicitConversionFloatingPointToBool	2	Clang	implicit conversion turns floating-point number into bool: <A> to <B>
CppClangTidyClangDiagnosticImplicitExceptionSpecMismatch	2	Clang	function previously declared with an explicit/implicit exception specification redeclared with an implicit/explicit exception specification
CppClangTidyClangDiagnosticImplicitFallthrough	2	Clang	Warn whenever an implicit fallthrough is found.
CppClangTidyClangDiagnosticImplicitFallthroughPerFunction	2	Clang	unannotated fall-through between switch labels in partly-annotated function
CppClangTidyClangDiagnosticImplicitFunctionDeclaration	2	Clang	Warns whenever implicit declaration of functions may result in issues.
CppClangTidyClangDiagnosticImplicitInt	2	Clang	type specifier missing, defaults to 'int'
CppClangTidyClangDiagnosticImplicitRetainSelf	2	Clang	block implicitly retains 'self'; explicitly mention 'self' to indicate this is intended behavior
CppClangTidyClangDiagnosticImplicitlyUnsignedLiteral	2	Clang	integer literal is too large to be represented in a signed integer type, interpreting as unsigned
CppClangTidyClangDiagnosticImportPreprocessorDirectivePedantic	2	Clang	#import is a language extension
CppClangTidyClangDiagnosticInaccessibleBase	2	Clang	direct base <A> is inaccessible due to ambiguity: <B>
CppClangTidyClangDiagnosticIncludeNextAbsolutePath	2	Clang	#include_next with absolute path
CppClangTidyClangDiagnosticIncludeNextOutsideHeader	2	Clang	#include_next in primary source file
CppClangTidyClangDiagnosticIncompatibleExceptionSpec	2	Clang	Warn whenever an exception specification is incompatible.
CppClangTidyClangDiagnosticIncompatibleFunctionPointerTypes	2	Clang	Warn whenever incompatible function pointer types are used.
CppClangTidyClangDiagnosticIncompatibleLibraryRedeclaration	2	Clang	incompatible redeclaration of library function <A>
CppClangTidyClangDiagnosticIncompatibleMsStruct	2	Clang	error:ms_struct may not produce Microsoft-compatible layouts for classes with base classes or virtual functions, or fundamental data types with sizes that aren't a power of two
CppClangTidyClangDiagnosticIncompatiblePointerTypes	2	Clang	Warns whenever incompatible pointer types are used.
CppClangTidyClangDiagnosticIncompatiblePointerTypesDiscardsQualifiers	2	Clang	Warns whenever incompatible pointer types end up discarding qualifiers.
CppClangTidyClangDiagnosticIncompatiblePropertyType	2	Clang	property type <A> is incompatible with type <B> inherited from <C>
CppClangTidyClangDiagnosticIncompatibleSysroot	2	Clang	using sysroot for <A> but targeting <B>
CppClangTidyClangDiagnosticIncompleteImplementation	2	Clang	method definition for <A> not found
CppClangTidyClangDiagnosticIncompleteUmbrella	2	Clang	Could not find object within umbrella
CppClangTidyClangDiagnosticInconsistentDllimport	2	Clang	<A> redeclared without 'dllimport' attribute: 'dllexport' attribute added
CppClangTidyClangDiagnosticInconsistentMissingDestructorOverride	2	Clang	<A> overrides a destructor but is not marked 'override'
CppClangTidyClangDiagnosticInconsistentMissingOverride	2	Clang	<A> overrides a member function but is not marked 'override'
CppClangTidyClangDiagnosticIncrementBool	2	Clang	error:ISO C++17 does not allow incrementing expression of type bool
CppClangTidyClangDiagnosticInfiniteRecursion	2	Clang	all paths through this function will call itself
CppClangTidyClangDiagnosticInitializerOverrides	2	Clang	initializer overrides prior initialization of this subobject, or of other fields within its enclosing subobject.
CppClangTidyClangDiagnosticInjectedClassName	2	Clang	ISO C++ specifies that qualified reference to <A> is a constructor name rather than a template name/type in this context, despite preceding 'typename'/'template' keyword
CppClangTidyClangDiagnosticInlineNewDelete	2	Clang	replacement function <A> cannot be declared 'inline'
CppClangTidyClangDiagnosticInstantiationAfterSpecialization	2	Clang	explicit instantiation of <A> that occurs after an explicit specialization has no effect
CppClangTidyClangDiagnosticIntConversion	2	Clang	Warn whenever an incompatible integer to pointer conversion, or an incompatible pointer to integer conversion, is used.
CppClangTidyClangDiagnosticIntToPointerCast	2	Clang	cast to <B> from smaller integer type <A>
CppClangTidyClangDiagnosticIntToVoidPointerCast	2	Clang	cast to <B> from smaller integer type <A>
CppClangTidyClangDiagnosticIntegerOverflow	2	Clang	overflow in expression; result is <A> with type <B>
CppClangTidyClangDiagnosticInvalidConstexpr	2	Clang	error:constexpr function/constructor never produces a constant expression
CppClangTidyClangDiagnosticInvalidIboutlet	2	Clang	IBOutletCollection properties should be copy/strong and not assign
CppClangTidyClangDiagnosticInvalidInitializerFromSystemHeader	2	Clang	invalid constructor form class in system header, should not be explicit
CppClangTidyClangDiagnosticInvalidIosDeploymentTarget	2	Clang	error:invalid iOS deployment version ' <A> ', iOS 10 is the maximum deployment target for 32-bit targets
CppClangTidyClangDiagnosticInvalidNoreturn	2	Clang	function declared 'noreturn' should not return
CppClangTidyClangDiagnosticInvalidOffsetof	2	Clang	offset of on non-POD, or non-standard-layout type <A>
CppClangTidyClangDiagnosticInvalidOrNonexistentDirectory	2	Clang	Warns whenever a directory cannot be found or is invalid.
CppClangTidyClangDiagnosticInvalidPartialSpecialization	2	Clang	Warns whenever partial specialization of a construct is invalid.
CppClangTidyClangDiagnosticInvalidPpToken	2	Clang	Empty character constant, or missing terminating character
CppClangTidyClangDiagnosticInvalidSourceEncoding	2	Clang	illegal character encoding in character/string literal
CppClangTidyClangDiagnosticInvalidTokenPaste	2	Clang	error:pasting formed ' <A> ', an invalid preprocessing token
CppClangTidyClangDiagnosticJumpSehFinally	2	Clang	jump out of __finally block has undefined behavior
CppClangTidyClangDiagnosticKeywordCompat	2	Clang	keyword <A> will be made available as an identifier here, or for the remainder of the translation unit
CppClangTidyClangDiagnosticKeywordMacro	2	Clang	keyword is hidden by macro definition
CppClangTidyClangDiagnosticKnrPromotedParameter	2	Clang	promoted type of function parameter is not compatible with parameter type declared in a previous prototype
CppClangTidyClangDiagnosticLanguageExtensionToken	2	Clang	extension used
CppClangTidyClangDiagnosticLargeByValueCopy	2	Clang	<A> is a large ( <B> bytes) pass-by-value argument or object, and should be passed by reference instead.
CppClangTidyClangDiagnosticLiteralConversion	2	Clang	Warn whenever implicit conversion changes values or is undefined.
CppClangTidyClangDiagnosticLiteralRange	2	Clang	magnitude of floating-point constant too large or small for type <A> ; range is <B>
CppClangTidyClangDiagnosticLocalTypeTemplateArgs	2	Clang	template argument uses local type <A>
CppClangTidyClangDiagnosticLogicalNotParentheses	2	Clang	logical not is only applied to the left hand side of this comparison/bitwise operator
CppClangTidyClangDiagnosticLongLong	2	Clang	'long long' is an extension when C99 mode is not enabled
CppClangTidyClangDiagnosticMacroRedefined	2	Clang	<A> macro redefined
CppClangTidyClangDiagnosticMain	2	Clang	Warn whenever the 'main' function is misused
CppClangTidyClangDiagnosticMainReturnType	2	Clang	return type of 'main' is not 'int'
CppClangTidyClangDiagnosticMalformedWarningCheck	2	Clang	__has_warning expected option name (e.g. �-Wundef�)
CppClangTidyClangDiagnosticManyBracesAroundScalarInit	2	Clang	too many braces around scalar initializer
CppClangTidyClangDiagnosticMaxUnsignedZero	2	Clang	taking the max of a value and unsigned zero is always equal to the other value
CppClangTidyClangDiagnosticMemsizeComparison	2	Clang	size argument in <A> call is a comparison
CppClangTidyClangDiagnosticMethodSignatures	2	Clang	conflicting parameter types or return type in implementation of <A> : <B> vs <C>
CppClangTidyClangDiagnosticMicrosoftAnonTag	2	Clang	Anonymous structs/unions, and types declared in anonymous structs/unions, are a Microsoft extension
CppClangTidyClangDiagnosticMicrosoftCast	2	Clang	static_cast and implicit conversion between pointer-to-function and pointer-to-object is a Microsoft extension
CppClangTidyClangDiagnosticMicrosoftCharize	2	Clang	charizing operator #@ is a Microsoft extension
CppClangTidyClangDiagnosticMicrosoftCommentPaste	2	Clang	pasting two '/' tokens into a '//' comment is a Microsoft extension
CppClangTidyClangDiagnosticMicrosoftConstInit	2	Clang	default initialization of an object of const type <A> is a Microsoft extension
CppClangTidyClangDiagnosticMicrosoftCppMacro	2	Clang	C++ operator <A> (aka <B> ) used as a macro name
CppClangTidyClangDiagnosticMicrosoftDefaultArgRedefinition	2	Clang	redefinition of default argument
CppClangTidyClangDiagnosticMicrosoftEndOfFile	2	Clang	treating Ctrl-Z as end-of-file is a Microsoft extension
CppClangTidyClangDiagnosticMicrosoftEnumForwardReference	2	Clang	forward references to 'enum' types are a Microsoft extension
CppClangTidyClangDiagnosticMicrosoftEnumValue	2	Clang	enumerator value is not representable in the underlying type <A>
CppClangTidyClangDiagnosticMicrosoftExceptionSpec	2	Clang	Warn whenever Microsoft exception specifications are used
CppClangTidyClangDiagnosticMicrosoftExists	2	Clang	dependent ___if_not_exists,  __if_exists declarations are ignored
CppClangTidyClangDiagnosticMicrosoftExplicitConstructorCall	2	Clang	explicit constructor calls are a Microsoft extension
CppClangTidyClangDiagnosticMicrosoftExtraQualification	2	Clang	extra qualification on member <A>
CppClangTidyClangDiagnosticMicrosoftFixedEnum	2	Clang	enumeration types with a fixed underlying type are a Microsoft extension
CppClangTidyClangDiagnosticMicrosoftFlexibleArray	2	Clang	flexible array member <A> in otherwise empty construct, or in a union, is a Microsoft extension
CppClangTidyClangDiagnosticMicrosoftGoto	2	Clang	jump from this goto statement to its label is a Microsoft extension
CppClangTidyClangDiagnosticMicrosoftInaccessibleBase	2	Clang	accessing inaccessible direct base <A> of <B> is a Microsoft extension
CppClangTidyClangDiagnosticMicrosoftInclude	2	Clang	#include resolved using non-portable Microsoft search rules as: <A>
CppClangTidyClangDiagnosticMicrosoftMutableReference	2	Clang	'mutable' on a reference type is a Microsoft extension
CppClangTidyClangDiagnosticMicrosoftPureDefinition	2	Clang	function definition with pure-specifier is a Microsoft extension
CppClangTidyClangDiagnosticMicrosoftRedeclareStatic	2	Clang	redeclaring non-static <A> as static is a Microsoft extension
CppClangTidyClangDiagnosticMicrosoftSealed	2	Clang	'sealed' keyword is a Microsoft extension
CppClangTidyClangDiagnosticMicrosoftTemplate	2	Clang	Certain templates are Microsoft extensions
CppClangTidyClangDiagnosticMicrosoftUnionMemberReference	2	Clang	union member <A> has reference type <B> , which is a Microsoft extension
CppClangTidyClangDiagnosticMicrosoftUnqualifiedFriend	2	Clang	unqualified  friend declaration referring to type outside of the nearest enclosing  namespace is a Microsoft extension; add a nested name specifier
CppClangTidyClangDiagnosticMicrosoftUsingDecl	2	Clang	using declaration referring to inaccessible member <A> (which refers to accessible member <B>) is a Microsoft compatibility extension
CppClangTidyClangDiagnosticMicrosoftVoidPseudoDtor	2	Clang	pseudo-destructors on type void are a Microsoft extension
CppClangTidyClangDiagnosticMismatchedNewDelete	2	Clang	'delete' applied to a pointer that was allocated with 'new';
CppClangTidyClangDiagnosticMismatchedParameterTypes	2	Clang	conflicting parameter types in implementation of <A>
CppClangTidyClangDiagnosticMismatchedReturnTypes	2	Clang	conflicting return type in implementation of <A>
CppClangTidyClangDiagnosticMismatchedTags	2	Clang	Warns when previously declarations may result in linker errors under the Microsoft C++ ABI
CppClangTidyClangDiagnosticMissingBraces	2	Clang	suggest braces around initialization of subobject
CppClangTidyClangDiagnosticMissingDeclarations	2	Clang	Warns whenever a declaration does not do anything, or is invalid
CppClangTidyClangDiagnosticMissingExceptionSpec	2	Clang	<A> is missing exception specification ' <B> '
CppClangTidyClangDiagnosticMissingFieldInitializers	2	Clang	missing field <A> initializer
CppClangTidyClangDiagnosticMissingMethodReturnType	2	Clang	method has no return type specified; defaults to 'id'
CppClangTidyClangDiagnosticMissingNoescape	2	Clang	parameter of overriding method should be annotated with __attribute__((noescape))
CppClangTidyClangDiagnosticMissingNoreturn	2	Clang	block, function or method could be declared with attribute 'noreturn'
CppClangTidyClangDiagnosticMissingPrototypeForCc	2	Clang	function with no prototype cannot use the <A> calling convention
CppClangTidyClangDiagnosticMissingPrototypes	2	Clang	no previous prototype for function <A>
CppClangTidyClangDiagnosticMissingSelectorName	2	Clang	<A> used as the name of the previous parameter rather than as part of the selector
CppClangTidyClangDiagnosticMissingSysroot	2	Clang	no such sysroot directory: <A>
CppClangTidyClangDiagnosticMissingVariableDeclarations	2	Clang	no previous extern declaration for non-static variable <A>
CppClangTidyClangDiagnosticModuleConflict	2	Clang	Warn whenever conflicts may occur in loaded modules.
CppClangTidyClangDiagnosticModuleFileConfigMismatch	2	Clang	error:module file <A> cannot be loaded due to a configuration mismatch with the current compilation
CppClangTidyClangDiagnosticModuleFileExtension	2	Clang	duplicate module file extension block name <A>
CppClangTidyClangDiagnosticModuleImportInExternC	2	Clang	error:import of C++ module <A> appears within extern 'C' language linkage specification
CppClangTidyClangDiagnosticModulesAmbiguousInternalLinkage	2	Clang	ambiguous use of internal linkage declaration <A> defined in multiple modules
CppClangTidyClangDiagnosticModulesImportNestedRedundant	2	Clang	error:redundant #include of module <A> appears within <B>
CppClangTidyClangDiagnosticMsvcNotFound	2	Clang	unable to find a Visual Studio installation; try running Clang from a developer command prompt
CppClangTidyClangDiagnosticMultichar	2	Clang	multi-character character constant
CppClangTidyClangDiagnosticMultipleMoveVbase	2	Clang	defaulted move assignment operator of <A> will move assign virtual base class <B> multiple times
CppClangTidyClangDiagnosticNestedAnonTypes	2	Clang	anonymous types declared in an anonymous struct/union are an extension
CppClangTidyClangDiagnosticNewReturnsNull	2	Clang	<A> should not return a null pointer unless it is declared 'throw()', or 'noexcept'
CppClangTidyClangDiagnosticNewlineEof	2	Clang	no newline at end of file
CppClangTidyClangDiagnosticNonLiteralNullConversion	2	Clang	expression which evaluates to zero treated as a null pointer constant of type <A>
CppClangTidyClangDiagnosticNonModularIncludeInFrameworkModule	2	Clang	include of non-modular header inside framework module <A> : <B>
CppClangTidyClangDiagnosticNonModularIncludeInModule	2	Clang	include of non-modular header inside module <A> : <B>
CppClangTidyClangDiagnosticNonPodVarargs	2	Clang	error:cannot pass object of non-POD or non-trivial type <B> through variadic construct.
CppClangTidyClangDiagnosticNonVirtualDtor	2	Clang	<A> has virtual functions but non-virtual destructor
CppClangTidyClangDiagnosticNonnull	2	Clang	Warns whenever null is passed to a construct that requires a non-null argument.
CppClangTidyClangDiagnosticNonportableIncludePath	2	Clang	non-portable path to file <A>; specified path differs in case from file name on disk
CppClangTidyClangDiagnosticNonportableSystemIncludePath	2	Clang	non-portable path to file <A>; specified path differs in case from file name on disk
CppClangTidyClangDiagnosticNonportableVectorInitialization	2	Clang	vector initializers are not compatible with NEON intrinsics in big endian mode
CppClangTidyClangDiagnosticNsconsumedMismatch	2	Clang	overriding method has mismatched ns_consumed attribute on its parameter
CppClangTidyClangDiagnosticNsreturnsMismatch	2	Clang	overriding method has mismatched ns_returns_ attributes
CppClangTidyClangDiagnosticNullArithmetic	2	Clang	Warns whenever NULL is used in places where it cannot be used.
CppClangTidyClangDiagnosticNullCharacter	2	Clang	Warns whenever a null character(s) preserved in a char, string or literal.
CppClangTidyClangDiagnosticNullConversion	2	Clang	implicit conversion of NULL/nullptr constant to <B>
CppClangTidyClangDiagnosticNullDereference	2	Clang	Binding dereferenced null pointer to reference has undefined behavior.
CppClangTidyClangDiagnosticNullPointerArithmetic	2	Clang	Warn whenever arithmetic on null pointer may result in unintended behavior.
CppClangTidyClangDiagnosticNullability	2	Clang	Warns whenever nullability specifier causes conflicts or handles other behavior incorrectly.
CppClangTidyClangDiagnosticNullabilityCompleteness	2	Clang	Construct is missing a nullability type specifier (_Nonnull, _Nullable, or _Null_unspecified)
CppClangTidyClangDiagnosticNullabilityCompletenessOnArrays	2	Clang	array parameter is missing a nullability type specifier (_Nonnull, _Nullable, or _Null_unspecified)
CppClangTidyClangDiagnosticNullabilityDeclspec	2	Clang	error:nullability specifier <A> cannot be applied to non-pointer type <B>
CppClangTidyClangDiagnosticNullabilityExtension	2	Clang	type nullability specifier <A> is a Clang extension
CppClangTidyClangDiagnosticNullabilityInferredOnNestedType	2	Clang	inferring '_Nonnull' for pointer type within an array or reference is deprecated
CppClangTidyClangDiagnosticNullableToNonnullConversion	2	Clang	implicit conversion from nullable pointer <A> to non-nullable pointer type <B>
CppClangTidyClangDiagnosticObjcAutosynthesisPropertyIvarNameMatch	2	Clang	autosynthesized property <A> will use the wrong instance variable <B>
CppClangTidyClangDiagnosticObjcCircularContainer	2	Clang	adding <A> to <B> might cause circular dependency in container
CppClangTidyClangDiagnosticObjcDesignatedInitializers	2	Clang	Warns whenever designated initializers are misused.
CppClangTidyClangDiagnosticObjcFlexibleArray	2	Clang	Warns whenever variable sized types may cause issues with instance variables.
CppClangTidyClangDiagnosticObjcForwardClassRedefinition	2	Clang	redefinition of forward class <A> of a typedef name of an object type is ignored
CppClangTidyClangDiagnosticObjcInterfaceIvars	2	Clang	declaration of instance variables in the interface is deprecated
CppClangTidyClangDiagnosticObjcLiteralCompare	2	Clang	direct comparison of a (array/directory/numeric) literal or a boxed expression has undefined behavior
CppClangTidyClangDiagnosticObjcLiteralConversion	2	Clang	implicit boolean conversion of Objective-C object literal always evaluates to true, or object of type <A> is not compatible with type <C>
CppClangTidyClangDiagnosticObjcMacroRedefinition	2	Clang	ignoring redefinition of Objective-C qualifier macro
CppClangTidyClangDiagnosticObjcMessagingId	2	Clang	messaging unqualified id
CppClangTidyClangDiagnosticObjcMethodAccess	2	Clang	class or instance method <A> not found 
CppClangTidyClangDiagnosticObjcMissingPropertySynthesis	2	Clang	auto property synthesis is synthesizing property not explicitly synthesized
CppClangTidyClangDiagnosticObjcMissingSuperCalls	2	Clang	method possibly missing a  <super A> call
CppClangTidyClangDiagnosticObjcMultipleMethodNames	2	Clang	multiple methods named <A> found
CppClangTidyClangDiagnosticObjcNoncopyRetainBlockProperty	2	Clang	retain'ed block property does not copy the block - use copy attribute instead
CppClangTidyClangDiagnosticObjcNonunifiedExceptions	2	Clang	cannot catch an exception thrown with @throw in C++ in the non-unified exception model
CppClangTidyClangDiagnosticObjcPropertyImplementation	2	Clang	property <A> requires method <B> to be defined
CppClangTidyClangDiagnosticObjcPropertyImplicitMismatch	2	Clang	primary property declaration is implicitly strong while redeclaration in class extension is weak
CppClangTidyClangDiagnosticObjcPropertyMatchesCocoaOwnershipRule	2	Clang	property follows Cocoa naming convention for returning 'owned' objects
CppClangTidyClangDiagnosticObjcPropertyNoAttribute	2	Clang	default property attribute 'assign' not appropriate for object, or no 'assign', 'retain', or 'copy' attribute is specified
CppClangTidyClangDiagnosticObjcPropertySynthesis	2	Clang	auto property synthesis will not synthesize property <A>
CppClangTidyClangDiagnosticObjcProtocolMethodImplementation	2	Clang	category is implementing a method which will also be implemented by its primary class
CppClangTidyClangDiagnosticObjcProtocolPropertySynthesis	2	Clang	auto property synthesis will not synthesize property <A> declared in protocol <B>
CppClangTidyClangDiagnosticObjcProtocolQualifiers	2	Clang	parameterized class <A> already conforms to the protocols listed; did you forget a '*'?
CppClangTidyClangDiagnosticObjcReadonlyWithSetterProperty	2	Clang	setter cannot be specified for a readonly property
CppClangTidyClangDiagnosticObjcRedundantLiteralUse	2	Clang	using <A> with a literal is redundant
CppClangTidyClangDiagnosticObjcRootClass	2	Clang	class <A> defined without specifying a base class
CppClangTidyClangDiagnosticObjcStringCompare	2	Clang	direct comparison of a string literal has undefined behavior
CppClangTidyClangDiagnosticObjcStringConcatenation	2	Clang	concatenated NSString literal for an NSArray expression - possibly missing a comma
CppClangTidyClangDiagnosticObjcUnsafePerformSelector	2	Clang	Warn whenever a construct is incompatible with selectors that return the wrong type.
CppClangTidyClangDiagnosticOdr	2	Clang	type <A> has incompatible definitions in different translation units
CppClangTidyClangDiagnosticOldStyleCast	2	Clang	use of old-style cast
CppClangTidyClangDiagnosticOpenclUnsupportedRgba	2	Clang	vector component name ' <A> ' is an OpenCL version 2.2 feature
CppClangTidyClangDiagnosticOpenmpClauses	2	Clang	aligned clause will be ignored because the requested alignment is not in the correct format.
CppClangTidyClangDiagnosticOpenmpLoopForm	2	Clang	initialization clause of OpenMP for loop is not in canonical form or too large
CppClangTidyClangDiagnosticOpenmpTarget	2	Clang	Warn whenever OpenMP targets may result in unintended consequences.
CppClangTidyClangDiagnosticOptionIgnored	2	Clang	Warn whenever a compiler option is ignored.
CppClangTidyClangDiagnosticOutOfLineDeclaration	2	Clang	error:out-of-line declaration of a member must be a definition
CppClangTidyClangDiagnosticOutOfScopeFunction	2	Clang	use of out-of-scope declaration of <A>, or one whose type is not compatible with that of an implicit declaration
CppClangTidyClangDiagnosticOverAligned	2	Clang	type <A> requires <B> bytes of alignment and the default allocator only guarantees <C> bytes
CppClangTidyClangDiagnosticOverlengthStrings	2	Clang	string literal of length <A> exceeds maximum length <B> that the compiler is required to support
CppClangTidyClangDiagnosticOverloadedShiftOpParentheses	2	Clang	overloaded operator has higher precedence than comparison operator
CppClangTidyClangDiagnosticOverloadedVirtual	2	Clang	<A> hides overloaded virtual function or functions
CppClangTidyClangDiagnosticOverrideModule	2	Clang	overriding the module target triple with <A>
CppClangTidyClangDiagnosticOverridingMethodMismatch	2	Clang	Warn whenever overriding a method may result in a type mismatch.
CppClangTidyClangDiagnosticOverridingTOption	2	Clang	overriding <A> option with <B>
CppClangTidyClangDiagnosticPacked	2	Clang	packed attribute is unnecessary for <A>
CppClangTidyClangDiagnosticPadded	2	Clang	Warn whenever it is necessary to pad a bit-field.
CppClangTidyClangDiagnosticParentheses	2	Clang	Warn whenever precedence of operators conflicts with the use of parentheses.
CppClangTidyClangDiagnosticPchDateTime	2	Clang	Warn whenever a precompiled header module uses __DATE__ or __TIME__.
CppClangTidyClangDiagnosticPedanticCoreFeatures	2	Clang	OpenCL extension <A> is core feature or supported optional core feature - ignoring
CppClangTidyClangDiagnosticPessimizingMove	2	Clang	moving a temporary object, or a local object in a return statement. prevents copy elision
CppClangTidyClangDiagnosticPointerArith	2	Clang	Warn whenever dubious or unsupported pointer arithmetic is used.
CppClangTidyClangDiagnosticPointerBoolConversion	2	Clang	nonnull function call or parameter '<A>', or address <B>, will evaluate to 'true'.
CppClangTidyClangDiagnosticPointerSign	2	Clang	Warns whenever a conversion is made from pointers to integer types with different sign.
CppClangTidyClangDiagnosticPointerTypeMismatch	2	Clang	pointer type mismatch
CppClangTidyClangDiagnosticPotentiallyEvaluatedExpression	2	Clang	expression with side effects will be evaluated despite being used as an operand to 'typeid'
CppClangTidyClangDiagnosticPragmaClangAttribute	2	Clang	unused attribute <A> in '#pragma clang attribute push' region
CppClangTidyClangDiagnosticPragmaOnceOutsideHeader	2	Clang	#pragma once in main file
CppClangTidyClangDiagnosticPragmaPack	2	Clang	the current #pragma pack alignment value is modified in the included file
CppClangTidyClangDiagnosticPragmaPackSuspiciousInclude	2	Clang	non-default #pragma pack value changes the alignment of struct or union members in the included file
CppClangTidyClangDiagnosticPragmaSystemHeaderOutsideHeader	2	Clang	#pragma system_header ignored in main file
CppClangTidyClangDiagnosticPragmas	2	Clang	#pragma redefine_extname is applicable to external C declarations only; not applied function/variable <B>
CppClangTidyClangDiagnosticPredefinedIdentifierOutsideFunction	2	Clang	predefined identifier is only valid inside function
CppClangTidyClangDiagnosticPrivateExtern	2	Clang	use of __private_extern__ on a declaration may not produce external symbol private to the linkage unit and is deprecated
CppClangTidyClangDiagnosticPrivateHeader	2	Clang	error:use of private header from outside its module: ' <A> '
CppClangTidyClangDiagnosticPrivateModule	2	Clang	Warns whenever private modules are misused.'
CppClangTidyClangDiagnosticProfileInstrMissing	2	Clang	Warns whenever profile data may be incomplete due to a property having no data.
CppClangTidyClangDiagnosticProfileInstrOutOfDate	2	Clang	Warns whenever profile data may be out of date due to a property having mismatched data.
CppClangTidyClangDiagnosticProfileInstrUnprofiled	2	Clang	no profile data available for file � <A> �
CppClangTidyClangDiagnosticPropertyAccessDotSyntax	2	Clang	property <A> not found on object of type <B> ; did you mean to access property <C> ?
CppClangTidyClangDiagnosticPropertyAttributeMismatch	2	Clang	Warns whenever a property attribute mismatch occurs.
CppClangTidyClangDiagnosticProtocol	2	Clang	method <A> in protocol <B> not implemented
CppClangTidyClangDiagnosticProtocolPropertySynthesisAmbiguity	2	Clang	Warns whenever there is ambiguity in property synthesis.
CppClangTidyClangDiagnosticQualifiedVoidReturnType	2	Clang	function cannot return qualified void type <A>
CppClangTidyClangDiagnosticRangeLoopAnalysis	2	Clang	Warns whenever loop variable <A> ends up being a copy.
CppClangTidyClangDiagnosticReadonlyIboutletProperty	2	Clang	readonly IBOutlet property <A> when auto-synthesized may not work correctly with 'nib' loader
CppClangTidyClangDiagnosticReceiverExpr	2	Clang	receiver type <A> is not 'id' or interface pointer, consider casting it to 'id'
CppClangTidyClangDiagnosticReceiverForwardClass	2	Clang	receiver <A> is a forward class or declaration.
CppClangTidyClangDiagnosticRedeclaredClassMember	2	Clang	class member cannot be redeclared
CppClangTidyClangDiagnosticRedundantMove	2	Clang	redundant move in return statement
CppClangTidyClangDiagnosticRedundantParens	2	Clang	redundant parentheses surrounding declarator
CppClangTidyClangDiagnosticRegister	2	Clang	error:ISO C++17 does not allow 'register' storage class specifier
CppClangTidyClangDiagnosticReinterpretBaseClass	2	Clang	Warns whenever 'reinterpret_cast' behaves differently from 'static_cast'
CppClangTidyClangDiagnosticReorder	2	Clang	field/base class <B> will be initialized after field/base <D>
CppClangTidyClangDiagnosticRequiresSuperAttribute	2	Clang	<A> attribute cannot be applied to either methods in protocols or dealloc
CppClangTidyClangDiagnosticReservedIdMacro	2	Clang	macro name is a reserved identifier
CppClangTidyClangDiagnosticReservedUserDefinedLiteral	2	Clang	invalid suffix on literal; C++11 requires a space between literal and identifier
CppClangTidyClangDiagnosticRetainedLanguageLinkage	2	Clang	friend function <A> retaining previous language linkage is an extension
CppClangTidyClangDiagnosticReturnStackAddress	2	Clang	Warns whenever a address or reference is made to a local or temporary construct.
CppClangTidyClangDiagnosticReturnType	2	Clang	Warns whenever control may reach the end of a routine leading to undefined behavior.
CppClangTidyClangDiagnosticReturnTypeCLinkage	2	Clang	<A> has C-linkage specified, but returns a type <B> which may be incompatible with C
CppClangTidyClangDiagnosticSection	2	Clang	Warns whenever issues occur with sections or segments.
CppClangTidyClangDiagnosticSelector	2	Clang	no method with selector <A> is implemented in this translation unit
CppClangTidyClangDiagnosticSelectorTypeMismatch	2	Clang	several methods with selector <A> of mismatched types are found for the @selector expression
CppClangTidyClangDiagnosticSelfAssign	2	Clang	explicitly assigning value of variable of type <A> to itself
CppClangTidyClangDiagnosticSelfAssignField	2	Clang	assigning field or instance variable to itself
CppClangTidyClangDiagnosticSelfMove	2	Clang	explicitly moving variable of type <A> to itself
CppClangTidyClangDiagnosticSemicolonBeforeMethodBody	2	Clang	semicolon before method body is ignored
CppClangTidyClangDiagnosticSentinel	2	Clang	Warns whenever sentinel is misused or missing.
CppClangTidyClangDiagnosticSerializedDiagnostics	2	Clang	Warns whenever it is not possible to serialize diagnostics
CppClangTidyClangDiagnosticShadow	2	Clang	Warns whenever a declaration shadows another construct.
CppClangTidyClangDiagnosticShadowField	2	Clang	parameter or non-static data member <A> shadows member inherited from type <C>
CppClangTidyClangDiagnosticShadowFieldInConstructor	2	Clang	constructor parameter <A> shadows the field <B> of <C>
CppClangTidyClangDiagnosticShadowFieldInConstructorModified	2	Clang	modifying constructor parameter <A> that shadows a field of <B>
CppClangTidyClangDiagnosticShadowIvar	2	Clang	local declaration of <A> hides instance variable
CppClangTidyClangDiagnosticShadowUncapturedLocal	2	Clang	Warns whenever a declaration shadows a construct that it is not allowed to shadow.
CppClangTidyClangDiagnosticShiftCountNegative	2	Clang	shift count is negative
CppClangTidyClangDiagnosticShiftCountOverflow	2	Clang	shift count &gt;= width of type
CppClangTidyClangDiagnosticShiftNegativeValue	2	Clang	shifting a negative signed value is undefined
CppClangTidyClangDiagnosticShiftOpParentheses	2	Clang	operator ' <A> ' has lower precedence than ' <B> '; ' <B> ' will be evaluated first
CppClangTidyClangDiagnosticShiftOverflow	2	Clang	signed shift result ( <A> ) requires <B> bits to represent, but <C> only has <D> bits
CppClangTidyClangDiagnosticShiftSignOverflow	2	Clang	signed shift result ( <A> ) sets the sign bit of the shift expression's type ( <B> ) and becomes negative
CppClangTidyClangDiagnosticShorten64To32	2	Clang	implicit conversion loses integer precision: <A> to <B>
CppClangTidyClangDiagnosticSignCompare	2	Clang	comparison of integers of different signs: <A> and <B>
CppClangTidyClangDiagnosticSignConversion	2	Clang	Warn whenever implicit conversion or the operand changes signedness of <A> to <B>.
CppClangTidyClangDiagnosticSignedEnumBitfield	2	Clang	enums in the Microsoft ABI are signed integers by default; consider giving the enum <A> an unsigned underlying type to make this code portable
CppClangTidyClangDiagnosticSizeofArrayArgument	2	Clang	sizeof on array function parameter will return size of <A> instead of <B>
CppClangTidyClangDiagnosticSizeofArrayDecay	2	Clang	sizeof on pointer operation will return size of <A> instead of <B>
CppClangTidyClangDiagnosticSizeofPointerMemaccess	2	Clang	'<A>' call operates on objects of type <B> while the size is based on a different type <C>, or expected <D> or an explicit length
CppClangTidyClangDiagnosticSlashUFilename	2	Clang	'/U <A>' treated as the '/U' option
CppClangTidyClangDiagnosticSometimesUninitialized	2	Clang	Warns whenever a variable may be uninitialized under certain conditions
CppClangTidyClangDiagnosticSourceUsesOpenmp	2	Clang	OpenMP only allows an ordered construct with the simd clause nested in a simd construct, or unexpected '#pragma omp' in program
CppClangTidyClangDiagnosticSpirCompat	2	Clang	sampler initializer has invalid <A> bits
CppClangTidyClangDiagnosticStaticFloatInit	2	Clang	error:in-class initializer for static data member of type <A> requires 'constexpr' specifier
CppClangTidyClangDiagnosticStaticInInline	2	Clang	static function/variable <B> is used in an inline function with external linkage
CppClangTidyClangDiagnosticStaticInlineExplicitInstantiation	2	Clang	ignoring 'static  inline' keyword on explicit template instantiation
CppClangTidyClangDiagnosticStaticLocalInInline	2	Clang	non-constant static local variable in inline function may be different in different files
CppClangTidyClangDiagnosticStaticSelfInit	2	Clang	static variable <A> is suspiciously used within its own initialization
CppClangTidyClangDiagnosticStrictPrototypes	2	Clang	Warns whenever prototypes are not used when necessary.
CppClangTidyClangDiagnosticStrictSelectorMatch	2	Clang	multiple methods named <A> found
CppClangTidyClangDiagnosticStringCompare	2	Clang	Result of comparison against a string literal or @encode is unspecified (use strncmp instead)
CppClangTidyClangDiagnosticStringConversion	2	Clang	implicit conversion turns string literal into bool: <A> to <B>
CppClangTidyClangDiagnosticStringPlusChar	2	Clang	adding <A> to a string pointer does not append to the string
CppClangTidyClangDiagnosticStringPlusInt	2	Clang	adding <A> to a string does not append to the string
CppClangTidyClangDiagnosticStrlcpyStrlcatSize	2	Clang	size argument in <A> call appears to be size of the source; expected the size of the destination
CppClangTidyClangDiagnosticStrncatSize	2	Clang	Warns whenever there is a problem with the value of the size argument in 'strncat'
CppClangTidyClangDiagnosticSuperClassMethodMismatch	2	Clang	method parameter typedoes not match super class method parameter type
CppClangTidyClangDiagnosticSwitch	2	Clang	Warns whenever possible switch values are not handled.
CppClangTidyClangDiagnosticSwitchBool	2	Clang	switch condition has boolean value
CppClangTidyClangDiagnosticSwitchEnum	2	Clang	Warns whenever possible enumeration values of switch are not handled.
CppClangTidyClangDiagnosticSyncFetchAndNandSemanticsChanged	2	Clang	the semantics of this intrinsic changed with GCC version 4.4 - the newer semantics are provided here
CppClangTidyClangDiagnosticTautologicalCompare	2	Clang	Warns whenever a comparison will always result in the same value.
CppClangTidyClangDiagnosticTautologicalConstantCompare	2	Clang	Warns whenever a comparison containing a constant will always result in the same value.
CppClangTidyClangDiagnosticTautologicalConstantOutOfRangeCompare	2	Clang	Warns whenever a comparison containing a constant will always result in the same value.
CppClangTidyClangDiagnosticTautologicalOverlapCompare	2	Clang	Warns whenever overlapping comparisons will always result in the same value.
CppClangTidyClangDiagnosticTautologicalPointerCompare	2	Clang	Warns whenever a comparison to a null pointer will always result in the same value.
CppClangTidyClangDiagnosticTautologicalTypeLimitCompare	2	Clang	Warns whenever the result of a comparison between types will always result in the same value.
CppClangTidyClangDiagnosticTautologicalUndefinedCompare	2	Clang	Warns whenever properties of pointers lead to a comparison that will always result in the same value.
CppClangTidyClangDiagnosticTautologicalUnsignedEnumZeroCompare	2	Clang	Warns whenever the result of comparison of unsigned enum expressions is always the same.
CppClangTidyClangDiagnosticTautologicalUnsignedZeroCompare	2	Clang	Warns whenever the result of comparison of unsigned expressions is always the same.
CppClangTidyClangDiagnosticTentativeDefinitionIncompleteType	2	Clang	tentative definition of variable with internal linkage has incomplete non-array type <A>
CppClangTidyClangDiagnosticThreadSafetyAnalysis	2	Clang	Warns whenever thread safety is found by analysis.
CppClangTidyClangDiagnosticThreadSafetyAttributes	2	Clang	Warns whenever the attributes 'capability' or 'scoped_lockable' are misused.
CppClangTidyClangDiagnosticThreadSafetyBeta	2	Clang	Thread safety beta warning.
CppClangTidyClangDiagnosticThreadSafetyNegative	2	Clang	acquiring <A> ' <B> ' requires negative capability ' <C> '
CppClangTidyClangDiagnosticThreadSafetyPrecise	2	Clang	Warns whenever an operation requires holding <A>, and may violate thread safety
CppClangTidyClangDiagnosticThreadSafetyReference	2	Clang	Warns when unsafe passing of a variable by reference is found.
CppClangTidyClangDiagnosticThreadSafetyVerbose	2	Clang	Thread safety verbose warning.
CppClangTidyClangDiagnosticTrigraphs	2	Clang	Warns whenever trigraphs are not used as intended.
CppClangTidyClangDiagnosticTypeSafety	2	Clang	Warns whenever a violation on type safety is found.
CppClangTidyClangDiagnosticTypedefRedefinition	2	Clang	redefinition of typedef <A> is a C11 feature
CppClangTidyClangDiagnosticTypenameMissing	2	Clang	missing 'typename' prior to dependent type name <A> <B>
CppClangTidyClangDiagnosticUnableToOpenStatsFile	2	Clang	unable to open statistics output file <A>
CppClangTidyClangDiagnosticUnavailableDeclarations	2	Clang	<A> may be unavailable because the receiver type is unknown
CppClangTidyClangDiagnosticUndeclaredSelector	2	Clang	undeclared selector <A>
CppClangTidyClangDiagnosticUndef	2	Clang	<A> is not defined, evaluates to 0
CppClangTidyClangDiagnosticUndefinedBoolConversion	2	Clang	Warns whenever properties of pointers lead to a pointer that will always convert to true.
CppClangTidyClangDiagnosticUndefinedFuncTemplate	2	Clang	instantiation of function <A> required here, but no definition is available
CppClangTidyClangDiagnosticUndefinedInline	2	Clang	inline function <A> is not defined
CppClangTidyClangDiagnosticUndefinedInternal	2	Clang	function/variable <B> has internal linkage but is not defined
CppClangTidyClangDiagnosticUndefinedInternalType	2	Clang	ISO C++ requires a definition in this translation unit for function/variable <B> because its type does not have linkage
CppClangTidyClangDiagnosticUndefinedReinterpretCast	2	Clang	Warns whenever a reinterpret_cast from <A> to <B> has undefined behavior.
CppClangTidyClangDiagnosticUndefinedVarTemplate	2	Clang	instantiation of variable <A> required here, but no definition is available
CppClangTidyClangDiagnosticUnevaluatedExpression	2	Clang	expression with side effects has no effect in an unevaluated context
CppClangTidyClangDiagnosticUnguardedAvailability	2	Clang	<A> is only available on <B>  <C> or newer
CppClangTidyClangDiagnosticUnguardedAvailabilityNew	2	Clang	<A> is only available on <B>  <C> or newer
CppClangTidyClangDiagnosticUnicode	2	Clang	Warns whenever invalid Unicode usage is detected.
CppClangTidyClangDiagnosticUnicodeHomoglyph	2	Clang	treating Unicode character <A> as identifier character rather than as <B> symbol
CppClangTidyClangDiagnosticUnicodeWhitespace	2	Clang	treating Unicode character as whitespace
CppClangTidyClangDiagnosticUninitialized	2	Clang	Warns whenever an uninitialized construct is used.
CppClangTidyClangDiagnosticUnknownArgument	2	Clang	unknown argument ignored in clang-cl: <A>
CppClangTidyClangDiagnosticUnknownAttributes	2	Clang	unknown attribute <A> ignored
CppClangTidyClangDiagnosticUnknownEscapeSequence	2	Clang	unknown escape sequence \<A>
CppClangTidyClangDiagnosticUnknownPragmas	2	Clang	Warns whenever an unknown #pragma is used.
CppClangTidyClangDiagnosticUnknownSanitizers	2	Clang	unknown sanitizer <A> ignored
CppClangTidyClangDiagnosticUnknownWarningOption	2	Clang	Warns whenever an unknown warning is passed as an argument.
CppClangTidyClangDiagnosticUnnamedTypeTemplateArgs	2	Clang	template argument uses unnamed type
CppClangTidyClangDiagnosticUnneededInternalDeclaration	2	Clang	Warns whenever an unneeded internal declaration is used.
CppClangTidyClangDiagnosticUnneededMemberFunction	2	Clang	member function <A> is not needed and will not be emitted
CppClangTidyClangDiagnosticUnreachableCode	2	Clang	code will never be executed
CppClangTidyClangDiagnosticUnreachableCodeBreak	2	Clang	'break' will never be executed
CppClangTidyClangDiagnosticUnreachableCodeLoopIncrement	2	Clang	loop will run at most once (loop increment never executed)
CppClangTidyClangDiagnosticUnreachableCodeReturn	2	Clang	'return' will never be executed
CppClangTidyClangDiagnosticUnsequenced	2	Clang	Warns whenever unsequenced modifications are made to <A>.
CppClangTidyClangDiagnosticUnsupportedAbs	2	Clang	ignoring -mabs option because the <A> architecture does not support it
CppClangTidyClangDiagnosticUnsupportedAvailabilityGuard	2	Clang	Warns whenever an availability guard is used without being supported.
CppClangTidyClangDiagnosticUnsupportedCb	2	Clang	ignoring '-mcompact-branches=' option because the <A> architecture does not support it
CppClangTidyClangDiagnosticUnsupportedDllBaseClassTemplate	2	Clang	propagating dll attribute to an already instantiated/explicitly specialized base class template without dll attribute is not supported
CppClangTidyClangDiagnosticUnsupportedFriend	2	Clang	Dependent nested name specifier <A> for friend class/template declaration is not supported.
CppClangTidyClangDiagnosticUnsupportedGpopt	2	Clang	ignoring '-mgpopt' option as it cannot be used with the implicit usage of -mabicalls
CppClangTidyClangDiagnosticUnsupportedNan	2	Clang	ignoring '-mnan=2008' or '-mnan=legacy' option because the <A> architecture does not support it
CppClangTidyClangDiagnosticUnsupportedVisibility	2	Clang	target does not support 'protected' visibility; using 'default'
CppClangTidyClangDiagnosticUnusablePartialSpecialization	2	Clang	Warns whenever a partial specialization is unusable.
CppClangTidyClangDiagnosticUnusedComparison	2	Clang	Warns whenever a comparison is unused.
CppClangTidyClangDiagnosticUnusedConstVariable	2	Clang	unused variable <A>
CppClangTidyClangDiagnosticUnusedExceptionParameter	2	Clang	unused exception parameter <A>
CppClangTidyClangDiagnosticUnusedFunction	2	Clang	unused function <A>
CppClangTidyClangDiagnosticUnusedGetterReturnValue	2	Clang	property access result unused - getters should not be used for side effects
CppClangTidyClangDiagnosticUnusedLabel	2	Clang	unused label <A>
CppClangTidyClangDiagnosticUnusedLambdaCapture	2	Clang	lambda capture <A> is not used or required to be captured for this use
CppClangTidyClangDiagnosticUnusedLocalTypedef	2	Clang	Warns whenever a local typedef or type alias is left unused.
CppClangTidyClangDiagnosticUnusedMacros	2	Clang	macro is not used
CppClangTidyClangDiagnosticUnusedMemberFunction	2	Clang	unused member function <A>
CppClangTidyClangDiagnosticUnusedPrivateField	2	Clang	private field <A> is not used
CppClangTidyClangDiagnosticUnusedPropertyIvar	2	Clang	ivar <A> which backs the property is not referenced in this property's accessor
CppClangTidyClangDiagnosticUnusedResult	2	Clang	ignoring return value of function declared with <A> attribute
CppClangTidyClangDiagnosticUnusedTemplate	2	Clang	Warns whenever a template of a function or variable is left unused.
CppClangTidyClangDiagnosticUnusedValue	2	Clang	Warns whenever a value is left unused.
CppClangTidyClangDiagnosticUnusedVolatileLvalue	2	Clang	expression result unused; assign into a variable to force a volatile load
CppClangTidyClangDiagnosticUsedButMarkedUnused	2	Clang	<A> was marked unused but was used
CppClangTidyClangDiagnosticVarargs	2	Clang	Warns whenever variable arguments may be misused.
CppClangTidyClangDiagnosticVariadicMacros	2	Clang	Warns whenever variadic macros may be causing unintended consequences.
CppClangTidyClangDiagnosticVecElemSize	2	Clang	error:vector operands do not have the same elements sizes ( <A> and <B> )
CppClangTidyClangDiagnosticVectorConversion	2	Clang	Warns whenever a conversion is used on incompatible vector types.
CppClangTidyClangDiagnosticVexingParse	2	Clang	Warns whenever an unclear way of parsing parentheses has been used.
CppClangTidyClangDiagnosticVisibility	2	Clang	declaration/redefinition of <A> will not be visible outside of this function
CppClangTidyClangDiagnosticVla	2	Clang	variable length array used
CppClangTidyClangDiagnosticVlaExtension	2	Clang	variable length arrays are a C99 feature
CppClangTidyClangDiagnosticVoidPtrDereference	2	Clang	ISO C++ does not allow indirection on operand of type <A>
CppClangTidyClangDiagnosticZeroAsNullPointerConstant	2	Clang	zero as null pointer constant
CppClangTidyClangDiagnosticZeroLengthArray	2	Clang	zero size arrays are an extension
CppClangTidyCppcoreguidelinesInterfacesGlobalInit	2	ClangTidy	This check flags initializers of globals that access extern objects, and therefore can lead to order-of-initialization problems.
CppClangTidyCppcoreguidelinesProTypeMemberInit	2	ClangTidy	The check flags user-defined constructor definitions that do not initialize all fields that would be left in an undefined state by default construction.
CppClangTidyCppcoreguidelinesProTypeStaticCastDowncast	3	ClangTidy	This check flags all usages of static_cast, where a base class is casted to a derived class.
CppClangTidyCppcoreguidelinesSlicing	2	ClangTidy	Flags slicing of member variables or vtable.
CppClangTidyCppcoreguidelinesSpecialMemberFunctions	3	ClangTidy	The check finds classes where some but not all of the special member functions are defined.
CppClangTidyGoogleBuildNamespaces	2	ClangTidy	Finds anonymous namespaces in headers.
CppClangTidyGoogleReadabilityRedundantSmartptrGet	3	ClangTidy	Find and remove redundant calls to smart pointer's .get() method.y
CppClangTidyGoogleRuntimeMemberStringReferences	2	ClangTidy	Finds members of type const string&. const string reference members are generally considered unsafe as they can be created from a temporary quite easily.
CppClangTidyGoogleRuntimeOperator	2	ClangTidy	Finds overloads of unary operator &.
CppClangTidyHicppExceptionBaseclass	3	ClangTidy	Ensure that every value that in a throw expression is an instance of std::exception.
CppClangTidyHighlighting	3	ClangTidy	Unknown clang-tidy checks
CppClangTidyMiscMisplacedConst	2	ClangTidy	This check diagnoses when a const qualifier is applied to a typedef to a pointer type rather than to the pointee, because such constructs are often misleading to developers because the const applies to the pointer rather than the pointee.
CppClangTidyMiscNewDeleteOverloads	2	ClangTidy	The check flags overloaded operator new() and operator delete() functions that do not have a corresponding free store function defined within the same scope.
CppClangTidyMiscNonCopyableObjects	2	ClangTidy	The check flags dereferences and non-pointer declarations of objects that are not meant to be passed by value, such as C FILE objects or POSIX pthread_mutex_t objects.
CppClangTidyMiscRedundantExpression	2	ClangTidy	Detect redundant expressions which are typically errors due to copy-paste.
CppClangTidyMiscStaticAssert	3	ClangTidy	The condition of static_assert() is evaluated at compile time which is safer and more efficient.
CppClangTidyMiscThrowByValueCatchByReference	2	ClangTidy	Finds violations of the rule "Throw by value, catch by reference"
CppClangTidyMiscUnconventionalAssignOperator	2	ClangTidy	Finds declarations of assign operators with the wrong return and/or argument types and definitions with good return type but wrong return statements
CppClangTidyMiscUndelegatedConstructor	2	ClangTidy	Finds creation of temporary objects in constructors that look like a function call to another constructor of the same class.
CppClangTidyMiscUniqueptrResetRelease	3	ClangTidy	Find and replace unique_ptr::reset(release()) with std::move()
CppClangTidyMiscUnusedAliasDecls	3	ClangTidy	Finds unused namespace alias declarations
CppClangTidyMiscUnusedRaii	2	ClangTidy	Finds temporaries that look like RAII objects.
CppClangTidyMiscUnusedUsingDecls	3	ClangTidy	Finds unused using declarations
CppClangTidyModernizeAvoidBind	3	ClangTidy	The check finds uses of std::bind and replaces simple uses with lambdas
CppClangTidyModernizeDeprecatedHeaders	3	ClangTidy	Some headers from C library were deprecated in C++ and are no longer welcome in C++ codebases
CppClangTidyModernizeLoopConvert	3	ClangTidy	This check converts for(
CppClangTidyModernizePassByValue	3	ClangTidy	With move semantics added to the language and the standard library updated with move constructors added for many types it is now interesting to take an argument directly by value, instead of by const-reference, and then copy
CppClangTidyModernizeRawStringLiteral	3	ClangTidy	This check selectively replaces string literals containing escaped characters with raw string literals
CppClangTidyModernizeReplaceAutoPtr	3	ClangTidy	This check replaces the uses of the deprecated class std::auto_ptr by std::unique_ptr (introduced in C++11)
CppClangTidyModernizeReplaceRandomShuffle	3	ClangTidy	This check will find occurrences of std::random_shuffle and replace it with std::shuffle
CppClangTidyModernizeReturnBracedInitList	3	ClangTidy	Replaces explicit calls to the constructor in a return with a braced initializer list
CppClangTidyModernizeShrinkToFit	3	ClangTidy	Replace copy and swap tricks on shrinkable containers with the shrink_to_fit() method call
CppClangTidyModernizeUnaryStaticAssert	3	ClangTidy	The check diagnoses any static_assert declaration with an empty string literal and provides a fix-it to replace the declaration with a single-argument static_assert declaration
CppClangTidyModernizeUseAuto	3	ClangTidy	This check is responsible for using the auto type specifier for variable declarations to improve code readability and maintainability
CppClangTidyModernizeUseBoolLiterals	3	ClangTidy	Finds integer literals which are cast to bool
CppClangTidyModernizeUseEmplace	3	ClangTidy	The check flags insertions to an STL-style container done by calling the push_back method with an explicitly-constructed temporary of the container element type
CppClangTidyModernizeUseEqualsDefault	3	ClangTidy	This check replaces default bodies of special member functions with = default;
CppClangTidyModernizeUseEqualsDelete	3	ClangTidy	This check marks unimplemented private special member functions with = delete
CppClangTidyModernizeUseNoexcept	3	ClangTidy	This check replaces deprecated dynamic exception specifications with the appropriate noexcept specification (introduced in C++11)
CppClangTidyModernizeUseTransparentFunctors	3	ClangTidy	Prefer transparent functors to non-transparent ones
CppClangTidyMpiBufferDeref	2	ClangTidy	This check verifies if a buffer passed to an MPI (Message Passing Interface) function is sufficiently dereferenced
CppClangTidyMpiTypeMismatch	2	ClangTidy	This check verifies if buffer type and MPI (Message Passing Interface) datatype pairs match for used MPI functions
CppClangTidyObjcAvoidNserrorInit	2	ClangTidy	Finds improper initialization of NSError objects
CppClangTidyObjcAvoidSpinlock	2	ClangTidy	Finds usages of OSSpinlock, which is deprecated due to potential livelock problems
CppClangTidyObjcForbiddenSubclassing	2	ClangTidy	Finds Objective-C classes which are subclasses of classes which are not designed to be subclassed
CppClangTidyObjcPropertyDeclaration	2	ClangTidy	Finds property declarations in Objective-C files that do not follow the pattern of property names in Apple's programming guide
CppClangTidyPerformanceFasterStringFind	3	ClangTidy	Optimize calls to std::string::find() and friends when the needle passed is a single character string literal
CppClangTidyPerformanceForRangeCopy	3	ClangTidy	Finds C++11 for ranges where the loop variable is copied in each iteration but it would suffice to obtain it by const reference
CppClangTidyPerformanceImplicitConversionInLoop	3	ClangTidy	This warning appears in a range-based loop with a loop variable of const ref type where the type of the variable does not match the one returned by the iterator
CppClangTidyPerformanceInefficientAlgorithm	3	ClangTidy	Warns on inefficient use of STL algorithms on associative containers
CppClangTidyPerformanceInefficientStringConcatenation	3	ClangTidy	This check warns about the performance overhead arising from concatenating strings using the operator+
CppClangTidyPerformanceInefficientVectorOperation	3	ClangTidy	Finds possible inefficient std::vector operations
CppClangTidyPerformanceMoveConstArg	2	ClangTidy	The check warnsif std::move() is called with a constant argument,if std::move() is called with an argument of a trivially-copyable type,if the result of std::move() is passed as a const reference argument
CppClangTidyPerformanceMoveConstructorInit	2	ClangTidy	"ert-oop11-cpp� redirects here as an alias for this check
CppClangTidyPerformanceTypePromotionInMathFn	3	ClangTidy	Finds calls to C math library functions (from math
CppClangTidyPerformanceUnnecessaryCopyInitialization	3	ClangTidy	Finds local variable declarations that are initialized using the copy constructor of a non-trivially-copyable type but it would suffice to obtain a const reference
CppClangTidyPerformanceUnnecessaryValueParam	3	ClangTidy	Flags value parameter declarations of expensive to copy types that are copied for each invocation but it would suffice to pass them by const reference
CppClangTidyReadabilityContainerSizeEmpty	3	ClangTidy	Checks whether a call to the size() method can be replaced with a call to empty()
CppClangTidyReadabilityDeleteNullPointer	3	ClangTidy	Checks the if statements where a pointer's existence is checked and then deletes the pointer
CppClangTidyReadabilityDeletedDefault	2	ClangTidy	Checks that constructors and assignment operators marked as = default are not actually deleted by the compiler
CppClangTidyReadabilityInconsistentDeclarationParameterName	3	ClangTidy	Find function declarations which differ in parameter names
CppClangTidyReadabilityMisleadingIndentation	3	ClangTidy	Correct indentation helps to understand code
CppClangTidyReadabilityMisplacedArrayIndex	3	ClangTidy	This check warns for unusual array index syntax
CppClangTidyReadabilityNonConstParameter	3	ClangTidy	The check finds function parameters of a pointer type that could be changed to point to a constant type instead
CppClangTidyReadabilityRedundantDeclaration	3	ClangTidy	Finds redundant variable and function declarations
CppClangTidyReadabilityRedundantFunctionPtrDereference	3	ClangTidy	Finds redundant dereferences of a function pointer
CppClangTidyReadabilityRedundantMemberInit	3	ClangTidy	Finds member initializations that are unnecessary because the same default constructor would be called if they were not present
CppClangTidyReadabilityRedundantSmartptrGet	3	ClangTidy	Find and remove redundant calls to smart pointer's
CppClangTidyReadabilityRedundantStringCstr	3	ClangTidy	Finds unnecessary calls to std::string::c_str() and std::string::data()
CppClangTidyReadabilityRedundantStringInit	3	ClangTidy	Finds unnecessary string initializations
CppClangTidyReadabilitySimplifyBooleanExpr	3	ClangTidy	Looks for boolean expressions involving boolean constants and simplifies them to use the appropriate boolean expression directly
CppClangTidyReadabilityStaticAccessedThroughInstance	3	ClangTidy	Checks for member expressions that access static members through instances, and replaces them with uses of the appropriate qualified-id
CppClangTidyReadabilityUniqueptrDeleteRelease	3	ClangTidy	Replace delete <unique_ptr>
CppClassDisallowLazyMerging	2	CodeRedundancy	CppClassDisallowLazyMerging
CppClassIsIncomplete	2	CompilerWarnings	Use of an incomplete type inside a template
CppClassNeedsConstructorBecauseOfUninitializedMember	2	CodeSmell	Class needs a user-defined constructor because of an uninitialized data member
CppClassNeverUsed	2	CodeSmell	Class is never used
CppCompileTimeConstantCanBeReplacedWithBooleanConstant	3	BestPractice	Compile-time constant expression can be replaced with either 'true' or 'false'
CppConstParameterInDeclaration	3	CodeRedundancy	Const-qualified parameter in a function declaration
CppConstValueFunctionReturnType	3	BestPractice	Function returns by const value
CppDeclarationHidesLocal	2	CodeSmell	Hiding local declaration
CppDeclarationSpecifierWithoutDeclarators	2	CodeSmell	Declaration specifier with no declarators
CppDeclaratorDisambiguatedAsFunction	2	CodeSmell	Declarator disambiguated as a function declaration
CppDeclaratorNeverUsed	2	CodeSmell	Declarator is never used
CppDeclaratorUsedBeforeInitialization	1	CodeSmell	Local variable used without being initialized
CppDefaultCaseNotHandledInSwitchStatement	2	CodeSmell	Default case is not handled in a switch statement
CppDefaultInitializationWithNoUserConstructor	2	CompilerWarnings	Default initialization of a const-qualified object of a type without a user-provided default constructor
CppDefaultIsUsedAsIdentifier	2	CodeSmell	Keyword 'default' is used as identifier
CppDeletingVoidPointer	2	CodeSmell	Deleting a void pointer
CppDependentTemplateWithoutTemplateKeyword	2	CodeSmell	Dependent template without 'template' keyword
CppDependentTypeWithoutTypenameKeyword	2	CodeSmell	Dependent type without 'typename' keyword
CppDeprecatedEntity	2	CodeSmell	Entity is deprecated
CppDeprecatedRegisterStorageClassSpecifier	2	CodeSmell	Deprecated register storage class specifier
CppDereferenceOperatorLimitExceeded	2	CodeSmell	Dereference operator limit is exceeded
CppDiscardedPostfixOperatorResult	3	BestPractice	Result of a postfix operator is discarded
CppDoxygenSyntaxError	2	CodeSmell	Syntax error in doxygen comment
CppDoxygenUndocumentedParameter	3	CodeSmell	Missing function parameter description in a documentation comment
CppDoxygenUnresolvedReference	2	CodeSmell	Unresolved reference in doxygen comment
CppEmptyDeclaration	2	CodeSmell	Declaration does not declare anything
CppEntityAssignedButNoRead	2	CodeSmell	Declarator is only assigned but never accessed
CppEntityUsedOnlyInUnevaluatedContext	2	CodeSmell	Declarator is used only in unevaluated context
CppEnumeratorNeverUsed	2	CodeSmell	Enumerator is never used
CppEqualOperandsInBinaryExpression	2	CodeSmell	Binary operator acts on equal operands
CppExplicitSpecializationInNonNamespaceScope	2	CompilerWarnings	Explicit specialization in non-namespace scope
CppExpressionWithoutSideEffects	2	CodeSmell	Possibly erroneous expression without side-effects
CppFunctionDoesntReturnValue	2	CodeSmell	No return statement in a function or a lambda returning non-void
CppFunctionIsNotImplemented	2	CodeSmell	Function is not implemented
CppHeaderHasBeenAlreadyIncluded	4	CodeRedundancy	Guarded header has already been included
CppHiddenFunction	2	CodeSmell	Non-virtual class member function hidden in a derived class
CppHidingFunction	2	CodeSmell	Class member function hiding a non-virtual function from a base class
CppIdenticalOperandsInBinaryExpression	2	CodeSmell	Binary operator acts on identical operands
CppIfCanBeReplacedByConstexprIf	3	BestPractice	If statement with constant condition can be replaced by 'if constexpr'
CppImplicitDefaultConstructorNotAvailable	2	CodeSmell	Implicit default constructor is not available
CppIncompatiblePointerConversion	2	CodeSmell	Implicit conversion to incompatible pointer type
CppIncompleteSwitchStatement	2	CodeSmell	Possibly erroneous incomplete switch-statement
CppInconsistentNaming	4	ConstraintViolation	Inconsistent Naming
CppInitializedValueIsAlwaysRewritten	2	CodeSmell	Declarator is reassigned in all paths before being read
CppIntegralToPointerConversion	2	CodeSmell	Implicit integer to pointer conversion
CppInvalidLineContinuation	2	CodeSmell	Backslash and newline separated by space
CppJoinDeclarationAndAssignment	3	CodeRedundancy	Declaration and assignment can be joined
CppLocalVariableMayBeConst	3	BestPractice	Local variable may be 'const'
CppLocalVariableMightNotBeInitialized	2	CodeSmell	Local variable might not be initialized
CppMemberFunctionMayBeConst	3	BestPractice	Member function may be 'const'
CppMemberFunctionMayBeStatic	3	BestPractice	Member function may be 'static'
CppMemberInitializersOrder	3	BestPractice	Order of member initializers does not match the initialization order
CppMismatchedClassTags	2	CodeSmell	Mismatched class tags
CppMissingIncludeGuard	2	CodeSmell	Missing include guard
CppMoveOperationWithoutNoexceptSpecification	2	CodeRedundancy	Move operation without noexcept specification
CppMsExtAddressOfClassRValue	2	CodeSmell	Taking an address of class r-value is non-standard Microsoft C++ extension
CppMsExtBindingRValueToLvalueReference	2	CodeSmell	Binding r-value to l-value reference is non-standard Microsoft C++ extension
CppMsExtDoubleUserConversionInCopyInit	2	CodeSmell	More than one implicit conversion applied during copy-initialization. This is non-standard Microsoft C++ extension
CppMsExtNotInitializedStaticConstLocalVar	2	CodeSmell	Not initialized static const local variable of scalar type. This is non-standard Microsoft C++ extension.
CppMsExtReinterpretCastFromNullptr	2	CodeSmell	Casting from nullptr to pointer type with reinterpret_cast is non-standard Microsoft C++ extension
CppMutableSpecifierOnReferenceMember	2	CompilerWarnings	Reference class member with 'mutable' specifier
CppNoDiscardExpression	2	CodeSmell	Unused result of a nodiscard function
CppNonConsistentAcquisitionReclaimPair	2	CodeSmell	Non-consistent resource acquisition-reclaim pair
CppNonExceptionSafeResourceAcquisition	4	CodeSmell	Non-safe resource acquisition
CppNonExplicitConversionOperator	4	BestPractice	Non-explicit conversion operator
CppNonExplicitConvertingConstructor	4	BestPractice	Non-explicit converting constructor
CppNonInlineFunctionDefinitionInHeaderFile	2	CodeSmell	Non-inline function definition in a header file
CppNonInlineVariableDefinitionInHeaderFile	2	CodeSmell	Non-inline variable definition in a header file
CppNonReclaimedResourceAcquisition	4	CodeSmell	Non-reclaimed resource acquisition
CppNotAllPathsReturnValue	2	CodeSmell	Not all control paths return a value
CppObjectMemberMightNotBeInitialized	2	CodeSmell	Object member might not be initialized
CppOverridingFunctionWithoutOverrideSpecifier	3	BestPractice	Overriding function without 'override' specifier
CppParameterMayBeConst	4	BestPractice	Parameter may be 'const'
CppParameterNeverUsed	4	CodeSmell	Parameter is never used
CppParameterValueIsReassigned	2	CodeSmell	Parameter is always rewritten in function body before being read
CppPointerConversionDropsQualifiers	2	CodeSmell	Implicit conversion to less qualified pointer type
CppPointerToIntegralConversion	2	CodeSmell	Implicit pointer to integer conversion
CppPolymorphicClassWithNonVirtualPublicDestructor	2	CodeSmell	Polymorphic class with non-virtual public destructor
CppPossiblyErroneousEmptyStatements	2	CodeSmell	Possibly erroneous empty-statements
CppPossiblyUninitializedMember	2	CodeSmell	Possibly uninitialized class member
CppPossiblyUnintendedObjectSlicing	2	CodeSmell	Possibly unintended object slicing
CppPrecompiledHeaderIsNotIncluded	1	CompilerWarnings	Precompiled header is not included
CppPrecompiledHeaderNotFound	1	CompilerWarnings	Precompiled header is not found
CppPrintfBadFormat	2	CodeSmell	Invalid printf format specifier
CppPrintfExtraArg	2	CodeSmell	Too many arguments in a call to printf
CppPrintfMissedArg	1	CodeSmell	Not enough arguments in a call to printf
CppPrintfRiskyFormat	2	CodeSmell	Probably invalid printf format specifier
CppPrivateSpecialMemberFunctionIsNotImplemented	2	CodeSmell	Private special member function is not implemented
CppRangeBasedForIncompatibleReference	2	CodeSmell	Probably unintended incompatible reference type in range declaration
CppRedefinitionOfDefaultArgumentInOverrideFunction	2	CodeSmell	Override function redefines a default parameter argument
CppRedundantAccessSpecifier	4	CodeRedundancy	Access specifier does not change accessibility level
CppRedundantBaseClassAccessSpecifier	4	CodeRedundancy	Redundant base class access specifier
CppRedundantBooleanExpressionArgument	2	CodeRedundancy	Redundant argument in conditional expression
CppRedundantControlFlowJump	4	CodeRedundancy	Redundant control flow jump statement
CppRedundantElseKeyword	4	CodeRedundancy	Redundant 'else' keyword
CppRedundantElseKeywordInsideCompoundStatement	4	CodeRedundancy	Redundant 'else' keyword inside compound statement
CppRedundantEmptyDeclaration	4	CodeRedundancy	Redundant empty declaration
CppRedundantEmptyStatement	4	CodeRedundancy	Redundant empty statement
CppRedundantInlineSpecifier	4	CodeRedundancy	Redundant 'inline' specifier
CppRedundantMemberInitializer	3	CodeRedundancy	Redundant member initializer in constructor initialization list
CppRedundantParentheses	4	CodeRedundancy	Redundant parentheses
CppRedundantQualifier	4	CodeRedundancy	Qualifier is redundant
CppRedundantStaticSpecifierOnMemberAllocationFunction	4	CodeRedundancy	Redundant 'static' specifier on a member allocation/deallocation function
CppRedundantTemplateKeyword	2	CodeRedundancy	Redundant 'template' keyword
CppRedundantTypenameKeyword	2	CodeRedundancy	Redundant 'typename' keyword
CppRedundantVirtualSpecifierOnOverrideFunction	4	CodeRedundancy	Redundant 'virtual' specifier on an override function
CppRedundantVoidArgumentList	3	CodeRedundancy	Redundant void argument list
CppSmartPointerVsMakeFunction	3	BestPractice	Constructor of smart pointer used instead of its make function
CppSomeObjectMembersMightNotBeInitialized	2	CodeSmell	Some object members might not be initialized
CppStaticAssertFailure	1	CompilerWarnings	Static assertion failure
CppStaticDataMemberInUnnamedStruct	2	CodeSmell	Static data member in an anonymous class is not allowed by the C++ standard
CppStaticSpecifierOnAnonymousNamespaceMember	3	CodeRedundancy	Redundant 'static' specifier on an anonymous namespace member
CppSyntaxWarning	2	CompilerWarnings	Unexpected syntax element
CppTemplateParameterShadowing	2	CompilerWarnings	Redeclaration of a template parameter from an outer scope
CppThrowExpressionCanBeReplacedWithRethrow	2	BestPractice	Throw expression can be replaced with a rethrow expression
CppUninitializedDependentBaseClass	2	CompilerWarnings	Uninitialized dependent base class
CppUninitializedNonStaticDataMember	2	CodeSmell	Non-static data member is unitialized
CppUnionMemberOfReferenceType	2	CompilerWarnings	Union member of reference type
CppUnreachableCode	2	CodeRedundancy	Unreachable code
CppUnusedIncludeDirective	2	CodeSmell	Possibly unused #include directive
CppUseAuto	4	CodeRedundancy	Use 'auto'
CppUserDefinedLiteralSuffixDoesNotStartWithUnderscore	2	CompilerWarnings	User-defined literal suffixes must start with an underscore
CppUsingResultOfAssignmentAsCondition	2	CodeSmell	Using the result of an assignment as a condition
CppVirtualFunctionCallInsideCtor	2	CodeSmell	Call to a virtual function inside a constructor/destructor will be statically resolved
CppVirtualFunctionInFinalClass	2	CodeSmell	Declaration of a non-overriding virtual function in a final or sealed class
CppVolatileParameterInDeclaration	3	CodeRedundancy	Volatile-qualified parameter in a function declaration
CppWrongSlashesInIncludeDirective	4	CodeSmell	Slash symbol used in #include directive doesn't match code style settings
CppZeroConstantCanBeReplacedWithNullptr	3	BestPractice	Zero constant can be replaced with nullptr
CppZeroValuedExpressionUsedAsNullPointer	2	CodeSmell	Expression which evaluates to zero is used as a null pointer constant