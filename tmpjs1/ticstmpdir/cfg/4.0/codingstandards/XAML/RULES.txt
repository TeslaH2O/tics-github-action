MIS$001	1	Miscellaneous Best Practices	Do be aware that windows, dialogs, message boxes, and popups are the root of their own visual tree
NAM$001	1	Naming Conventions	Do use US English
NAM$002	1	Naming Conventions	Consider giving each logical XAML element a unique name
NAM$003	1	Naming Conventions	Do use x:Name instead of Name to give XAML elements a unique name
NAM$004	1	Naming Conventions	Do use x:Key to give resources a unique name
NAM$005	1	Naming Conventions	Avoid giving a XAML element both an x:Key and an x:Name
NAM$006	1	Naming Conventions	Do use camel casing for the x:Name
NAM$007	1	Naming Conventions	Do use Pascal casing for the x:Key
NAM$008	1	Naming Conventions	Do postfix the x:Name with the type of the XAML element
NAM$009	1	Naming Conventions	Do postfix the x:Key with the type of the XAML element
NAM$011	1	Naming Conventions	Do prefix the x:Name of template parts with PART_
NAM$012	1	Naming Conventions	Consider using brief or abbreviated namespace aliases
NAM$014	1	Naming Conventions	Do use lowercase letters for namespace aliases
NAM$015	1	Naming Conventions	Consider using the same namespace aliases throughout your project
ORG$001	1	Organization and Layout	Do make the x:Name directive the first property after a XAML type instance
ORG$002	1	Organization and Layout	Consider putting the XAML element type and the x:Name together on the first line
ORG$003	1	Organization and Layout	Consider putting the Style property on the second line
ORG$004	1	Organization and Layout	Consider putting related properties on the same line
ORG$005	1	Organization and Layout	Organize properties in the right order
ORG$006	1	Organization and Layout	Avoid giving properties a default value
ORG$007	1	Organization and Layout	Consider using the concise format for attribute value assignment
ORG$008	1	Organization and Layout	Consider using the concise format for assigning the path of a binding expression
ORG$009	1	Organization and Layout	Do use spaces instead of tabs in your XAML files
ORG$010	1	Organization and Layout	Do use an indentation of four spaces in your XAML files
RES$001	1	Resources	Do use StaticResource if you can, DynamicResource if you must
RES$002	1	Resources	Do use StaticResource to define the based-on type for implicit styles
RES$003	1	Resources	Consider freezing objects that are freezable
STY$001	1	Styles	Do specify the target type of your style using the TargetType="{x:Type TypeName}" syntax
STY$002	1	Styles	Consider introducing implicit styles to avoid duplication of XAML code
VAL$001	1	Value Converters	Do let custom value converters return DependencyProperty.UnsetValue instead of null
VAL$002	1	Value Converters	Consider enhancing your custom value converters with markup extensions
