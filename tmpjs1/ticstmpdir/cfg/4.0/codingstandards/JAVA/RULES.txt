Basic2	2	Basic	Avoid empty 'if' statements.
Basic3	2	Basic	Avoid empty 'while' statements.
Basic4	1	Basic	Avoid empty try blocks.
Basic5	5	Basic	Avoid empty finally blocks.
Basic6	1	Basic	Avoid empty switch statements.
Basic7	1	Basic	Avoid modifying an outer loop incrementer in an inner loop for update expression.
Basic8	4	Basic	This for loop could be simplified to a while loop.
Basic9	3	Basic	Avoid unnecessary temporaries when converting primitives to Strings.
Basic10	2	Basic	Ensure you override both equals() and hashCode().
Basic11	1	Basic	Double checked locking is not thread safe in Java.
Basic12	1	Basic	Avoid returning from a finally block.
Basic13	4	Basic	Avoid empty synchronized blocks.
Basic14	3	Basic	Avoid unnecessary return statements.
Basic15	3	Basic	Empty static initializer was found.
Basic16	3	Basic	Do not use 'if' statements that are always true or always false.
Basic17	3	Basic	An empty statement (semicolon) not part of a loop.
Basic18	2	Basic	Avoid instantiating Boolean objects; reference Boolean.TRUE or Boolean.FALSE.
Basic19	5	Basic	Unnecessary modifier used.
Basic21	2	Basic	Overriding method merely calls super.
Basic22	1	Basic	This usage of the Collection.toArray() method will throw a ClassCastException.
Basic23	1	Basic	Avoid creating BigDecimal with a decimal (float/double) literal. Use a String literal.
Basic24	1	Basic	An operation on an Immutable object (BigDecimal or BigInteger) won't change the object itself.
Basic25	1	Basic	The null check here is misplaced; if the variable is null there'll be a NullPointerException.
Basic28	1	Basic	Method call on object which may be null.
Basic29	5	Basic	Don't create instances of already existing BigInteger and BigDecimal (ZERO, ONE, TEN).
Basic30	2	Basic	Do not start a literal by 0 unless it's an octal value.
Basic31	5	Basic	Replace for loop by for each loop.
Basic32	3	Basic	Use @Override annotation if applicable.
Basic33	3	Basic	Merge identical catch branches.
Basic34	7	Basic	Don't use unclear do/while loops.
Basic100	3	Basic	Each variable should have an initializer.
Basic101	4	Basic	Use standard brace style.
Basic102	3	Basic	Avoid implicit creation of new objects.
Basic103	2	Basic	Don't modify control variables within a for block.
CloneImplementation4	5	CloneImplementation	Clone method should be public.
CloneImplementation5	4	CloneImplementation	Clone method return type should match class name.
CodeSize1	2	CodeSize	Avoid complex methods.
CodeSize2	2	CodeSize	Avoid really long methods.
CodeSize3	2	CodeSize	Avoid really long parameter lists.
CodeSize4	2	CodeSize	Avoid really long classes.
CodeSize5	2	CodeSize	Avoid complex code.
CodeSize6	2	CodeSize	This class has too many public methods and attributes.
CodeSize7	3	CodeSize	Too many fields.
CodeSize100	4	CodeSize	Avoid long files.
Comments100	7	Comments	Every file should have a copyright statement at the top.
Comments101	5	Comments	Use standard Java annotations.
Comments102	8	Comments	One annotation per line.
Comments103	7	Comments	Use TODO comments.
Comments104	6	Comments	Each class should be preceded by JavaDoc comments.
Controversial5	4	Controversial	Avoid assignments in operands.
Controversial7	1	Controversial	Avoid importing anything from the 'sun.*' packages.
Controversial8	1	Controversial	Suspicious decimal characters following octal escape in string literal.
Controversial10	6	Controversial	This statement may have some unnecessary parentheses.
Coupling1	4	Coupling	High amount of different objects as members denotes a high coupling.
Coupling2	3	Coupling	A high number of imports can indicate a high degree of coupling within an object.
Design1	3	Design	Classes with only static methods should have a private constructor.
Design2	4	Design	Avoid unnecessary if..then..else statements when returning a boolean.
Design3	4	Design	Avoid unnecessary comparisons in boolean expressions.
Design5	2	Design	Deeply nested if..then statements are hard to read.
Design6	2	Design	Avoid reassigning parameters.
Design7	3	Design	A high ratio of statements to labels in a switch statement.  Consider refactoring.
Design8	1	Design	Don't call overridable methods during object construction.
Design9	3	Design	Avoid instantiation through private constructors from outside of the constructor's class.
Design10	4	Design	This final field could be made static.
Design11	1	Design	Ensure that resources are closed after use.
Design12	2	Design	Non-static initializers are confusing.
Design13	3	Design	The default label should be the last label in a switch statement.
Design14	2	Design	A non-case label was present in a switch statement.
Design15	5	Design	This call to Collection.toArray() may be optimizable.
Design16	1	Design	Avoid equality comparisons with Double.NaN.
Design17	1	Design	Avoid using equals() to compare against null.
Design18	4	Design	Avoid if (x != y) ..; else ..;.
Design19	4	Design	Avoid instantiating an object just to call getClass() on it; use the .class public member instead.
Design20	2	Design	Avoid idempotent operations (like assigning a variable to itself).
Design21	2	Design	When instantiating a SimpleDateFormat object, specify a Locale.
Design22	3	Design	Declare private fields final, if possible.
Design23	4	Design	When doing a String.toLowerCase()/toUpperCase() call, use a Locale.
Design24	2	Design	Avoid protected fields in a final class.  Change to private or package access.
Design25	1	Design	Possible unsafe assignment to a non-final static field in a constructor.
Design26	1	Design	Class cannot be instantiated and does not provide any static methods or fields.
Design27	3	Design	Use block level rather than method level synchronization.
Design28	1	Design	A switch statement does not contain a break.
Design29	1	Design	Call Thread.notifyAll() rather than Thread.notify().
Design30	3	Design	An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type.
Design32	4	Design	No need to check for null before an instanceof.
Design35	3	Design	Consider simply returning values instead of storing it in a local variable.
Design36	1	Design	Singleton is not thread safe.
Design39	3	Design	An Interface should be used only to model a behaviour; consider converting this to a class.
Design40	2	Design	Static java.text.Format objects should be accessed in a synchronized manner.
Design41	2	Design	Caught exception is rethrown, original stack trace may be lost.
Design42	4	Design	Substitute calls to size() == 0 (or size() != 0) with calls to isEmpty().
Design43	3	Design	Members should be declared privately.
Design44	1	Design	Never initialize a final field to null.
Design45	3	Design	Avoid overloading the getInstance method.
Design100	6	Design	The scope of local variables should be kept to a minimum.
Design101	3	Design	Classes with only private constructors should be declared as final.
Finalizer1	3	Finalizer	Avoid empty finalize methods.
Finalizer2	3	Finalizer	Finalize should do something besides just calling super.finalize().
Finalizer3	1	Finalizer	Finalize methods should not be overloaded.
Finalizer4	1	Finalizer	Last statement in finalize method should be a call to super.finalize().
Finalizer5	2	Finalizer	If you override finalize(), make it protected.
Finalizer6	2	Finalizer	Avoid calling finalize() explicitly.
Finalizer100	5	Finalizer	Don't use finalizers.
ImportStatement1	3	ImportStatement	Avoid duplicate imports.
ImportStatement2	4	ImportStatement	Avoid importing anything from the package 'java.lang'.
ImportStatement3	4	ImportStatement	Avoid unused imports.
ImportStatement4	3	ImportStatement	No need to import a type that lives in the same package.
ImportStatement100	5	ImportStatement	Fully qualify imports.
JavaLogging1	2	JavaLogging	Class contains more than one logger.
JavaLogging2	4	JavaLogging	The Logger variable declaration does not contain the static and final modifiers.
JavaLogging3	4	JavaLogging	System.out.print is used.
JavaLogging4	2	JavaLogging	Avoid printStackTrace(); use a logger call instead.
Multithreading1	3	Multithreading	Avoid storing MessageDigest in a field that can be accessed by multiple threads.
Naming2	6	Naming	Avoid excessively long variable names.
Naming3	6	Naming	Avoid using short method names.
Naming8	4	Naming	Avoid using dollar signs in variable/method/class/interface names.
Naming10	3	Naming	The method name and return type are suspiciously close to hashCode().
Naming12	2	Naming	The method name and parameter number are suspiciously close to equals(Object).
Naming13	5	Naming	It is somewhat confusing to have a field name matching the declaring class name.
Naming14	4	Naming	It is somewhat confusing to have a field name with the same name as a method.
Naming15	3	Naming	Don't define methods with the same name as the class name.
Naming16	3	Naming	All classes and interfaces must belong to a named package.
Naming18	7	Naming	Avoid naming non-fields with a member-like prefix.
Naming101	7	Naming	Treat Acronyms as Words
Optimization1	4	Optimization	Local variables assigned only once can be declared final.
Optimization7	3	Optimization	Use asList instead of tight loops.
Optimization8	3	Optimization	System.arrayCopy is more efficient.
Optimization9	4	Optimization	Unnecessary wrapper object creation.
Optimization10	5	Optimization	Avoid using FileStream.
Optimization11	5	Optimization	Avoid double brace initialization.
Optimization12	6	Optimization	Avoid creating Calendar objects.
Optimization100	3	Optimization	Declare variables of type JAXBcontext static
Security1	3	Security	Do not use hard coded values for cryptographic operations.
Security2	3	Security	Do not use hard coded initialization vector in cryptographic operations.
StrictException1	1	StrictException	A catch statement should never catch throwable since it includes errors.
StrictException2	3	StrictException	A method/constructor shouldn't explicitly throw java.lang.Exception.
StrictException3	2	StrictException	Avoid using exceptions as flow control.
StrictException4	1	StrictException	Avoid catching NullPointerException; consider removing the cause of the NPE.
StrictException5	3	StrictException	Avoid throwing raw exception types.
StrictException6	2	StrictException	Avoid throwing null pointer exceptions.
StrictException7	3	StrictException	A catch statement that catches an exception only to rethrow it should be avoided.
StrictException100	1	StrictException	Don't ignore exceptions.
StrictException101	2	StrictException	Don't catch generic exceptions.
StrictException102	3	StrictException	Exception classes should only contain final fields.
StringandStringBuffer1	3	StringandStringBuffer	Don't use duplicate String literals; use constants instead.
StringandStringBuffer2	2	StringandStringBuffer	Avoid instantiating String objects; this is usually unnecessary.
StringandStringBuffer3	3	StringandStringBuffer	Avoid calling toString() on String objects; this is unnecessary.
StringandStringBuffer4	3	StringandStringBuffer	Avoid concatenating nonliterals in a StringBuffer constructor or append().
StringandStringBuffer5	4	StringandStringBuffer	Using equalsIgnoreCase() is cleaner than using toUpperCase/toLowerCase().equals().
StringandStringBuffer6	6	StringandStringBuffer	This is an inefficient use of StringBuffer.toString; call StringBuffer.length instead.
StringandStringBuffer7	5	StringandStringBuffer	Avoid appending characters as strings in StringBuffer.append.
StringandStringBuffer8	4	StringandStringBuffer	Combine StringBuffer.append calls, if possible.
StringandStringBuffer9	4	StringandStringBuffer	String.indexOf(char) is faster than String.indexOf(String).
StringandStringBuffer10	4	StringandStringBuffer	String.trim().length()==0 is an inefficient way to validate an empty String.
StringandStringBuffer11	8	StringandStringBuffer	Initialize objects of StringBuffer with a proper size.
StringandStringBuffer12	3	StringandStringBuffer	No need to call String.valueOf to append to a string.
StringandStringBuffer13	2	StringandStringBuffer	Do not instantiate a StringBuffer with a char.
StringandStringBuffer14	1	StringandStringBuffer	Use equals() to compare String objects.
Style100	7	Style	Don't use tabs.
TypeResolution1	3	TypeResolution	Avoid using implementation types; use the interface instead.
TypeResolution3	6	TypeResolution	Use the diamond operator to let the type be inferred automatically.
UnusedCode1	4	UnusedCode	Avoid unused private fields.
UnusedCode2	4	UnusedCode	Avoid unused local variables.
UnusedCode3	3	UnusedCode	Avoid unused private methods.
UnusedCode5	5	UnusedCode	Avoid unused assignments.
UnusedCode100	3	UnusedCode	Empty statements (standalone ';' semicolons) are not allowed
