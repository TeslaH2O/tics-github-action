always_declare_return_types	3	style	Do declare method return types.
always_put_control_body_on_new_line	3	style	Do separate the control structure expression from its statement.
always_put_required_named_parameters_first	3	style	Do specify `@required` on named parameter before other named parameters.
always_require_non_null_named_parameters	3	style	Do specify `@required` on named parameter without default value on which an assert(param != null) is done.
always_specify_types	3	style	Do specify type annotations.
annotate_overrides	3	style	Do annotate overridden methods and fields.
avoid_annotating_with_dynamic	3	style	Avoid annotating with dynamic when not required.
avoid_as	3	style	Avoid using `as`.
avoid_bool_literals_in_conditional_expressions	3	style	Avoid bool literals in conditional expressions.
avoid_catches_without_on_clauses	3	style	Avoid catches without on clauses.
avoid_catching_errors	3	style	Don't explicitly catch Error or types that implement it.
avoid_classes_with_only_static_members	3	style	Avoid defining a class that contains only static members.
avoid_double_and_int_checks	3	style	Avoid to check if type is double or int.
avoid_empty_else	3	errors	Avoid empty else statements.
avoid_field_initializers_in_const_classes	3	style	Avoid field initializers in const classes.
avoid_function_literals_in_foreach_calls	3	style	Avoid using `forEach` with a function literal.
avoid_implementing_value_types	3	style	Don't implement classes that override `==`.
avoid_init_to_null	3	style	Don't explicitly initialize variables to null.
avoid_js_rounded_ints	3	style	Avoid integer literals that cannot be represented exactly when compiled to JavaScript.
avoid_null_checks_in_equality_operators	3	style	Don't check for null in custom == operators.
avoid_positional_boolean_parameters	3	style	Avoid positional boolean parameters.
avoid_private_typedef_functions	3	style	Avoid private typedef functions used only once. Prefer inline function syntax.
avoid_relative_lib_imports	3	errors	Do avoid relative imports for files in `lib/`.
avoid_renaming_method_parameters	3	style	Don't rename parameters of overridden methods.
avoid_returning_null_for_future	3	errors	Avoid returning null for Future.
avoid_returning_null_for_void	3	style	Avoid returning null for void.
avoid_returning_null	3	style	Avoid returning null from members whose return type is bool, double, int, or num.
avoid_returning_this	3	style	Avoid returning this from methods just to enable a fluent interface.
avoid_return_types_on_setters	3	style	Avoid return types on setters.
avoid_setters_without_getters	3	style	Don't define a setter without a corresponding getter.
avoid_shadowing_type_parameters	3	style	Avoid shadowing type parameters.
avoid_single_cascade_in_expression_statements	3	style	Avoid single cascade in expression statements.
avoid_slow_async_io	3	errors	Avoid using the following asynchronous file I/O methods because they are much slower than their synchronous counterparts.
avoid_types_as_parameter_names	3	errors	Avoid using a parameter name that is the same as an existing type.
avoid_types_on_closure_parameters	3	style	Avoid annotating types for function expression paremeters.
avoid_unused_constructor_parameters	3	style	Avoid defining unused parameters in constructors.
avoid_void_async	3	style	Do mark async functions to return Future<void>.
await_only_futures	3	style	Avoid using await on anything other than a future.
camel_case_types	3	style	Do name types using UpperCamelCase.
cancel_subscriptions	3	errors	Do invoke `cancel` on instances of `dart.async.StreamSubscription`.
cascade_invocations	3	style	Do use the cascading style when succesively invoking methods on the same reference.
close_sinks	3	errors	Do invoke `close` on instances of `dart.core.Sink`.
comment_references	3	errors	Do reference only in scope identifiers in doc comments.
constant_identifier_names	3	style	Prefer using lowerCamelCase for constant names.
control_flow_in_finally	3	errors	Avoid control flow leaving finally blocks.
curly_braces_in_flow_control_structures	3	style	Do use curly braces for all flow control structures.
diagnostic_describe_all_properties	3	errors	Do reference all public properties in `debug` method implementations.
directives_ordering	3	style	Do follow the conventions in the Effective Dart Guide
empty_catches	3	style	Avoid empty catch blocks.
empty_constructor_bodies	3	style	Do use `;` instead of `{}` for empty constructor bodies.
empty_statements	3	errors	Avoid empty statments.
file_names	3	style	Do name source files using `lowercase_with_underscores`.
flutter_style_todos	3	style	Do use Flutter TODO format.
hash_and_equals	3	errors	Do override `hashCode` if overriding `==` and prefer overriding `==` if overriding `hashCode`.
implementation_imports	3	style	Don't import implementation files from another package.
invariant_booleans	3	errors	Don't test for conditions that can be inferred at compile time or test the same condition twice.
iterable_contains_unrelated_type	3	errors	Don't invoke `contains` on `Iterable` with an instance of different type than the parameter type.
join_return_with_assignment	3	style	Do join return statement with assignment when possible.
library_names	3	style	Do name libraries using `lowercase_with_underscores`.
library_prefixes	3	style	Do use `lowercase_with_underscores` when specifying a library prefix.
lines_longer_than_80_chars	3	style	Avoid lines longer than 80 characters
list_remove_unrelated_type	3	errors	Don't invoke `remove` on `List` with an instance of different type than the parameter type.
literal_only_boolean_expressions	3	errors	Don't test for conditions composed only by literals, since the value can be inferred at compile time.
no_adjacent_strings_in_list	3	errors	Don't use adjacent strings in list.
no_duplicate_case_values	3	errors	Don't use more than one case with same value.
non_constant_identifier_names	3	style	Do name non-constant identifiers using lowerCamelCase.
null_closures	3	style	Do not pass null as an argument where a closure is expected.
omit_local_variable_types	3	style	Consider omitting type annotations for local variables.
one_member_abstracts	3	style	Avoid defining a one-member abstract class when a simple function will do.
only_throw_errors	3	style	Do throw only instances of classes that extend `dart.core.Error` or `dart.core.Exception`.
overridden_fields	3	style	Don't override fields.
package_api_docs	3	style	Do provide doc comments for all public APIs.
package_names	3	pub	Do use `lowercase_with_underscores` for package names.
package_prefixed_library_names	3	style	Do prefix library names with the package name and a dot-separated path.
parameter_assignments	3	style	Don't assign new values to parameters of methods or functions.
prefer_adjacent_string_concatenation	3	style	Do use adjacent strings to concatenate string literals.
prefer_asserts_in_initializer_lists	3	style	Do put asserts in initializer list for constructors with only asserts in their body.
prefer_asserts_with_message	3	style	When assertions fail it's not always simple to understand why. Adding a message to the `assert` helps the developer to understand why the AssertionError occurs.
prefer_bool_in_asserts	3	style	Do use a boolean for assert conditions.
prefer_collection_literals	3	style	Do use collection literals when possible.
prefer_conditional_assignment	3	style	Prefer using `??=` over testing for null.
prefer_const_constructors_in_immutables	3	style	Prefer declaring const constructors on `@immutable` classes.
prefer_const_constructors	3	style	Prefer using `const` for instantiating constant constructors.
prefer_const_declarations	3	style	Prefer using `const` for const declarations.
prefer_const_literals_to_create_immutables	3	style	Prefer using `const` for instantiating list, map and set literals used as parameters in immutable class instantiations.
prefer_constructors_over_static_methods	3	style	Prefer defining constructors instead of static methods to create instances.
prefer_contains	3	style	Don't use `indexOf` to see if a collection contains an element.
prefer_double_quotes	3	style	Do use double quotes where they wouldn't require additional escapes.
prefer_equal_for_default_values	3	style	Do use `=` to separate a named parameter from its default value.
prefer_expression_function_bodies	3	style	Consider using => for short members whose body is a single return statement.
prefer_final_fields	3	style	Do prefer declaring private fields as final if they are not reassigned later in the class.
prefer_final_in_for_each	3	style	Do prefer declaring for-each loop variables as final if they are not reassigned later in the code.
prefer_final_locals	3	style	Do prefer declaring variables as final if they are not reassigned later in the code.
prefer_foreach	3	style	Do use `forEach` if you are only going to apply a function or a method to all the elements of an iterable.
prefer_for_elements_to_map_fromIterable	3	style	When building maps from iterables, it is preferable to use for elements.
prefer_function_declarations_over_variables	3	style	Do use a function declaration to bind a function to a name.
prefer_generic_function_type_aliases	3	style	Prefer generic function type aliases.
prefer_if_elements_to_conditional_expressions	3	style	When building collections, it is preferable to use `if` elements rather than conditionals.
prefer_if_null_operators	3	style	Prefer using if null operators instead of null checks in conditional expressions.
prefer_initializing_formals	3	style	Do use initializing formals when possible.
prefer_inlined_adds	3	style	Declare elements in list literals inline, rather than using `add` and  `addAll` methods where possible.
prefer_interpolation_to_compose_strings	3	style	Prefer using interpolation to compose strings and values.
prefer_int_literals	3	style	Do use int literals rather than the corresponding double literal.
prefer_is_empty	3	style	Don't use `length` to see if a collection is empty.
prefer_is_not_empty	3	style	Prefer `x.isNotEmpty` to `!x.isEmpty` for `Iterable` and `Map` instances.
prefer_iterable_whereType	3	style	Prefer `iterable.whereType<T>()` over `iterable.where((e) => e is T)`.
prefer_mixin	3	style	Avoid using a class in a `with` clause
prefer_null_aware_operators	3	style	Prefer using null aware operators instead of null checks in conditional expressions.
prefer_single_quotes	3	style	Do use single quotes where they wouldn't require additional escapes.
prefer_spread_collections	3	style	Use spread collections when possible.
prefer_typing_uninitialized_variables	3	style	Prefer specifying a type annotation for uninitialized variables and fields.
prefer_void_to_null	3	errors	Do not use the type Null where void would work.
provide_deprecation_message	3	style	Do specify a deprecation message (with migration instructions and/or a removal schedule) in the Deprecation constructor.
public_member_api_docs	3	style	Do document all public members.
recursive_getters	3	style	Don't create recursive getters.
slash_for_doc_comments	3	style	Prefer using `///` for doc comments.
sort_child_properties_last	3	style	Sort child properties last in widget instance creations.
sort_constructors_first	3	style	Do sort constructor declarations before other members.
sort_pub_dependencies	3	pub	Do sort pub dependencies in `pubspec.yaml`.
sort_unnamed_constructors_first	3	style	Do sort unnamed constructor declarations first, before named ones.
super_goes_last	3	style	Do place the `super` call last in a constructor initialization list.
test_types_in_equals	3	errors	Do test type arguments in operator ==(Object other).
throw_in_finally	3	errors	Avoid throwing exceptions in finally blocks.
type_annotate_public_apis	3	style	Prefer type annotating public APIs.
type_init_formals	3	style	Don't type annotate initializing formals.
unawaited_futures	3	style	Do await functions that return a `Future` inside of an async function body.
unnecessary_await_in_return	3	style	Avoid returning an awaited expression when the expression type is assignable to the function's return type.
unnecessary_brace_in_string_interps	3	style	Avoid using braces in interpolation when not needed.
unnecessary_const	3	style	Avoid repeating const keyword in a const context.
unnecessary_getters_setters	3	style	Avoid wrapping fields in getters and setters just to be "safe".
unnecessary_lambdas	3	style	Don't create a lambda when a tear-off will do.
unnecessary_new	3	style	Avoid new keyword to create instances.
unnecessary_null_aware_assignments	3	style	Avoid `null` in null-aware assignment.
unnecessary_null_in_if_null_operators	3	style	Avoid using `null` as an operand in `if null` operators.
unnecessary_overrides	3	style	Don't override a method to do a super method invocation with same parameters.
unnecessary_parenthesis	3	style	Avoid using parenthesis when not needed.
unnecessary_statements	3	errors	Avoid using unnecessary statements.
unnecessary_this	3	style	Don't use `this` when not needed to avoid shadowing.
unrelated_type_equality_checks	3	errors	Don't compare references of unrelated types for equality.
unsafe_html	3	errors	Avoid assigning directly to the src field of an EmbedElement, IFrameElement, ImageElement, or ScriptElement, or the href field of an AnchorElement.
use_full_hex_values_for_flutter_colors	3	style	Prefer an 8-digit hexadecimal integer(0xFFFFFFFF) to instantiate Color. Colors have four 8-bit channels, which adds up to 32 bits, so Colors are described using a 32 bit integer.
use_function_type_syntax_for_parameters	3	style	Use generic function type syntax for parameters.
use_rethrow_when_possible	3	style	Do use rethrow to rethrow a caught exception.
use_setters_to_change_properties	3	style	Do use a setter for operations that conceptually change a property.
use_string_buffers	3	style	Do use string buffer to compose strings.
use_to_and_as_if_applicable	3	style	Prefer naming a method to___() if it copies the object's state to a new object.
valid_regexps	3	errors	Do use valid regular expression syntax when creating regular expression instances.
void_checks	3	style	Do not assign to void.
