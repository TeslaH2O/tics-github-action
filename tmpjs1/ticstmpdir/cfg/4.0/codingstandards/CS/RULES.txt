3@109	8	Naming	Name namespaces according to a well-defined pattern
3@204	7	Naming	Do not use letters that can be mistaken for digits, and vice versa
3@504	7	Naming	Name the source file to the main class
4@101	2	Comments	Each file shall contain a header block
4@106	9	Comments	Use XML tags for documenting types and members
4@111	3	Comments	Don't comment out code
5@108	2	Object lifecycle	Do not re-declare a visible name in a nested scope
5@111	4	Object lifecycle	Avoid implementing a finalizer
5@113	2	Object lifecycle	Implement IDisposable if a class uses unmanaged resources, owns disposable objects or subscribes to other objects
5@114	2	Object lifecycle	Do not access any reference type members in the finalizer
5@119	5	Object lifecycle	Return interfaces to unchangeable collections
5@121	1	Object lifecycle	Don't use "using" variables outside the scope of the "using" statement
6@101	2	Control flow	Do not change a loop variable inside a for loop block
6@105	2	Control flow	Ensure switch statements are exhaustive
6@109	9	Control flow	Don't return a function at an unexpected location
6@112	9	Control flow	Do not make explicit comparisons to true or false
6@115	5	Control flow	Do not access a modified object more than once  in an expression
6@119	4	Control flow	Use a dedicated (private) lockable object as synchronization technique for parallel class instance (method) calls.
6@191	1	Control flow	Do not dereference null
6@201	4	Control flow	The cyclomatic complexity of a method should not exceed its configured maximum.
7@101	2	Object oriented	Declare all fields (data members) private
7@102	5	Object oriented	Prevent instantiation of a class if it contains only static members
7@105	3	Object oriented	Explicitly define a protected constructor on an abstract base class
7@106	4	Object oriented	Make all types internal by default
7@107	4	Object oriented	Limit the contents of a source code file to one type
7@303	6	Object oriented	If you must provide the ability to override a method, make only the most complete overload virtual and define the other operations in terms of it
7@404	4	Object oriented	Don't hide inherited members with the new keyword
7@501	6	Object oriented	Do not overload any 'modifying' operators on a class type
7@502	1	Object oriented	Do not modify the value of any of the operands in the implementation of an overloaded operator
7@520	1	Object oriented	Override the GetHashCode method whenever you override the Equals method.
7@521	1	Object oriented	Override the Equals method whenever you implement the == operator, and make them do the same thing
7@530	3	Object oriented	Implement operator overloading for the equality (==), not equal (!=), less than (<), and greater than (>) operators when you implement IComparable
7@531	2	Object oriented	Overload the equality operator (==), when you overload the addition (+) operator and/or subtraction (-) operator
7@532	2	Object oriented	Implement all relational operators (<, <=, >, >=) if you implement any
7@533	2	Object oriented	Do NOT use the Equals method to compare diffferent value types, but use the equality operators instead
7@603	9	Object oriented	Use a method rather than a property when this is more appropriate
7@608	5	Object oriented	Use pattern matching instead of the "as" keyword
7@609	7	Object oriented	Use the correct way of casting
7@611	5	Object oriented	Use generic constraints if applicable
8@102	1	Exceptions	Do not throw exceptions from unexpected locations
8@107	3	Exceptions	Use standard exceptions
8@110	1	Exceptions	Do not silently ignore exceptions
9@108	9	Delegates and events	Use delegate inference instead of explicit delegate instantiation when possible
9@110	2	Delegates and events	Each subscribe must have a corresponding unsubscribe
9@113	1	Delegates and events	Always check an event handler delegate for null
9@114	2	Delegates and events	Do not use return values of callbacks in events
10@301	7	Data types	Do not use 'magic numbers'
10@401	2	Data types	Floating point values shall not be compared using the == nor the != operators nor the Equals method.
10@406	1	Data types	When using composite formatting, do supply all objects referenced in the format string
10@407	4	Data types	When using composite formatting, do not supply any object unless it is referenced in the format string
11@407	10	Coding style	Write unary, increment, decrement, function call, subscript, and access operators together with their operands; insert spaces around all other operators
11@409	9	Coding style	Use spaces instead of tabs
20@478	2	Security	Secured types should not expose fields
20@479	1	Security	Types must be at least as critical as their base types and interfaces
20@480	2	Security	Seal methods that satisfy private interfaces