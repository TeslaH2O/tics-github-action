// Coverity 2022.03 and below
COV_OBJC_ALLOC_FREE_MISMATCH_OBJECTIVEC	3	API usage errors	Depending on the difference between the correct and incorrect allocator, there may be a resource leak or memory corruption.
COV_OBJC_BAD_COMPARE_OBJECTIVEC	2	API usage errors	The return value may be misinterpreted if the function returns an unexpected value.
COV_OBJC_CHAR_IO_OBJECTIVEC	2	API usage errors	It will not be possible to distinguish between EOF and a valid character.
COV_OBJC_CHROOT_OBJECTIVEC	2	API usage errors	If a call to chroot is not followed by a call to chdir("/") the chroot jail confinement can be violated.
COV_OBJC_COM.BSTR.BAD_COMPARE_OBJECTIVEC	2	API usage errors	A naive attempt to determine the lexical ordering of two BSTRs using <, <=, >, or >= will actually only compare two pointers, yielding a meaningless result.
COV_OBJC_COM.BSTR.NE_NON_BSTR_OBJECTIVEC	2	API usage errors	The special memory management used by BSTR makes it unlikely that a simple equality comparison with any other type will yield the desired result.
COV_OBJC_DC.INVALIDATE_ITERATOR_OBJECTIVEC	2	API usage errors	Undefined behavior may result; the program may crash or subtly misbehave.
COV_OBJC_INVALIDATE_ITERATOR_OBJECTIVEC	2	API usage errors	Undefined behavior may result; the program may crash or subtly misbehave.
COV_OBJC_LOCK_OBJECTIVEC	2	API usage errors	The program would halt at the lock assertion statement.
COV_OBJC_OPEN_ARGS_OBJECTIVEC	2	API usage errors	The permissions on the file created will be arbitrary and possibly insecure.
COV_OBJC_PRINTF_ARGS_OBJECTIVEC	2	API usage errors	An argument was passed that does not match any format specifier. It will be ignored and likely indicates an error.
COV_OBJC_STREAM_FORMAT_STATE_OBJECTIVEC	2	API usage errors	The next output operation may not expect the stream format state being altered, resulting in incorrectly formatted output.
COV_OBJC_SWAPPED_ARGUMENTS_OBJECTIVEC	2	API usage errors	The function call will not have its intended effect.
COV_OBJC_VARARGS_OBJECTIVEC	2	API usage errors	Memory may be corrupted by forgetting to begin and end variable argument processing.

COV_OBJC_BAD_OVERRIDE_OBJECTIVEC	2	Class hierarchy inconsistencies	The method will not be called when virtual dispatch is used, this may cause the class to not perform as expected.
COV_OBJC_DC.BAD_OVERRIDE_OBJECTIVEC	2	Class hierarchy inconsistencies	The method will not be called when virtual dispatch is used, this may cause the class to not perform as expected.

COV_OBJC_NESTING_INDENT_MISMATCH_OBJECTIVEC	3	Code maintainability issues	Readers of this code might be misled as to its structure.
COV_OBJC_VIRTUAL_DTOR_OBJECTIVEC	3	Code maintainability issues	The base class destructor ought to be declared as virtual; however, this case may be benign since the derived class destructor is empty.

COV_OBJC_ATOMICITY_OBJECTIVEC	2	Concurrent data access violations	The result of the update will be determined by the interleaving of thread execution.
COV_OBJC_MISSING_LOCK_OBJECTIVEC	2	Concurrent data access violations	The value of the shared data will be determined by the interleaving of thread execution.

COV_OBJC_MISMATCHED_ITERATOR_OBJECTIVEC	2	Control flow issues	Iterators between different containers will always be different and should not be compared; this likely indicates a logical bug.
COV_OBJC_MISSING_BREAK_OBJECTIVEC	2	Control flow issues	Execution falls through to the next case statement or default; this might indicate a common typo.
COV_OBJC_MISSING_RESTORE_OBJECTIVEC	2	Control flow issues	Failing to restore original value of some external value could compromise integrity of a subsystem.
COV_OBJC_STRAY_SEMICOLON_OBJECTIVEC	2	Control flow issues	A misplaced semicolon is a common typo that can cause unexpected changes to the flow of control in the program that results in logical errors.
COV_OBJC_UNEXPECTED_CONTROL_FLOW_OBJECTIVEC	2	Control flow issues	Execution jumps out of the loop rather than continuing.
COV_OBJC_UNREACHABLE_OBJECTIVEC	2	Control flow issues	Actions intended to be performed by the unreachable code will never occur.

COV_OBJC_CHECKED_RETURN_OBJECTIVEC	2	Error handling issues	The function returns a value that indicates an error condition.  If this is not checked, the error condition may not be handled correctly.
COV_OBJC_UNCAUGHT_EXCEPT_OBJECTIVEC	1	Error handling issues	If the exception is ever thrown, the program will crash..

COV_OBJC_RESOURCE_LEAK_OBJECTIVEC	3	Exceptional resource leaks	The system resource will not be reclaimed and reused, reducing the future availability of the resource.

COV_OBJC_WRITE_CONST_FIELD_OBJECTIVEC	1	High impact quality	A field that was intended to remain invariant has had its value changed.

COV_OBJC_ASSERT_SIDE_EFFECT_OBJECTIVEC	2	Incorrect expression	If the assertion is turned off, the side-effect may be lost.
COV_OBJC_BAD_SIZEOF_OBJECTIVEC	2	Incorrect expression	This is usually caused by a typo or a misunderstanding of the sizeof operator, which should be applied to the actual type whose size is desired. An incorrect sizeof value is used in further computation.
COV_OBJC_COPY_PASTE_ERROR_OBJECTIVEC	2	Incorrect expression	The copied code will not have its intended effect.
COV_OBJC_DIVIDE_BY_ZERO_OBJECTIVEC	1	Incorrect expression	This could cause an immediate crash or incorrect computation.
COV_OBJC_ENUM_AS_BOOLEAN_OBJECTIVEC	1	Incorrect expression	Multiple non-zero-valued enumeration values may inadvertently be treated as equivalent due to all being interpreted as true.
COV_OBJC_EVALUATION_ORDER_OBJECTIVEC	2	Incorrect expression	With different compiler flags or different compilers or platforms, this code may behave differently.
COV_OBJC_IDENTICAL_BRANCHES_OBJECTIVEC	2	Incorrect expression	The case is redundant or can be combined
COV_OBJC_MISSING_COMMA_OBJECTIVEC	1	Incorrect expression	An unexpected concatenated string or overrun.
COV_OBJC_MIXED_ENUMS_OBJECTIVEC	1	Incorrect expression	An enumeration value for one enum type may be misinterpreted as a different, unrelated enumeration value in a different type.  An enumeration value in one type may have no meaningful interpretation in another enum type, leading to a range of logic errors.
COV_OBJC_NO_EFFECT_OBJECTIVEC	2	Incorrect expression	The address of an array is never NULL, so the comparison will always evaluate the same way.
COV_OBJC_SIZEOF_MISMATCH_OBJECTIVEC	2	Incorrect expression	The extraneous sizeof may cause an incorrect expression. Pointer arithmetic increments or decrements the pointer by multiples of the number of bytes in the target of the pointer.
COV_OBJC_UNINTENDED_INTEGER_DIVISION_OBJECTIVEC	2	Incorrect expression	The result of the division is truncated to an integer (a whole number), which is usually a loss of precision in a calculation.
COV_OBJC_UNUSED_VALUE_OBJECTIVEC	2	Incorrect expression	An assigned value that is never used may represent unnecessary computation, an incorrect algorithm, or possibly the need for cleanup or refactoring.
COV_OBJC_USELESS_CALL_OBJECTIVEC	1	Incorrect expression	A function call that seems to have an intended effect has no actual effect on the logic of the program.

COV_OBJC_BAD_SHIFT_OBJECTIVEC	2	Integer handling issues	The operation may have an undefined behavior or yield an unexpected result.
COV_OBJC_CONSTANT_EXPRESSION_RESULT_OBJECTIVEC	2	Integer handling issues	The expression's value is always zero; construct may indicate an inadvertent logic error.
COV_OBJC_INCOMPATIBLE_CAST_OBJECTIVEC	1	Integer handling issues	The pointed-to memory is accessed with a smaller type, causing a subsequent read to yield an unexpected result.
COV_OBJC_MISRA_CAST_OBJECTIVEC	2	Integer handling issues	Left shift of an unsigned short results in a signed int value; subsequent operations on the signed int may result in unexpected sign extension.
COV_OBJC_OVERFLOW_BEFORE_WIDEN_OBJECTIVEC	2	Integer handling issues	The expression's value may not be what the programmer intended, because the expression is evaluated using a narrow (i.e. few bits) integer type.
COV_OBJC_SIGN_EXTENSION_OBJECTIVEC	2	Integer handling issues	The sign-extended value may be interpreted as a very large number.

COV_OBJC_MISSING_MOVE_ASSIGNMENT_OBJECTIVEC	3	Low impact quality	This class does not have a user-written move assignment operator and its copy assignment operator is found to be applied to rvalue(s), which can be moved to possibly enhance program performance had the move assignment operator been in place.

COV_OBJC_ARRAY_VS_SINGLETON_OBJECTIVEC	1	Memory - corruptions	Memory not owned by this buffer will be accessed, causing memory corruption or incorrect computations.
COV_OBJC_BAD_ALLOC_ARITHMETIC_OBJECTIVEC	1	Memory - corruptions	The pointer value returned from the allocator may be lost, making it difficult to deallocate later.
COV_OBJC_BAD_ALLOC_STRLEN_OBJECTIVEC	1	Memory - corruptions	The string length computed may be one less than intended (or zero for the empty string).  A common mistake.
COV_OBJC_BAD_FREE_OBJECTIVEC	1	Memory - corruptions	A non-heap pointer is placed on the free list, likely causing a crash later.
COV_OBJC_COM.BSTR.CONV_OBJECTIVEC	1	Memory - corruptions	Accessing a wchar_t as if it were a BSTR may read out of bounds memory or cause memory corruption.
COV_OBJC_OVERRUN_OBJECTIVEC	1	Memory - corruptions	If this address is later used for bounds checking another pointer before dereferencing, an overrun may occur due to the weak guard.
COV_OBJC_SIZECHECK_OBJECTIVEC	1	Memory - corruptions	This can result in an non-null terminated string or an off-by-one buffer overflow, if the intention of the allocation is to copy the string.
COV_OBJC_STRING_SIZE_OBJECTIVEC	1	Memory - corruptions	The string operation can write past the end of the fixed-size destination buffer if the source buffer is too large.

COV_OBJC_BUFFER_SIZE_WARNING_OBJECTIVEC	1	Memory - illegal accesses	If the buffer is treated as a null terminated string in later operations, a buffer overflow or over-read may occur.
COV_OBJC_COM.BAD_FREE_OBJECTIVEC	1	Memory - illegal accesses	Other owners of the interface may be left with dangling pointers, ultimately resulting in use after free errors.
COV_OBJC_COM.BSTR.ALLOC_OBJECTIVEC	1	Memory - illegal accesses	Undefined behavior including memory corruption and crashes due to illegal memory accesses can result.
COV_OBJC_DELETE_ARRAY_OBJECTIVEC	1	Memory - illegal accesses	Undefined behavior might result.
COV_OBJC_DELETE_VOID_OBJECTIVEC	1	Memory - illegal accesses	Undefined behavior might result; in practice, the memory is typically freed, but the destructor is not run.
COV_OBJC_MISSING_ASSIGN_OBJECTIVEC	3	Memory - illegal accesses	This class, which frees resources in its destructor, does not have a user-written copy assignment operator, but is copy-assigned. Unless the resource is managed separately from the copy operation, this may cause use-after-free errors.
COV_OBJC_MISSING_COPY_OBJECTIVEC	3	Memory - illegal accesses	This class, which frees resources in its destructor, does not have a user-written copy constructor, but is copy-constructed. Unless the resource is managed separately from the copy operation, this may cause use-after-free errors.
COV_OBJC_MISSING_COPY_OR_ASSIGN_OBJECTIVEC	1	Memory - illegal accesses	This class, which frees resources in its destructor, does not have a user-written copy assignment operator, but is copy-assigned. Unless the resource is managed separately from the copy operation, this may cause use-after-free errors.
COV_OBJC_NEGATIVE_RETURNS_OBJECTIVEC	1	Memory - illegal accesses	A memory location at a negative offset from the beginning of the array will be read, resulting in incorrect values.
COV_OBJC_READLINK_OBJECTIVEC	1	Memory - illegal accesses	The buffer will be written past the end looking for a null terminator, causing a buffer overrun.
COV_OBJC_RETURN_LOCAL_OBJECTIVEC	1	Memory - illegal accesses	Later dereferencing of the saved stack pointer will access an invalid location on the stack outside its scope or after the function returns.
COV_OBJC_REVERSE_NEGATIVE_OBJECTIVEC	1	Memory - illegal accesses	A memory location at a negative offset from the beginning of the array will be read, resulting in incorrect values.
COV_OBJC_STRING_NULL_OBJECTIVEC	1	Memory - illegal accesses	The function may iterate past the end of the buffer looking for a null terminator.
COV_OBJC_UNINIT_OBJECTIVEC	1	Memory - illegal accesses	Incorrect values will be read from an arbitrary memory location, causing incorrect computations.
COV_OBJC_USE_AFTER_FREE_OBJECTIVEC	1	Memory - illegal accesses	Incorrect values may be read from freed memory, causing incorrect computations.
COV_OBJC_WRAPPER_ESCAPE_OBJECTIVEC	1	Memory - illegal accesses	Reading from freed memory can cause wrong values to be read and crashes due to illegal memory accesses.

COV_OBJC_FORWARD_NULL_OBJECTIVEC	2	Null pointer dereferences	A null pointer dereference will occur.
COV_OBJC_NULL_RETURNS_OBJECTIVEC	2	Null pointer dereferences	If the function actually returns a null value, a null pointer dereference will occur.
COV_OBJC_REVERSE_INULL_OBJECTIVEC	2	Null pointer dereferences	There may be a null pointer dereference, or else the comparison against null is unnecessary.

COV_OBJC_PASS_BY_VALUE_OBJECTIVEC	3	Performance inefficiencies	Copying large values is inefficient, consider passing by reference; size thresholds for detection can be adjusted.
COV_OBJC_STACK_USE_OBJECTIVEC	5	Performance inefficiencies	Excessive stack use may cause stack overflow in embedded applications.  Stack size limits are configurable.

COV_OBJC_DEADCODE_OBJECTIVEC	3	Possible Control flow issues	By the time the program execution reaches this switch statement, the value cannot be equal to the given case. The code at the case is not dead, because it can be reached by falling through from a previous case.

COV_OBJC_INFINITE_LOOP_OBJECTIVEC	2	Program hangs	The loop will execute forever, or until system resources are exhausted or the system is otherwise stopped.
COV_OBJC_ORDER_REVERSAL_OBJECTIVEC	2	Program hangs	Two threads will be stuck waiting forever if each holds a lock the other needs to acquire.
COV_OBJC_SLEEP_OBJECTIVEC	2	Program hangs	The lock will prevent other threads from making progress for an indefinite period of time; may be mistaken for deadlock.

COV_OBJC_CTOR_DTOR_LEAK_OBJECTIVEC	1	Resource leaks	The memory will not be reclaimed by the destructor, and it cannot be reused until the process terminates.

COV_OBJC_COPY_WITHOUT_ASSIGN_OBJECTIVEC	3	Rule violations	This class has a user-defined copy constructor but no user-defined assignment operator. If the copy constructor is necessary to manage owned resources then a corresponding assignment operator is usually required. If an object of this type is assigned memory leaks and/or use-after-free errors may occur. Note that a compiler-generated assignment operator will perform only a bit-wise copy for any fields that do not have their own assignment operators defined.
COV_OBJC_SELF_ASSIGN_OBJECTIVEC	3	Rule violations	This user-written assignment operator does not check for self-assignment. If an object of this type is assigned to itself use-after-free errors may occur if the class owns resources.

COV_OBJC_ASSIGN_NOT_RETURNING_STAR_THIS_OBJECTIVEC	3	Strict rule violations	This assignment operator does not directly return *this as a reference to a non-const object, as does a built-in assignment operator. This unconventional interface or behavior may make it difficult for others to use this class.

COV_OBJC_SYMBIAN.CLEANUP_STACK_OBJECTIVEC	1	UNKNOWN	SYMBIAN.CLEANUP_STACK
COV_OBJC_SYMBIAN.NAMING_OBJECTIVEC	1	UNKNOWN	SYMBIAN.NAMING

COV_OBJC_UNINIT_CTOR_OBJECTIVEC	2	Uninitialized members	The field will contain an arbitrary value leftover from earlier computations.

COV_OBJC_MISSING_RETURN_OBJECTIVEC	1	Uninitialized variables	The return value will be taken from whatever happens to be on the stack, likely causing incorrect computation.

// New in Coverity 2022.03
COV_OBJC_ODR_VIOLATION_OBJECTIVEC	3	Build system issues	At link time, an incorrect definition of this entity may be used.

