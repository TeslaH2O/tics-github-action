// Coverity 2022.03 and below
COV_CPP_ALLOC_FREE_MISMATCH	2	API usage errors	A resource is freed using the wrong deallocator
COV_CPP_CHAR_IO	2	API usage errors	Stdio character-oriented I/O functions return int values such as EOF not representable by char variables
COV_CPP_COM.BSTR.BAD_COMPARE	2	API usage errors	Comparison of two BSTRs for other than equality
COV_CPP_COM.BSTR.NE_NON_BSTR	2	API usage errors	Comparison of BSTR to other than BSTR
COV_CPP_INVALIDATE_ITERATOR	2	API usage errors	An invalid or past-the-end iterator is being used
COV_CPP_PRINTF_ARGS	3	API usage errors	An argument was passed that does not match any format specifier. It will be ignored and likely indicates an error.
COV_CPP_PW.BAD_PRINTF_FORMAT_STRING	2	API usage errors	A printf format string contains an unrecognized format specifier
COV_CPP_PW.PRINTF_ARG_MISMATCH	2	API usage errors	A printf format string does not match the types of one of the arguments
COV_CPP_PW.TOO_FEW_PRINTF_ARGS	2	API usage errors	The number of arguments to printf does not match the format string
COV_CPP_PW.TOO_MANY_PRINTF_ARGS	2	API usage errors	The number of arguments to printf does not match the format string
COV_CPP_STREAM_FORMAT_STATE_01	2	API usage errors	Not restoring the stream format state of an ostream
COV_CPP_SWAPPED_ARGUMENTS	1	API usage errors	The arguments to a function call are provided in the wrong order.
COV_CPP_VARARGS	2	API usage errors	Incorrect usage of variable argument macros; use va_start or va_copy to begin processing and va_end to finish

COV_CPP_REVERSE_OVERRUN	2	Array access before checking the index	Unexpected behavior. Depending on the implementation, may result in a crash or sensitive data leak

COV_CPP_VCALL_IN_CTOR_DTOR	2	Bad call to a virtual method	Unexpected behavior. Depending on the implementation, may result in crash

COV_CPP_FLOATING_POINT_EQUALITY	2	Bad comparison of floating-point expressions	Unexpected behavior. Depending on the implementation, the comparison result may vary

COV_CPP_DUPLICATE_PROCESS	3	Build system issues	A process is executed multiple times during the build system
COV_CPP_FILE_ACCESS	3	Build system issues	A file is accessed during the build system that falls outside the build's file access policy
COV_CPP_FILE_LEAK	3	Build system issues	A file created during the build system is not cleaned up by the build in its clean step
COV_CPP_HFA	3	Build system issues	A header file was included but none of its contents were used in the rest of the source file
COV_CPP_ODR_VIOLATION	3	Build system issues	At link time, an incorrect definition of this entity may be used
COV_CPP_POLICY	3	Build system issues	A process executed during the build violated a local build policy
COV_CPP_PW.INCLUDE_RECURSION	3	Build system issues	Recursion in included header files

COV_CPP_BAD_OVERRIDE	2	Class hierarchy inconsistencies	Virtual function does not override parent method because of type signature mismatch, usually due to const

COV_CPP_SYMBIAN.NAMING_01	3	Code maintainability issues	Violation of the Symbian naming convention
COV_CPP_UNUSED_VALUE	2	Code maintainability issues	Pointer returned from a function was never used


COV_CPP_ATOMICITY	2	Concurrent data access violations	Non-atomic update of a concurrently shared value
COV_CPP_MISSING_LOCK	2	Concurrent data access violations	Thread shared data is accessed without holding an appropriate lock, possibly causing a race condition

COV_CPP_DEADCODE_01	2	Control flow issues	Code can never be reached because of a logical contradiction
COV_CPP_MISSING_BREAK	2	Control flow issues	Missing break statement between cases in switch statement
COV_CPP_MISSING_RESTORE_01	2	Control flow issues	Failure to restore non-local value
COV_CPP_NESTING_INDENT_MISMATCH_02	2	Control flow issues	The indentation of this code suggests it is nested when it is not.
COV_CPP_PW.BRANCH_PAST_INITIALIZATION	2	Control flow issues	A goto jumps past the initialization of a variable
COV_CPP_STRAY_SEMICOLON	2	Control flow issues	A semicolon was erroneously inserted at a wrong point in the code, e.g. after an if, while, or for construct and before the block
COV_CPP_UNEXPECTED_CONTROL_FLOW	2	Control flow issues	Execution jumps out of the loop rather than continuing
COV_CPP_UNREACHABLE	2	Control flow issues	Code block is unreachable because of the syntactic structure of the code

COV_CPP_CHECKED_RETURN_01	2	Error handling issues	Value returned from a function is not checked for errors before being used
COV_CPP_UNCAUGHT_EXCEPT	2	Error handling issues	A C++ exception is thrown but never caught

COV_CPP_WRITE_CONST_FIELD	1	High impact quality	A field that was intended to remain invariant has had its value changed.

COV_CPP_ASSERT_SIDE_EFFECT_01	2	Incorrect expression	Assertion contains an operation with a side effect
COV_CPP_BAD_COMPARE_02	2	Incorrect expression	Address of function compared to zero
COV_CPP_BAD_SIZEOF_01	2	Incorrect expression	The sizeof operator was applied to an unintended variable or expression, such as a pointer variable instead of its target
COV_CPP_COPY_PASTE_ERROR	1	Incorrect expression	A copied piece of code is inconsistent with the original
COV_CPP_ENUM_AS_BOOLEAN	2	Incorrect expression	An enum-typed expression is used in a Boolean conditional context. The enum type does not appear to have a distinguished false (zero) value
COV_CPP_EVALUATION_ORDER	1	Incorrect expression	Statement contains multiple side-effects on the same value with an undefined evaluation order
COV_CPP_IDENTICAL_BRANCHES_01	1	Incorrect expression	The same code is executed regardless of the condition
COV_CPP_MISSING_COMMA	2	Incorrect expression	A comma is suspiciously missing between lines in a string array initialization.
COV_CPP_MIXED_ENUMS_01	2	Incorrect expression	An enum-typed expression is mixed with a different enum type
COV_CPP_NO_EFFECT_02	2	Incorrect expression	An expression with no side-effect or unintended effect indicates a possible logic flaw
COV_CPP_PRECEDENCE_ERROR	2	Incorrect expression	Two adjacent operators are applied in precedence order, but the context suggests that they were intended in the opposite order. This may lead to incorrect program behavior.
COV_CPP_PW.ASSIGN_WHERE_COMPARE_MEANT	2	Incorrect expression	An assignment (=) occurs where compare (==) is probably intended
COV_CPP_PW.EXPR_HAS_NO_EFFECT	2	Incorrect expression	An expression with no side-effect or unintended effect indicates a possible logic flaw
COV_CPP_SIZEOF_MISMATCH_02	2	Incorrect expression	The sizeof operator is used erroneously in an expression or is invoked on the wrong argument
COV_CPP_UNINTENDED_INTEGER_DIVISION	2	Incorrect expression	When dividing two values of integer types, integer division is used, which ignores any remainder. When such a result is used in a context expecting a floating-point number, it is likely that floating-point division was intended.
COV_CPP_USELESS_CALL	3	Incorrect expression	A function call that seems to have an intended effect has no actual effect on the logic of the program

COV_CPP_INTEGER_OVERFLOW_01	2	Insecure data handling	An integer overflow occurs, with the overflowed value used in a sensitive operation

COV_CPP_BAD_SHIFT	2	Integer handling issues	A bit shift operation has a shift amount which is too large or has a negative value.
COV_CPP_CONSTANT_EXPRESSION_RESULT_04	2	Integer handling issues	An operation with non-constant operands that computes a result with constant value
COV_CPP_DIVIDE_BY_ZERO_02	2	Integer handling issues	Division or modulo by zero results in undefined behavior.
COV_CPP_INCOMPATIBLE_CAST_01	2	Integer handling issues	Cast between incompatible pointer types
COV_CPP_MISRA_CAST_01	2	Integer handling issues	Cast operation violates MISRA standard (MISRA 2004 Rules 10.1 - 10.5)
COV_CPP_NEGATIVE_RETURNS_02	2	Integer handling issues	Negative value returned from function is not being checked before being used improperly
COV_CPP_OVERFLOW_BEFORE_WIDEN	2	Integer handling issues	An integer overflow occurs, with the result converted to a wider integer type
COV_CPP_PW.BAD_CAST	2	Integer handling issues	A cast from an integer to a pointer of narrower precision
COV_CPP_PW.CONVERSION_TO_POINTER_LOSES_BITS	2	Integer handling issues	A cast from an integer to a pointer of narrower precision
COV_CPP_PW.DIVIDE_BY_ZERO	2	Integer handling issues	Divide by zero
COV_CPP_PW.INTEGER_OVERFLOW	2	Integer handling issues	An integer overflow occurs at compile time when parsing this expression
COV_CPP_PW.INTEGER_TOO_LARGE	2	Integer handling issues	An integer overflow occurs at compile time when parsing this expression
COV_CPP_PW.SHIFT_COUNT_TOO_LARGE	2	Integer handling issues	An integer overflow occurs at compile time when parsing this expression
COV_CPP_PW.UNSIGNED_COMPARE_WITH_NEGATIVE	2	Integer handling issues	An unsigned value, which can never be less than 0, is compared with a negative value
COV_CPP_REVERSE_NEGATIVE_01	2	Integer handling issues	Negative value used incorrectly where positive value is expected
COV_CPP_SIGN_EXTENSION	2	Integer handling issues	Value may be sign extended unintentionally

COV_CPP_ARRAY_VS_SINGLETON	1	Memory - corruptions	Access of memory past the end of a memory buffer
COV_CPP_BAD_ALLOC_ARITHMETIC	1	Memory - corruptions	Pointer arithmetic performed on freshly allocated memory
COV_CPP_BAD_ALLOC_STRLEN	1	Memory - corruptions	String length miscalculation
COV_CPP_BAD_FREE_01	1	Memory - corruptions	Free of an pointer that was not returned from an allocation function
COV_CPP_COM.BSTR.CONV	1	Memory - corruptions	A wide character string cannot be converted to a BSTR because it lacks the hidden length field
COV_CPP_MISMATCHED_ITERATOR_02	1	Memory - corruptions	Using iterator from one container in operations on another container
COV_CPP_OVERLAPPING_COPY	1	Memory - corruptions	Memory may be overwritten before it is read
COV_CPP_OVERRUN_01	1	Memory - corruptions	Out-of-bounds access to a buffer
COV_CPP_OVERRUN_DYNAMIC_01	1	Memory - corruptions	Out-of-bounds access to an array
COV_CPP_OVERRUN_STATIC_01	1	Memory - corruptions	Out-of-bounds access to an array
COV_CPP_READONLY_BUFFER	1	Memory - corruptions	Modification of read-only buffer

COV_CPP_COM.BAD_FREE	1	Memory - illegal accesses	A COM interface is explicitly freed instead of using the recommended Release method
COV_CPP_COM.BSTR.ALLOC_01	1	Memory - illegal accesses	Violation of the COM coding standard by not freeing a BSTR, by using an uninitialized BSTR, or by freeing a non-owned BSTR
COV_CPP_DELETE_ARRAY_02	1	Memory - illegal accesses	Using non-array delete on an array of objects, scalars, or pointers allocated with new[]
COV_CPP_DELETE_VOID	1	Memory - illegal accesses	Deleting a void pointer (void*)
COV_CPP_MISSING_COPY_OR_ASSIGN	1	Memory - illegal accesses	This class, which frees resources in its destructor, does not have a user-written copy assignment operator, but is copy-assigned. Unless the resource is managed separately from the copy operation, this may cause use-after-free errors.
COV_CPP_PW.RETURN_PTR_TO_LOCAL_TEMP	1	Memory - illegal accesses	Returning a pointer to a temporary variable, which will be destroyed on function exit
COV_CPP_READLINK	1	Memory - illegal accesses	The readlink system call may return a value equal to the buffer size, which causes an access one past the end
COV_CPP_RETURN_LOCAL	1	Memory - illegal accesses	Pointer to a local stack variable returned or used outside scope
COV_CPP_SIZECHECK_06	1	Memory - illegal accesses	The allocation size is computed incorrectly
COV_CPP_USE_AFTER_FREE_05	1	Memory - illegal accesses	A pointer to freed memory is dereferenced, used as a function argument, or otherwise used
COV_CPP_WRAPPER_ESCAPE_03	1	Memory - illegal accesses	An internal pointer of a wrapper object remains available after the object is freed

COV_CPP_OTHER	3	Miscellaneous	Unclassified violation

COV_CPP_FORWARD_NULL_01	2	Null pointer dereferences	Pointer is checked against null but then dereferenced anyway
COV_CPP_NULL_RETURNS_01	2	Null pointer dereferences	Return value of function which returns null is dereferenced without checking
COV_CPP_REVERSE_INULL	2	Null pointer dereferences	All paths that lead to this null pointer comparison already dereference the pointer earlier

COV_CPP_AUTO_CAUSES_COPY	3	Performance inefficiencies	Unnecessary object copies can affect performance.
COV_CPP_INEFFECTIVE_MOVE	3	Performance inefficiencies	A copy operation may perform, despite a move operation is expected.
COV_CPP_PASS_BY_VALUE	3	Performance inefficiencies	A large function call parameter or exception catch statement is passed by value
COV_CPP_STACK_USE	3	Performance inefficiencies	Excessive use of stack memory by local variables or parameters


COV_CPP_INFINITE_LOOP_01	2	Program hangs	Infinite loop with unsatisfiable or no exit condition
COV_CPP_LOCK_02	2	Program hangs	Missing a release of a lock on a path, or an attempt to acquire a lock more than once
COV_CPP_ORDER_REVERSAL	2	Program hangs	Threads may try to acquire two locks in different orders, potentially causing deadlock
COV_CPP_SLEEP	2	Program hangs	A lock is held while waiting for a long running or blocking operation to complete

COV_CPP_COM.ADDROF_LEAK	1	Resource leaks	A non-null pointer managed by a CComBSTR or CComPtr instance is passed by address to a function call. The value of the pointer can potentially be overwritten during the function call causing allocated memory to be leaked.
COV_CPP_CTOR_DTOR_LEAK	1	Resource leaks	Constructor allocates memory but destructor does not free it
COV_CPP_RESOURCE_LEAK_02	1	Resource leaks	Leak of a system resource such as memory, file handles, or sockets
COV_CPP_SYMBIAN.CLEANUP_STACK_04	1	Resource leaks	Error in the interaction of the code with the Symbian cleanup stack API
COV_CPP_VIRTUAL_DTOR_02	2	Resource leaks	The correct derived class destructor is not invoked due to the absence of a virtual destructor in the base class

COV_CPP_ASSIGN_NOT_RETURNING_STAR_THIS_01	3	Rule violations	A user-written assignment operator does not return a reference to *this
COV_CPP_COPY_WITHOUT_ASSIGN	3	Rule violations	Class has user-written copy constructor but no user-written assignment operator
COV_CPP_MISSING_ASSIGN	3	Rule violations	Class that owns resources lacks a user-written assignment operator
COV_CPP_MISSING_COPY	3	Rule violations	Class that owns resources lacks a user-written copy constructor
COV_CPP_SELF_ASSIGN	3	Rule violations	Assignment operator does not check for self-assignment
COV_CPP_MISSING_MOVE_ASSIGNMENT	3	Rule violations	This class does not have a user-written move assignment operator and its copy assignment operator is found to be applied to rvalue(s), which can be moved to possibly enhance program performance had the move assignment operator been in place


COV_CPP_TA.*	3	Test advisor issues	Code does not satisfy the testing policy established by your organization.
COV_CPP_TA.INSUFFICIENT_COVERAGE	3	Test advisor issues	Function does not reach coverage threshold required by the policy
COV_CPP_TA.INSUFFICIENT_FILE_COVERAGE	3	Test advisor issues	File does not reach coverage threshold required by the policy
COV_CPP_TA.NO_COVERAGE	3	Test advisor issues	Function is not covered by any test
COV_CPP_TA.UNCALLED	3	Test advisor issues	Function is not called from any test

COV_CPP_UNINIT_CTOR_01	2	Uninitialized members	A class member is not initialized by the constructor

COV_CPP_MISSING_RETURN_02	1	Uninitialized variables	Function that returns non-void is missing a return value
COV_CPP_UNINIT_05	2	Uninitialized variables	Use of an uninitialized variable
COV_CPP_USE_AFTER_MOVE	1	Uninitialized variables	Using a moved object may lead to an unexpected/undefined behavior.
