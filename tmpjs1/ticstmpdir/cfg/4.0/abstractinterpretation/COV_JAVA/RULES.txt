// Coverity 2022.03 and below
COV_JAVA_DC.CODING_STYLE	2	API usage errors	System.exit and Runtime.exit should not be called in libraries, J2EE applications, and many other applications
COV_JAVA_HIBERNATE_BAD_HASHCODE_01	2	API usage errors	The result of hashCode() depends on an entity's primary database key
COV_JAVA_INVALIDATE_ITERATOR_01	2	API usage errors	An iterator is being used after the source container of the iterator is modified
COV_JAVA_ITERATOR	2	API usage errors	A call to next() or previous() on an iterator that may not have a next or previous element
COV_JAVA_JDBC_CONNECTION_01	2	API usage errors	Calling commit on an auto-commit Connection, or calling certain methods on closed connections causes an exception, or leak of a database connection, which should be closed after use
COV_JAVA_ORM_ABANDONED_TRANSIENT	2	API usage errors	New objects are not persisted.
COV_JAVA_ORM_LOAD_NULL_CHECK	2	API usage errors	A possibly proxy object is pointlessly tested for null.
COV_JAVA_ORM_LOST_UPDATE	2	API usage errors	New or modified objects are not persisted.
COV_JAVA_REGEX_CONFUSION	2	API usage errors	A string intended to be matched literally is instead treated as a regular expression, changing its meaning.
COV_JAVA_SWAPPED_ARGUMENTS	2	API usage errors	The arguments to a function call are provided in the wrong order.
COV_JAVA_UNMODIFIABLE_COLLECTION	2	API usage errors	Attempt to modify a collection that is wrapped by an unmodifiable adapter
COV_JAVA_USE_AFTER_FREE	2	API usage errors	Use of an object after its resources have been released
COV_JAVA_WRONG_METHOD	2	API usage errors	Some methods such as Boolean.getBoolean and Integer.getInteger are easily misunderstood to parse their string arguments. Instead, they load a system property named by the argument and parse the property value.

COV_JAVA_DUPLICATE_PROCESS	3	Build system issues	A process is executed multiple times during the build system
COV_JAVA_FILE_ACCESS	3	Build system issues	A file is accessed during the build system that falls outside the build's file access policy
COV_JAVA_FILE_LEAK	3	Build system issues	A file created during the build system is not cleaned up by the build in its clean step
COV_JAVA_POLICY	3	Build system issues	A process executed during the build violated a local build policy

COV_JAVA_BAD_OVERRIDE_01	2	Class hierarchy inconsistencies	This method does not override the superclass method because the names differ in capitalization or because one or more argument types differ by package
COV_JAVA_CALL_SUPER_01	2	Class hierarchy inconsistencies	Overrider does not call the superclass method, even though most other overriders do or all overriders of this method should
COV_JAVA_CLASSCAST	2	Class hierarchy inconsistencies	Object of one type put into a container, but then later downcast to a different type when extracted
COV_JAVA_FORWARD_CLASSCAST	2	Class hierarchy inconsistencies	Object is checked for compatibility with a particular subtype, but then later downcast without a check
COV_JAVA_VIRTUAL_IN_CTOR	2	Class hierarchy inconsistencies	A virtual method is called in a constructor

COV_JAVA_DC.EXPLICIT_DEPRECATION	3	Code maintainability issues	Calling a deprecated method
COV_JAVA_DC.GC	3	Code maintainability issues	Explicit garbage collection should not be performed in most applications, and it is usually incorrect in libraries
COV_JAVA_DC.JRE14COMPATIBLE	3	Code maintainability issues	This method is not available in Java Runtime Environment 1.4
COV_JAVA_DC.JRE15COMPATIBLE	3	Code maintainability issues	This method is not available in Java Runtime Environment 1.5
COV_JAVA_DC.LOCALIZATION	3	Code maintainability issues	This method relies on the platform's default character set
COV_JAVA_DC.THREADING_02	3	Code maintainability issues	Relying on finalizers is unsafe or calling Thread.run does not actually create a thread
COV_JAVA_MUTABLE_COMPARISON	3	Code maintainability issues	The compareTo method should not read from non-constant fields
COV_JAVA_MUTABLE_HASHCODE	3	Code maintainability issues	The hashCode method should not read from non-constant fields
COV_JAVA_PRIVATE_COLLECTION	3	Code maintainability issues	A private Collection field is returned and then modified
COV_JAVA_SET_STATIC_IN_NON_STATIC	3	Code maintainability issues	A static field is assigned in a non-static method
COV_JAVA_UNCALLED	3	Code maintainability issues	Method is not called from anywhere in the program
COV_JAVA_UNUSED_VALUE	3	Code maintainability issues	A value assigned to a variable is never used.

COV_JAVA_ATOMICITY	2	Concurrent data access violations	Non-atomic update of a concurrently shared value
COV_JAVA_BAD_CHECK_OF_WAIT_COND	2	Concurrent data access violations	Improperly checking a wait condition before waiting on a mutex can cause a thread to continue before the condition has been satisfied, or to unnecessarily wait for a condition that has already been satisfied.
COV_JAVA_BAD_LOCK_OBJECT_01	2	Concurrent data access violations	Locking upon an object which is a poor choice due to too broad, too narrow, or too unpredictable aliasing behavior.
COV_JAVA_DOUBLE_CHECK_LOCK	2	Concurrent data access violations	Checking a variable for initialization outside of a synchronized section, then checking again once inside the section
COV_JAVA_GUARDED_BY_VIOLATION_01	2	Concurrent data access violations	Thread shared data is accessed without holding an appropriate lock, possibly causing a race condition
COV_JAVA_INDIRECT_GUARDED_BY_VIOLATION	2	Concurrent data access violations	Thread shared data is accessed without holding an appropriate lock, possibly causing a race condition
COV_JAVA_NON_STATIC_GUARDING_STATIC	2	Concurrent data access violations	Static field is protected by a per-instance lock
COV_JAVA_RACE_CONDITION	2	Concurrent data access violations	This field is not protected by a consistent synchronization object (lock) at all times, causing a race condition
COV_JAVA_SERVLET_ATOMICITY_01	2	Concurrent data access violations	Non-atomic update of a concurrently shared value
COV_JAVA_SINGLETON_RACE	2	Concurrent data access violations	There is a thread unsafe modification of a field (instance or static) from a method call on a singleton.
COV_JAVA_UNSAFE_LAZY_INIT	2	Concurrent data access violations	Using lazy initialization is unsafe in a multithreaded application without a synchronized block
COV_JAVA_VOLATILE_ATOMICITY	2	Concurrent data access violations	A volatile variable is updated in a non-atomic manner

COV_JAVA_DEADCODE_01	2	Control flow issues	Code can never be reached because of a logical contradiction
COV_JAVA_MISSING_BREAK	2	Control flow issues	Missing break statement between cases in switch statement
COV_JAVA_MISSING_RESTORE_01	2	Control flow issues	Failure to restore non-local value
COV_JAVA_NESTING_INDENT_MISMATCH_02	2	Control flow issues	The indentation of this code suggests it is nested when it is not.
COV_JAVA_PW.ABNORMAL_TERMINATION_OF_FINALLY_BLOCK	2	Control flow issues	Returning or abnormally terminating a finally block
COV_JAVA_PW.FALLTHROUGH	2	Control flow issues	Missing break statement between cases in switch statement
COV_JAVA_STRAY_SEMICOLON	2	Control flow issues	A semicolon was erroneously inserted at a wrong point in the code, e.g. after an if, while, or for construct and before the block
COV_JAVA_UNEXPECTED_CONTROL_FLOW	2	Control flow issues	Execution jumps out of the loop rather than continuing.
COV_JAVA_UNREACHABLE	2	Control flow issues	Code block is unreachable because of the syntactic structure of the code

COV_JAVA_LOCK_EVASION	1	Data race undermines locking	Checking the value of a thread-shared field outside of a locked region to determine if a locked operation involving that thread shared field has completed.

COV_JAVA_CHECKED_RETURN_01	2	Error handling issues	Value returned from a function is not checked for errors before being used
COV_JAVA_MISSING_THROW	2	Error handling issues	An object of exception type is created but neither thrown nor stored anywhere; the developer likely intended to throw the exception.


COV_JAVA_FB.AM_CREATES_EMPTY_JAR_FILE_ENTRY	3	FindBugs: Bad practice	The code calls 'putNextEntry()', immediately followed by a call to 'closeEntry()'.
COV_JAVA_FB.AM_CREATES_EMPTY_ZIP_FILE_ENTRY	3	FindBugs: Bad practice	The code calls 'putNextEntry()', immediately followed by a call to 'closeEntry()'.
COV_JAVA_FB.BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS	3	FindBugs: Bad practice	The 'equals(Object o)' method shouldn't make any assumptions about the type of 'o'.
COV_JAVA_FB.BIT_SIGNED_CHECK	3	FindBugs: Bad practice	This method compares an expression such as '((event.detail & SWT.SELECTED) > 0)'.
COV_JAVA_FB.CN_IDIOM	3	FindBugs: Bad practice	Class implements Cloneable but does not define or use the clone method.
COV_JAVA_FB.CN_IDIOM_NO_SUPER_CALL	3	FindBugs: Bad practice	This non-final class defines a clone() method that does not call super.clone().
COV_JAVA_FB.CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE	3	FindBugs: Bad practice	This class defines a clone() method but the class doesn't implement Cloneable.
COV_JAVA_FB.CO_ABSTRACT_SELF	3	FindBugs: Bad practice	This class defines a covariant version of 'compareTo()'.
COV_JAVA_FB.CO_COMPARETO_INCORRECT_FLOATING	3	FindBugs: Bad practice	This method compares double or float values using pattern like this: val1 > val2 ? 1 : val1 < val2 ? -1 : 0. This pattern works incorrectly for -0.0 and NaN values which may result in incorrect sorting result or broken collection (if compared values are used as keys). Consider using Double.compare or Float.compare static methods which handle all the special cases correctly.
COV_JAVA_FB.CO_SELF_NO_OBJECT	3	FindBugs: Bad practice	This class defines a covariant version of 'compareTo()'.
COV_JAVA_FB.DE_MIGHT_DROP	3	FindBugs: Bad practice	This method might drop an exception.
COV_JAVA_FB.DE_MIGHT_IGNORE	3	FindBugs: Bad practice	This method might ignore an exception.
COV_JAVA_FB.DM_BOXED_PRIMITIVE_FOR_COMPARE	5	FindBugs: Bad practice	A boxed primitive is created just to call compareTo method. It's more efficient to use static compare method (for double and float since Java 1.4, for other primitive types since Java 1.7) which works on primitives directly.
COV_JAVA_FB.DM_EXIT	3	FindBugs: Bad practice	Invoking System.exit shuts down the entire Java virtual machine.
COV_JAVA_FB.DM_RUN_FINALIZERS_ON_EXIT	3	FindBugs: Bad practice	<em>Never call System.runFinalizersOnExit or Runtime.runFinalizersOnExit for any reason: they are among the most dangerous methods in the Java libraries.</em> -- Joshua Bloch
COV_JAVA_FB.DMI_ENTRY_SETS_MAY_REUSE_ENTRY_OBJECTS	3	FindBugs: Bad practice	The entrySet() method is allowed to return a view of the underlying Map in which a single Entry object is reused and returned during the iteration.
COV_JAVA_FB.DMI_RANDOM_USED_ONLY_ONCE	3	FindBugs: Bad practice	This code creates a java.util.Random object, uses it to generate one random number, and then discards the Random object.
COV_JAVA_FB.DMI_USING_REMOVEALL_TO_CLEAR_COLLECTION	3	FindBugs: Bad practice	If you want to remove all elements from a collection 'c', use 'c.clear', not 'c.removeAll(c)'.
COV_JAVA_FB.EQ_ABSTRACT_SELF	3	FindBugs: Bad practice	This class defines a covariant version of 'equals()'.
COV_JAVA_FB.EQ_CHECK_FOR_OPERAND_NOT_COMPATIBLE_WITH_THIS	3	FindBugs: Bad practice	This equals method is checking to see if the argument is some incompatible type (i.e., a class that is neither a supertype nor subtype of the class that defines the equals method).
COV_JAVA_FB.EQ_COMPARETO_USE_OBJECT_EQUALS	3	FindBugs: Bad practice	This class defines a 'compareTo(...)' method but inherits its 'equals()' method from 'java.lang.Object'.
COV_JAVA_FB.EQ_GETCLASS_AND_CLASS_CONSTANT	3	FindBugs: Bad practice	This class has an equals method that will be broken if it is inherited by subclasses.
COV_JAVA_FB.EQ_SELF_NO_OBJECT	3	FindBugs: Bad practice	This class defines a covariant version of 'equals()'.
COV_JAVA_FB.ES_COMPARING_PARAMETER_STRING_WITH_EQ	3	FindBugs: Bad practice	This code compares a 'java.lang.String' parameter for reference equality using the == or != operators.
COV_JAVA_FB.ES_COMPARING_STRINGS_WITH_EQ	3	FindBugs: Bad practice	This code compares 'java.lang.String' objects for reference equality using the == or != operators.
COV_JAVA_FB.FI_EMPTY	3	FindBugs: Bad practice	Empty 'finalize()' methods are useless, so they should be deleted.
COV_JAVA_FB.FI_EXPLICIT_INVOCATION	3	FindBugs: Bad practice	This method contains an explicit invocation of the 'finalize()' method on an object.
COV_JAVA_FB.FI_FINALIZER_NULLS_FIELDS	3	FindBugs: Bad practice	This finalizer nulls out fields.
COV_JAVA_FB.FI_FINALIZER_ONLY_NULLS_FIELDS	3	FindBugs: Bad practice	This finalizer does nothing except null out fields.
COV_JAVA_FB.FI_MISSING_SUPER_CALL	3	FindBugs: Bad practice	This 'finalize()' method does not make a call to its superclass's 'finalize()' method.
COV_JAVA_FB.FI_NULLIFY_SUPER	3	FindBugs: Bad practice	This empty 'finalize()' method explicitly negates the effect of any finalizer defined by its superclass.
COV_JAVA_FB.FI_USELESS	3	FindBugs: Bad practice	The only thing this 'finalize()' method does is call the superclass's 'finalize()' method, making it redundant.
COV_JAVA_FB.GC_UNCHECKED_TYPE_IN_GENERIC_CALL	3	FindBugs: Bad practice	This call to a generic collection method passes an argument while compile type Object where a specific type from the generic type parameters is expected.
COV_JAVA_FB.HE_EQUALS_NO_HASHCODE	3	FindBugs: Bad practice	This class overrides 'equals(Object)', but does not override 'hashCode()'.
COV_JAVA_FB.HE_EQUALS_USE_HASHCODE	3	FindBugs: Bad practice	This class overrides 'equals(Object)', but does not override 'hashCode()', and inherits the implementation of 'hashCode()' from 'java.lang.Object' (which returns the identity hash code, an arbitrary value assigned to the object by the VM).
COV_JAVA_FB.HE_HASHCODE_NO_EQUALS	3	FindBugs: Bad practice	This class defines a 'hashCode()' method but not an 'equals()' method.
COV_JAVA_FB.HE_HASHCODE_USE_OBJECT_EQUALS	3	FindBugs: Bad practice	This class defines a 'hashCode()' method but inherits its 'equals()' method from 'java.lang.Object' (which defines equality by comparing object references).
COV_JAVA_FB.HE_INHERITS_EQUALS_USE_HASHCODE	3	FindBugs: Bad practice	This class inherits 'equals(Object)' from an abstract superclass, and 'hashCode()' from 'java.lang.Object' (which returns the identity hash code, an arbitrary value assigned to the object by the VM).
COV_JAVA_FB.IC_SUPERCLASS_USES_SUBCLASS_DURING_INITIALIZATION	3	FindBugs: Bad practice	During the initialization of a class, the class makes an active use of a subclass.
COV_JAVA_FB.IMSE_DONT_CATCH_IMSE	3	FindBugs: Bad practice	IllegalMonitorStateException is generally only thrown in case of a design flaw in your code (calling wait or notify on an object you do not hold a lock on).
COV_JAVA_FB.ISC_INSTANTIATE_STATIC_CLASS	3	FindBugs: Bad practice	This class allocates an object that is based on a class that only supplies static methods.
COV_JAVA_FB.IT_NO_SUCH_ELEMENT	3	FindBugs: Bad practice	This class implements the 'java.util.Iterator' interface.
COV_JAVA_FB.J2EE_STORE_OF_NON_SERIALIZABLE_OBJECT_INTO_SESSION	3	FindBugs: Bad practice	This code seems to be storing a non-serializable object into an HttpSession.
COV_JAVA_FB.JCIP_FIELD_ISNT_FINAL_IN_IMMUTABLE_CLASS	3	FindBugs: Bad practice	The class is annotated with net.jcip.annotations.Immutable, and the rules for that annotation require that all fields are final. .
COV_JAVA_FB.NM_CLASS_NAMING_CONVENTION	3	FindBugs: Bad practice	Class names should be nouns, in mixed case with the first letter of each internal word capitalized.
COV_JAVA_FB.NM_CLASS_NOT_EXCEPTION	3	FindBugs: Bad practice	This class is not derived from another exception, but ends with 'Exception'.
COV_JAVA_FB.NM_CONFUSING	3	FindBugs: Bad practice	The referenced methods have names that differ only by capitalization.
COV_JAVA_FB.NM_FIELD_NAMING_CONVENTION	3	FindBugs: Bad practice	Names of fields that are not final should be in mixed case with a lowercase first letter and the first letters of subsequent words capitalized.
COV_JAVA_FB.NM_FUTURE_KEYWORD_USED_AS_IDENTIFIER	3	FindBugs: Bad practice	The identifier is a word that is reserved as a keyword in later versions of Java, and your code will need to be changed in order to compile it in later versions of Java.
COV_JAVA_FB.NM_FUTURE_KEYWORD_USED_AS_MEMBER_IDENTIFIER	3	FindBugs: Bad practice	This identifier is used as a keyword in later versions of Java.
COV_JAVA_FB.NM_METHOD_NAMING_CONVENTION	3	FindBugs: Bad practice	Methods should be verbs, in mixed case with the first letter lowercase, with the first letter of each internal word capitalized.
COV_JAVA_FB.NM_SAME_SIMPLE_NAME_AS_INTERFACE	3	FindBugs: Bad practice	This class/interface has a simple name that is identical to that of an implemented/extended interface, except that the interface is in a different package (e.g., 'alpha.Foo' extends 'beta.Foo').
COV_JAVA_FB.NM_SAME_SIMPLE_NAME_AS_SUPERCLASS	3	FindBugs: Bad practice	This class has a simple name that is identical to that of its superclass, except that its superclass is in a different package (e.g., 'alpha.Foo' extends 'beta.Foo').
COV_JAVA_FB.NM_VERY_CONFUSING_INTENTIONAL	3	FindBugs: Bad practice	The referenced methods have names that differ only by capitalization.
COV_JAVA_FB.NM_WRONG_PACKAGE_INTENTIONAL	3	FindBugs: Bad practice	The method in the subclass doesn't override a similar method in a superclass because the type of a parameter doesn't exactly match the type of the corresponding parameter in the superclass.
COV_JAVA_FB.NP_BOOLEAN_RETURN_NULL	3	FindBugs: Bad practice	A method that returns either Boolean.TRUE, Boolean.FALSE or null is an accident waiting to happen.
COV_JAVA_FB.NP_CLONE_COULD_RETURN_NULL	3	FindBugs: Bad practice	This clone method seems to return null in some circumstances, but clone is never allowed to return a null value.
COV_JAVA_FB.NP_DOES_NOT_HANDLE_NULL	3	FindBugs: Bad practice	This implementation of equals(Object) violates the contract defined by java.lang.Object.equals() because it does not check for null being passed as the parameter.
COV_JAVA_FB.NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT	3	FindBugs: Bad practice	This implementation of equals(Object) violates the contract defined by java.lang.Object.equals() because it does not check for null being passed as the argument.
COV_JAVA_FB.NP_TOSTRING_COULD_RETURN_NULL	3	FindBugs: Bad practice	This toString method seems to return null in some circumstances.
COV_JAVA_FB.ODR_OPEN_DATABASE_RESOURCE	3	FindBugs: Bad practice	The method creates a database resource (such as a database connection or row set), does not assign it to any fields, pass it to other methods, or return it, and does not appear to close the object on all paths out of the method.
COV_JAVA_FB.ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH	3	FindBugs: Bad practice	The method creates a database resource (such as a database connection or row set), does not assign it to any fields, pass it to other methods, or return it, and does not appear to close the object on all exception paths out of the method.
COV_JAVA_FB.OS_OPEN_STREAM	3	FindBugs: Bad practice	The method creates an IO stream object, does not assign it to any fields, pass it to other methods that might close it, or return it, and does not appear to close the stream on all paths out of the method.
COV_JAVA_FB.OS_OPEN_STREAM_EXCEPTION_PATH	3	FindBugs: Bad practice	The method creates an IO stream object, does not assign it to any fields, pass it to other methods, or return it, and does not appear to close it on all possible exception paths out of the method.
COV_JAVA_FB.PZ_DONT_REUSE_ENTRY_OBJECTS_IN_ITERATORS	3	FindBugs: Bad practice	The entrySet() method is allowed to return a view of the underlying Map which is both an Iterator and Map.Entry.
COV_JAVA_FB.RC_REF_COMPARISON_BAD_PRACTICE	3	FindBugs: Bad practice	This method compares a reference value to a constant using the == or != operator, where the correct way to compare instances of this type is generally with the equals() method.
COV_JAVA_FB.RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN	3	FindBugs: Bad practice	This method compares two Boolean values using the == or != operator.
COV_JAVA_FB.RR_NOT_CHECKED	3	FindBugs: Bad practice	This method ignores the return value of one of the variants of 'java.io.InputStream.read()' which can return multiple bytes.
COV_JAVA_FB.RV_NEGATING_RESULT_OF_COMPARETO	3	FindBugs: Bad practice	This code negatives the return value of a compareTo or compare method.
COV_JAVA_FB.RV_RETURN_VALUE_IGNORED_BAD_PRACTICE	3	FindBugs: Bad practice	This method returns a value that is not checked.
COV_JAVA_FB.RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT	3	FindBugs: Bad practice	This method returns a value that is not checked. The return value should be checked since it can indicate an unusual or unexpected function execution. For example, the File.delete() method returns false if the file could not be successfully deleted (rather than throwing an Exception). If you don't check the result, you won't notice if the method invocation signals unexpected behavior by returning an atypical return value.
COV_JAVA_FB.SE_BAD_FIELD	3	FindBugs: Bad practice	This Serializable class defines a non-primitive instance field which is neither transient, Serializable, or 'java.lang.Object', and does not appear to implement the 'Externalizable' interface or the 'readObject()' and 'writeObject()' methods.
COV_JAVA_FB.SE_BAD_FIELD_INNER_CLASS	3	FindBugs: Bad practice	This Serializable class is an inner class of a non-serializable class.
COV_JAVA_FB.SE_BAD_FIELD_STORE	3	FindBugs: Bad practice	A non-serializable value is stored into a non-transient field of a serializable class.
COV_JAVA_FB.SE_COMPARATOR_SHOULD_BE_SERIALIZABLE	3	FindBugs: Bad practice	Because this class implements the 'Comparator' interface, you should consider whether or not it should also implement the 'Serializable' interface.
COV_JAVA_FB.SE_INNER_CLASS	3	FindBugs: Bad practice	This Serializable class is an inner class.
COV_JAVA_FB.SE_NO_SERIALVERSIONID	3	FindBugs: Bad practice	This class implements the 'Serializable' interface, but does not define a 'serialVersionUID' field.
COV_JAVA_FB.SE_NO_SUITABLE_CONSTRUCTOR	3	FindBugs: Bad practice	This class implements the 'Serializable' interface and its superclass does not.
COV_JAVA_FB.SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION	3	FindBugs: Bad practice	This class implements the 'Externalizable' interface, but does not define a void constructor.
COV_JAVA_FB.SE_NONFINAL_SERIALVERSIONID	3	FindBugs: Bad practice	This class defines a 'serialVersionUID' field that is not final.
COV_JAVA_FB.SE_NONLONG_SERIALVERSIONID	3	FindBugs: Bad practice	This class defines a 'serialVersionUID' field that is not long.
COV_JAVA_FB.SE_NONSTATIC_SERIALVERSIONID	3	FindBugs: Bad practice	This class defines a 'serialVersionUID' field that is not static.
COV_JAVA_FB.SE_READ_RESOLVE_MUST_RETURN_OBJECT	3	FindBugs: Bad practice	In order for the readResolve method to be recognized by the serialization mechanism, it must be declared to have a return type of Object.
COV_JAVA_FB.SE_TRANSIENT_FIELD_NOT_RESTORED	3	FindBugs: Bad practice	This class contains a field that is updated at multiple places in the class, thus it seems to be part of the state of the class.
COV_JAVA_FB.SI_INSTANCE_BEFORE_FINALS_ASSIGNED	3	FindBugs: Bad practice	The class's static initializer creates an instance of the class before all of the static fields are assigned.
COV_JAVA_FB.SR_NOT_CHECKED	3	FindBugs: Bad practice	This method ignores the return value of 'java.io.InputStream.skip()' which can skip multiple bytes.
COV_JAVA_FB.SW_SWING_METHODS_INVOKED_IN_SWING_THREAD	3	FindBugs: Bad practice	SW: Swing coding rules
COV_JAVA_FB.UC_USELESS_OBJECT	2	FindBugs: Bad practice	Useless object created and modified (stored), it's value never go outside of the method or produce any side-effect. Either there is a mistake and object was intented to be used or it can be removed.
COV_JAVA_FB.UC_USELESS_OBJECT_STACK	2	FindBugs: Bad practice	Useless object created
COV_JAVA_FB.UC_USELESS_VOID_METHOD	1	FindBugs: Bad practice	Useless non-empty void method
COV_JAVA_FB.UI_INHERITANCE_UNSAFE_GETRESOURCE	3	FindBugs: Bad practice	Calling 'this.getClass().getResource(...)' could give results other than expected if this class is extended by a class in another package.
COV_JAVA_FB.VA_FORMAT_STRING_USES_NEWLINE	3	FindBugs: Bad practice	This format string include a newline character (\n).

COV_JAVA_FB.NOISE_FIELD_REFERENCE	3	FindBugs: Bogus random noise	Bogus warning.
COV_JAVA_FB.NOISE_METHOD_CALL	3	FindBugs: Bogus random noise	Bogus warning.
COV_JAVA_FB.NOISE_NULL_DEREFERENCE	3	FindBugs: Bogus random noise	Bogus warning.
COV_JAVA_FB.NOISE_OPERATION	3	FindBugs: Bogus random noise	Bogus warning.

COV_JAVA_FB.BAC_BAD_APPLET_CONSTRUCTOR	2	FindBugs: Correctness	This constructor calls methods in the parent Applet that rely on the AppletStub. (FindBugs Experimental)
COV_JAVA_FB.BC_IMPOSSIBLE_CAST	2	FindBugs: Correctness	This cast will always throw a ClassCastException.
COV_JAVA_FB.BC_IMPOSSIBLE_CAST_PRIMITIVE_ARRAY	3	FindBugs: Correctness	This cast will always throw a ClassCastException. (FindBugs Deprecated)
COV_JAVA_FB.BC_IMPOSSIBLE_DOWNCAST	2	FindBugs: Correctness	This cast will always throw a ClassCastException.
COV_JAVA_FB.BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY	2	FindBugs: Correctness	This code is casting the result of calling 'toArray()' on a collection to a type more specific than 'Object[]'.
COV_JAVA_FB.BC_IMPOSSIBLE_INSTANCEOF	2	FindBugs: Correctness	This instanceof test will always return false.
COV_JAVA_FB.BC_NULL_INSTANCEOF	3	FindBugs: Correctness	This instanceof test will always return false, since the value being checked is guaranteed to be null. (FindBugs Deprecated) (FindBugs Experimental)
COV_JAVA_FB.BIT_ADD_OF_SIGNED_BYTE	2	FindBugs: Correctness	Adds a byte value and a value which is known to have the 8 lower bits clear.
COV_JAVA_FB.BIT_AND	2	FindBugs: Correctness	This method compares an expression of the form (e & C) to D, which will always compare unequal due to the specific values of constants C and D.
COV_JAVA_FB.BIT_AND_ZZ	2	FindBugs: Correctness	This method compares an expression of the form (e & 0) to 0, which will always compare equal.
COV_JAVA_FB.BIT_IOR	2	FindBugs: Correctness	This method compares an expression of the form (e | C) to D, which will always compare unequal due to the specific values of constants C and D.
COV_JAVA_FB.BIT_IOR_OF_SIGNED_BYTE	2	FindBugs: Correctness	Loads a byte value (e.g., a value loaded from a byte array or returned by a method with return type byte) and performs a bitwise OR with that value.
COV_JAVA_FB.BIT_SIGNED_CHECK_HIGH_BIT	2	FindBugs: Correctness	This method compares an expression such as '((event.detail & SWT.SELECTED) > 0)'.
COV_JAVA_FB.BOA_BADLY_OVERRIDDEN_ADAPTER	2	FindBugs: Correctness	The declared method does not actually override a method from Adapter parent class, as its name suggests.
COV_JAVA_FB.BRSA_BAD_RESULTSET_ACCESS	3	FindBugs: Correctness	A call to getXXX or updateXXX methods of a result set was made where the field index is 0. (FindBugs Deprecated) (FindBugs Experimental)
COV_JAVA_FB.BX_UNBOXED_AND_COERCED_FOR_TERNARY_OPERATOR	2	FindBugs: Correctness	A wrapped primitive value is unboxed and converted to another primitive type as part of the evaluation of a conditional ternary operator (the ' b ? e1 : e2' operator).
COV_JAVA_FB.CO_COMPARETO_RESULTS_MIN_VALUE	2	FindBugs: Correctness	In some situation, this compareTo or compare method returns the constant Integer.MIN_VALUE, which is an exceptionally bad practice.
COV_JAVA_FB.DLS_DEAD_LOCAL_INCREMENT_IN_RETURN	2	FindBugs: Correctness	This statement has a return such as 'return x++;'.
COV_JAVA_FB.DLS_DEAD_STORE_OF_CLASS_LITERAL	2	FindBugs: Correctness	This instruction assigns a class literal to a variable and then never uses it.
COV_JAVA_FB.DLS_OVERWRITTEN_INCREMENT	2	FindBugs: Correctness	The code performs an increment operation (e.g., 'i++') and then immediately overwrites it.
COV_JAVA_FB.DMI_ANNOTATION_IS_NOT_VISIBLE_TO_REFLECTION	2	FindBugs: Correctness	Unless an annotation has itself been annotated with @Retention(RetentionPolicy.RUNTIME), the annotation can't be observed using reflection (e.g., by using the isAnnotationPresent method). .
COV_JAVA_FB.DMI_ARGUMENTS_WRONG_ORDER	2	FindBugs: Correctness	The arguments to this method call seem to be in the wrong order.
COV_JAVA_FB.DMI_BAD_MONTH	2	FindBugs: Correctness	This code passes a constant month value outside the expected range of 0..11 to a method.
COV_JAVA_FB.DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE	2	FindBugs: Correctness	This code creates a BigDecimal from a double value that doesn't translate well to a decimal number.
COV_JAVA_FB.DMI_CALLING_NEXT_FROM_HASNEXT	2	FindBugs: Correctness	The hasNext() method invokes the next() method.
COV_JAVA_FB.DMI_COLLECTIONS_SHOULD_NOT_CONTAIN_THEMSELVES	2	FindBugs: Correctness	This call to a generic collection's method would only make sense if a collection contained itself (e.g., if 's.contains(s)' were true).
COV_JAVA_FB.DMI_DOH	2	FindBugs: Correctness	This partical method invocation doesn't make sense, for reasons that should be apparent from inspection.
COV_JAVA_FB.DMI_FUTILE_ATTEMPT_TO_CHANGE_MAXPOOL_SIZE_OF_SCHEDULED_THREAD_POOL_EXECUTOR	2	FindBugs: Correctness	Dm: Dubious method used
COV_JAVA_FB.DMI_INVOKING_HASHCODE_ON_ARRAY	2	FindBugs: Correctness	The code invokes hashCode on an array.
COV_JAVA_FB.DMI_INVOKING_TOSTRING_ON_ANONYMOUS_ARRAY	2	FindBugs: Correctness	The code invokes toString on an (anonymous) array.
COV_JAVA_FB.DMI_INVOKING_TOSTRING_ON_ARRAY	2	FindBugs: Correctness	The code invokes toString on an array, which will generate a fairly useless result such as [C@16f0472.
COV_JAVA_FB.DMI_LONG_BITS_TO_DOUBLE_INVOKED_ON_INT	2	FindBugs: Correctness	The Double.longBitsToDouble method is invoked, but a 32 bit int value is passed as an argument.
COV_JAVA_FB.DMI_SCHEDULED_THREAD_POOL_EXECUTOR_WITH_ZERO_CORE_THREADS	2	FindBugs: Correctness	Dm: Dubious method used
COV_JAVA_FB.DMI_VACUOUS_CALL_TO_EASYMOCK_METHOD	2	FindBugs: Correctness	This call doesn't pass any objects to the EasyMock method, so the call doesn't do anything.
COV_JAVA_FB.DMI_VACUOUS_SELF_COLLECTION_CALL	2	FindBugs: Correctness	This call doesn't make sense.
COV_JAVA_FB.EC_ARRAY_AND_NONARRAY	2	FindBugs: Correctness	This method invokes the .equals(Object o) to compare an array and a reference that doesn't seem to be an array.
COV_JAVA_FB.EC_BAD_ARRAY_COMPARE	2	FindBugs: Correctness	This method invokes the .equals(Object o) method on an array.
COV_JAVA_FB.EC_INCOMPATIBLE_ARRAY_COMPARE	2	FindBugs: Correctness	This method invokes the .equals(Object o) to compare two arrays, but the arrays of incompatible types (e.g., String[] and StringBuffer[], or String[] and int[]).
COV_JAVA_FB.EC_NULL_ARG	2	FindBugs: Correctness	This method calls equals(Object), passing a null value as the argument.
COV_JAVA_FB.EC_UNRELATED_CLASS_AND_INTERFACE	2	FindBugs: Correctness	This method calls equals(Object) on two references, one of which is a class and the other an interface, where neither the class nor any of its non-abstract subclasses implement the interface.
COV_JAVA_FB.EC_UNRELATED_INTERFACES	2	FindBugs: Correctness	This method calls equals(Object) on two references of unrelated interface types, where neither is a subtype of the other, and there are no known non-abstract classes which implement both interfaces.
COV_JAVA_FB.EC_UNRELATED_TYPES	2	FindBugs: Correctness	This method calls equals(Object) on two references of different class types with no common subclasses.
COV_JAVA_FB.EC_UNRELATED_TYPES_USING_POINTER_EQUALITY	2	FindBugs: Correctness	This method uses pointer equality to compare two references that seem to be of different types.
COV_JAVA_FB.EQ_ALWAYS_FALSE	2	FindBugs: Correctness	This class defines an equals method that always returns false.
COV_JAVA_FB.EQ_ALWAYS_TRUE	2	FindBugs: Correctness	This class defines an equals method that always returns true.
COV_JAVA_FB.EQ_COMPARING_CLASS_NAMES	2	FindBugs: Correctness	This method checks to see if two objects are the same class by checking to see if the names of their classes are equal.
COV_JAVA_FB.EQ_DONT_DEFINE_EQUALS_FOR_ENUM	2	FindBugs: Correctness	This class defines an enumeration, and equality on enumerations are defined using object identity.
COV_JAVA_FB.EQ_OTHER_NO_OBJECT	2	FindBugs: Correctness	This class defines an 'equals()' method, that doesn't override the normal 'equals(Object)' method defined in the base 'java.lang.Object' class.
COV_JAVA_FB.EQ_OTHER_USE_OBJECT	2	FindBugs: Correctness	This class defines an 'equals()' method, that doesn't override the normal 'equals(Object)' method defined in the base 'java.lang.Object' class.
COV_JAVA_FB.EQ_OVERRIDING_EQUALS_NOT_SYMMETRIC	2	FindBugs: Correctness	This class defines an equals method that overrides an equals method in a superclass.
COV_JAVA_FB.EQ_SELF_USE_OBJECT	2	FindBugs: Correctness	This class defines a covariant version of the 'equals()' method, but inherits the normal 'equals(Object)' method defined in the base 'java.lang.Object' class.
COV_JAVA_FB.FB_MISSING_EXPECTED_WARNING	2	FindBugs: Correctness	FindBugs didn't generate a warning that, according to a @ExpectedWarning annotated, is expected or desired
COV_JAVA_FB.FB_UNEXPECTED_WARNING	2	FindBugs: Correctness	FindBugs generated a warning that, according to a @NoWarning annotated, is unexpected or undesired
COV_JAVA_FB.FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER	2	FindBugs: Correctness	This code checks to see if a floating point value is equal to the special Not A Number value (e.g., 'if (x == Double.NaN)').
COV_JAVA_FB.FL_MATH_USING_FLOAT_PRECISION	2	FindBugs: Correctness	The method performs math operations using floating point precision.
COV_JAVA_FB.GC_UNRELATED_TYPES	2	FindBugs: Correctness	This call to a generic collection method contains an argument with an incompatible class from that of the collection's parameter (i.e., the type of the argument is neither a supertype nor a subtype of the corresponding generic type argument).
COV_JAVA_FB.HE_SIGNATURE_DECLARES_HASHING_OF_UNHASHABLE_CLASS	2	FindBugs: Correctness	A method, field or class declares a generic signature where a non-hashable class is used in context where a hashable class is required.
COV_JAVA_FB.HE_USE_OF_UNHASHABLE_CLASS	2	FindBugs: Correctness	A class defines an equals(Object) method but not a hashCode() method, and thus doesn't fulfill the requirement that equal objects have equal hashCodes.
COV_JAVA_FB.ICAST_BAD_SHIFT_AMOUNT	2	FindBugs: Correctness	The code performs shift of a 32 bit int by a constant amount outside the range 0..31.
COV_JAVA_FB.ICAST_INT_2_LONG_AS_INSTANT	2	FindBugs: Correctness	This code converts a 32-bit int value to a 64-bit long value, and then passes that value for a method parameter that requires an absolute time value.
COV_JAVA_FB.ICAST_INT_CAST_TO_DOUBLE_PASSED_TO_CEIL	2	FindBugs: Correctness	This code converts an integral value (e.g., int or long) to a double precision floating point number and then passing the result to the Math.ceil() function, which rounds a double to the next higher integer value.
COV_JAVA_FB.ICAST_INT_CAST_TO_FLOAT_PASSED_TO_ROUND	2	FindBugs: Correctness	This code converts an int value to a float precision floating point number and then passing the result to the Math.round() function, which returns the int/long closest to the argument.
COV_JAVA_FB.IJU_ASSERT_METHOD_INVOKED_FROM_RUN_METHOD	2	FindBugs: Correctness	A JUnit assertion is performed in a run method.
COV_JAVA_FB.IJU_BAD_SUITE_METHOD	2	FindBugs: Correctness	Class is a JUnit TestCase and defines a suite() method.
COV_JAVA_FB.IJU_NO_TESTS	2	FindBugs: Correctness	Class is a JUnit TestCase but has not implemented any test methods
COV_JAVA_FB.IJU_SETUP_NO_SUPER	2	FindBugs: Correctness	Class is a JUnit TestCase and implements the setUp method.
COV_JAVA_FB.IJU_SUITE_NOT_STATIC	2	FindBugs: Correctness	Class is a JUnit TestCase and implements the suite() method.
COV_JAVA_FB.IJU_TEARDOWN_NO_SUPER	2	FindBugs: Correctness	Class is a JUnit TestCase and implements the tearDown method.
COV_JAVA_FB.IL_CONTAINER_ADDED_TO_ITSELF	2	FindBugs: Correctness	A collection is added to itself.
COV_JAVA_FB.IL_INFINITE_LOOP	2	FindBugs: Correctness	This loop doesn't seem to have a way to terminate (other than by perhaps throwing an exception).
COV_JAVA_FB.IL_INFINITE_RECURSIVE_LOOP	2	FindBugs: Correctness	This method unconditionally invokes itself.
COV_JAVA_FB.IM_MULTIPLYING_RESULT_OF_IREM	2	FindBugs: Correctness	The code multiplies the result of an integer remaining by an integer constant.
COV_JAVA_FB.INT_BAD_COMPARISON_WITH_INT_VALUE	2	FindBugs: Correctness	This code compares an int value with a long constant that is outside the range of values that can be represented as an int value.
COV_JAVA_FB.INT_BAD_COMPARISON_WITH_NONNEGATIVE_VALUE	2	FindBugs: Correctness	This code compares a value that is guaranteed to be non-negative with a negative constant.
COV_JAVA_FB.INT_BAD_COMPARISON_WITH_SIGNED_BYTE	2	FindBugs: Correctness	Signed bytes can only have a value in the range -128 to 127.
COV_JAVA_FB.IO_APPENDING_TO_OBJECT_OUTPUT_STREAM	2	FindBugs: Correctness	This code opens a file in append mode and then wraps the result in an object output stream.
COV_JAVA_FB.IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN	2	FindBugs: Correctness	The initial value of this parameter is ignored, and the parameter is overwritten here.
COV_JAVA_FB.MF_CLASS_MASKS_FIELD	2	FindBugs: Correctness	This class defines a field with the same name as a visible instance field in a superclass.
COV_JAVA_FB.MF_METHOD_MASKS_FIELD	2	FindBugs: Correctness	This method defines a local variable with the same name as a field in this class or a superclass.
COV_JAVA_FB.NM_BAD_EQUAL	2	FindBugs: Correctness	This class defines a method 'equal(Object)'.
COV_JAVA_FB.NM_LCASE_HASHCODE	2	FindBugs: Correctness	This class defines a method called 'hashcode()'.
COV_JAVA_FB.NM_LCASE_TOSTRING	2	FindBugs: Correctness	This class defines a method called 'tostring()'.
COV_JAVA_FB.NM_METHOD_CONSTRUCTOR_CONFUSION	2	FindBugs: Correctness	This regular method has the same name as the class it is defined in.
COV_JAVA_FB.NM_VERY_CONFUSING	2	FindBugs: Correctness	The referenced methods have names that differ only by capitalization.
COV_JAVA_FB.NM_WRONG_PACKAGE	2	FindBugs: Correctness	The method in the subclass doesn't override a similar method in a superclass because the type of a parameter doesn't exactly match the type of the corresponding parameter in the superclass.
COV_JAVA_FB.NP_ALWAYS_NULL	2	FindBugs: Correctness	A null pointer is dereferenced here.
COV_JAVA_FB.NP_ALWAYS_NULL_EXCEPTION	2	FindBugs: Correctness	A pointer which is null on an exception path is dereferenced here.
COV_JAVA_FB.NP_ARGUMENT_MIGHT_BE_NULL	2	FindBugs: Correctness	A parameter to this method has been identified as a value that should always be checked to see whether or not it is null, but it is being dereferenced without a preceding null check.
COV_JAVA_FB.NP_CLOSING_NULL	2	FindBugs: Correctness	close() is being invoked on a value that is always null.
COV_JAVA_FB.NP_GUARANTEED_DEREF	2	FindBugs: Correctness	There is a statement or branch that if executed guarantees that a value is null at this point, and that value that is guaranteed to be dereferenced (except on forward paths involving runtime exceptions).
COV_JAVA_FB.NP_GUARANTEED_DEREF_ON_EXCEPTION_PATH	2	FindBugs: Correctness	There is a statement or branch on an exception path that if executed guarantees that a value is null at this point, and that value that is guaranteed to be dereferenced (except on forward paths involving runtime exceptions).
COV_JAVA_FB.NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR	2	FindBugs: Correctness	The field is marked as nonnull, but isn't written to by the constructor.
COV_JAVA_FB.NP_NONNULL_PARAM_VIOLATION	2	FindBugs: Correctness	This method passes a null value as the parameter of a method which must be nonnull.
COV_JAVA_FB.NP_NONNULL_RETURN_VIOLATION	2	FindBugs: Correctness	This method may return a null value, but the method (or a superclass method which it overrides) is declared to return @NonNull.
COV_JAVA_FB.NP_NULL_INSTANCEOF	2	FindBugs: Correctness	This instanceof test will always return false, since the value being checked is guaranteed to be null.
COV_JAVA_FB.NP_NULL_ON_SOME_PATH	2	FindBugs: Correctness	There is a branch of statement that, <em>if executed,</em> guarantees that a null value will be dereferenced, which would generate a 'NullPointerException' when the code is executed.
COV_JAVA_FB.NP_NULL_ON_SOME_PATH_EXCEPTION	2	FindBugs: Correctness	A reference value which is null on some exception control path is dereferenced here.
COV_JAVA_FB.NP_NULL_PARAM_DEREF	2	FindBugs: Correctness	This method call passes a null value for a nonnull method parameter.
COV_JAVA_FB.NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS	2	FindBugs: Correctness	A possibly-null value is passed at a call site where all known target methods require the parameter to be nonnull.
COV_JAVA_FB.NP_NULL_PARAM_DEREF_NONVIRTUAL	2	FindBugs: Correctness	A possibly-null value is passed to a nonnull method parameter.
COV_JAVA_FB.NP_OPTIONAL_RETURN_NULL	2	FindBugs: Correctness	The usage of Optional return type always mean that explicit null returns were not desired by design.
COV_JAVA_FB.NP_STORE_INTO_NONNULL_FIELD	2	FindBugs: Correctness	A value that could be null is stored into a field that has been annotated as NonNull.
COV_JAVA_FB.NP_UNWRITTEN_FIELD	2	FindBugs: Correctness	The program is dereferencing a field that does not seem to ever have a non-null value written to it.
COV_JAVA_FB.QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT	2	FindBugs: Correctness	This method assigns a literal boolean value (true or false) to a boolean variable inside an if or while expression.
COV_JAVA_FB.RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE	2	FindBugs: Correctness	A value is checked here to see whether it is null, but this value can't be null because it was previously dereferenced and if it were null a null pointer exception would have occurred at the earlier dereference.
COV_JAVA_FB.RC_REF_COMPARISON	2	FindBugs: Correctness	This method compares two reference values using the == or != operator, where the correct way to compare instances of this type is generally with the equals() method.
COV_JAVA_FB.RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION	2	FindBugs: Correctness	The code here uses a regular expression that is invalid according to the syntax for regular expressions.
COV_JAVA_FB.RE_CANT_USE_FILE_SEPARATOR_AS_REGULAR_EXPRESSION	2	FindBugs: Correctness	The code here uses 'File.separator' where a regular expression is required.
COV_JAVA_FB.RE_POSSIBLE_UNINTENDED_PATTERN	2	FindBugs: Correctness	A String function is being invoked and "." is being passed to a parameter that takes a regular expression as an argument.
COV_JAVA_FB.RPC_REPEATED_CONDITIONAL_TEST	2	FindBugs: Correctness	The code contains a conditional test is performed twice, one right after the other (e.g., 'x == 0 || x == 0').
COV_JAVA_FB.RV_01_TO_INT	2	FindBugs: Correctness	A random value from 0 to 1 is being coerced to the integer value 0.
COV_JAVA_FB.RV_ABSOLUTE_VALUE_OF_HASHCODE	2	FindBugs: Correctness	This code generates a hashcode and then computes the absolute value of that hashcode.
COV_JAVA_FB.RV_ABSOLUTE_VALUE_OF_RANDOM_INT	2	FindBugs: Correctness	This code generates a random signed integer and then computes the absolute value of that random integer.
COV_JAVA_FB.RV_CHECK_COMPARETO_FOR_SPECIFIC_RETURN_VALUE	2	FindBugs: Correctness	This code invoked a compareTo or compare method, and checks to see if the return value is a specific value, such as 1 or -1.
COV_JAVA_FB.RV_EXCEPTION_NOT_THROWN	2	FindBugs: Correctness	This code creates an exception (or error) object, but doesn't do anything with it.
COV_JAVA_FB.RV_RETURN_VALUE_IGNORED	2	FindBugs: Correctness	The return value of this method should be checked.
COV_JAVA_FB.RV_RETURN_VALUE_IGNORED2	2	FindBugs: Correctness	The return value of this method should be checked.
COV_JAVA_FB.SA_FIELD_SELF_ASSIGNMENT	2	FindBugs: Correctness	This method contains a self assignment of a field; e.g.
COV_JAVA_FB.SA_FIELD_SELF_COMPARISON	2	FindBugs: Correctness	This method compares a field with itself, and may indicate a typo or a logic error.
COV_JAVA_FB.SA_FIELD_SELF_COMPUTATION	2	FindBugs: Correctness	This method performs a nonsensical computation of a field with another reference to the same field (e.g., x&x or x-x).
COV_JAVA_FB.SA_LOCAL_SELF_ASSIGNMENT_INSTEAD_OF_FIELD	2	FindBugs: Correctness	This method contains a self assignment of a local variable, and there is a field with an identical name.
COV_JAVA_FB.SA_LOCAL_SELF_COMPARISON	2	FindBugs: Correctness	This method compares a local variable with itself, and may indicate a typo or a logic error.
COV_JAVA_FB.SA_LOCAL_SELF_COMPUTATION	2	FindBugs: Correctness	This method performs a nonsensical computation of a local variable with another reference to the same variable (e.g., x&x or x-x).
COV_JAVA_FB.SE_METHOD_MUST_BE_PRIVATE	2	FindBugs: Correctness	This class implements the 'Serializable' interface, and defines a method for custom serialization/deserialization.
COV_JAVA_FB.SE_READ_RESOLVE_IS_STATIC	2	FindBugs: Correctness	In order for the readResolve method to be recognized by the serialization mechanism, it must not be declared as a static method.
COV_JAVA_FB.SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH	2	FindBugs: Correctness	A value stored in the previous switch case is overwritten here due to a switch fall through.
COV_JAVA_FB.SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH_TO_THROW	2	FindBugs: Correctness	A value stored in the previous switch case is ignored here due to a switch fall through to a place where an exception is thrown.
COV_JAVA_FB.SIC_THREADLOCAL_DEADLY_EMBRACE	2	FindBugs: Correctness	This class is an inner class, but should probably be a static inner class.
COV_JAVA_FB.SIO_SUPERFLUOUS_INSTANCEOF	2	FindBugs: Correctness	Type check performed using the instanceof operator where it can be statically determined whether the object is of the type requested.
COV_JAVA_FB.SQL_BAD_PREPARED_STATEMENT_ACCESS	2	FindBugs: Correctness	A call to a setXXX method of a prepared statement was made where the parameter index is 0.
COV_JAVA_FB.SQL_BAD_RESULTSET_ACCESS	2	FindBugs: Correctness	A call to getXXX or updateXXX methods of a result set was made where the field index is 0.
COV_JAVA_FB.STI_INTERRUPTED_ON_CURRENTTHREAD	2	FindBugs: Correctness	This method invokes the Thread.currentThread() call, just to call the interrupted() method.
COV_JAVA_FB.STI_INTERRUPTED_ON_UNKNOWNTHREAD	2	FindBugs: Correctness	This method invokes the Thread.interrupted() method on a Thread object that appears to be a Thread object that is not the current thread.
COV_JAVA_FB.TQ_ALWAYS_VALUE_USED_WHERE_NEVER_REQUIRED	2	FindBugs: Correctness	A value specified as carrying a type qualifier annotation is consumed in a location or locations requiring that the value not carry that annotation.
COV_JAVA_FB.TQ_COMPARING_VALUES_WITH_INCOMPATIBLE_TYPE_QUALIFIERS	2	FindBugs: Correctness	A value specified as carrying a type qualifier annotation is compared with a value that doesn't ever carry that qualifier.
COV_JAVA_FB.TQ_MAYBE_SOURCE_VALUE_REACHES_ALWAYS_SINK	2	FindBugs: Correctness	A value that is annotated as possibility not being an instance of the values denoted by the type qualifier, and the value is guaranteed to be used in a way that requires values denoted by that type qualifier.
COV_JAVA_FB.TQ_MAYBE_SOURCE_VALUE_REACHES_NEVER_SINK	2	FindBugs: Correctness	A value that is annotated as possibility being an instance of the values denoted by the type qualifier, and the value is guaranteed to be used in a way that prohibits values denoted by that type qualifier.
COV_JAVA_FB.TQ_NEVER_VALUE_USED_WHERE_ALWAYS_REQUIRED	2	FindBugs: Correctness	A value specified as not carrying a type qualifier annotation is guaranteed to be consumed in a location or locations requiring that the value does carry that annotation.
COV_JAVA_FB.TQ_UNKNOWN_VALUE_USED_WHERE_ALWAYS_STRICTLY_REQUIRED	2	FindBugs: Correctness	A value is being used in a way that requires the value be annotation with a type qualifier.
COV_JAVA_FB.UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS	2	FindBugs: Correctness	This anonymous class defined a method that is not directly invoked and does not override a method in a superclass.
COV_JAVA_FB.UR_UNINIT_READ	2	FindBugs: Correctness	This constructor reads a field which has not yet been assigned a value.
COV_JAVA_FB.UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR	2	FindBugs: Correctness	This method is invoked in the constructor of the superclass.
COV_JAVA_FB.UWF_NULL_FIELD	2	FindBugs: Correctness	All writes to this field are of the constant value null, and thus all reads of the field will return null.
COV_JAVA_FB.UWF_UNWRITTEN_FIELD	2	FindBugs: Correctness	This field is never written.
COV_JAVA_FB.VA_FORMAT_STRING_ARG_MISMATCH	3	FindBugs: Correctness	A format-string method with a variable number of arguments is called, but the number of arguments passed does not match with the number of % placeholders in the format string. (FindBugs Deprecated)
COV_JAVA_FB.VA_FORMAT_STRING_BAD_ARGUMENT	2	FindBugs: Correctness	The format string placeholder is incompatible with the corresponding argument.
COV_JAVA_FB.VA_FORMAT_STRING_BAD_CONVERSION	2	FindBugs: Correctness	One of the arguments is incompatible with the corresponding format string specifier.
COV_JAVA_FB.VA_FORMAT_STRING_BAD_CONVERSION_FROM_ARRAY	2	FindBugs: Correctness	One of the arguments being formatted with a format string is an array.
COV_JAVA_FB.VA_FORMAT_STRING_EXPECTED_MESSAGE_FORMAT_SUPPLIED	2	FindBugs: Correctness	A method is called that expects a Java printf format string and a list of arguments.
COV_JAVA_FB.VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED	2	FindBugs: Correctness	A format-string method with a variable number of arguments is called, but more arguments are passed than are actually used by the format string.
COV_JAVA_FB.VA_FORMAT_STRING_ILLEGAL	2	FindBugs: Correctness	The format string is syntactically invalid, and a runtime exception will occur when this statement is executed.
COV_JAVA_FB.VA_FORMAT_STRING_MISSING_ARGUMENT	2	FindBugs: Correctness	Not enough arguments are passed to satisfy a placeholder in the format string.
COV_JAVA_FB.VA_FORMAT_STRING_NO_PREVIOUS_ARGUMENT	2	FindBugs: Correctness	The format string specifies a relative index to request that the argument for the previous format specifier be reused.
COV_JAVA_FB.VA_PRIMITIVE_ARRAY_PASSED_TO_OBJECT_VARARG	2	FindBugs: Correctness	This code passes a primitive array to a function that takes a variable number of object arguments.
COV_JAVA_FB.VR_UNRESOLVABLE_REFERENCE	2	FindBugs: Correctness	This class makes a reference to a class or method that can not be resolved using against the libraries it is being analyzed with. (FindBugs Experimental)

COV_JAVA_FB.BC_BAD_CAST_TO_ABSTRACT_COLLECTION	3	FindBugs: Dodgy code	This code casts a Collection to an abstract collection (such as 'List', 'Set', or 'Map').
COV_JAVA_FB.BC_BAD_CAST_TO_CONCRETE_COLLECTION	3	FindBugs: Dodgy code	This code casts an abstract collection (such as a Collection, List, or Set) to a specific concrete implementation (such as an ArrayList or HashSet).
COV_JAVA_FB.BC_UNCONFIRMED_CAST	3	FindBugs: Dodgy code	This cast is unchecked, and not all instances of the type casted from can be cast to the type it is being cast to.
COV_JAVA_FB.BC_UNCONFIRMED_CAST_OF_RETURN_VALUE	3	FindBugs: Dodgy code	This code performs an unchecked cast of the return value of a method.
COV_JAVA_FB.BC_VACUOUS_INSTANCEOF	3	FindBugs: Dodgy code	This instanceof test will always return true (unless the value being tested is null).
COV_JAVA_FB.CD_CIRCULAR_DEPENDENCY	3	FindBugs: Dodgy code	This class has a circular dependency with other classes. (FindBugs Experimental)
COV_JAVA_FB.CI_CONFUSED_INHERITANCE	3	FindBugs: Dodgy code	This class is declared to be final, but declares fields to be protected.
COV_JAVA_FB.DB_DUPLICATE_BRANCHES	3	FindBugs: Dodgy code	This method uses the same code to implement two branches of a conditional branch.
COV_JAVA_FB.DB_DUPLICATE_SWITCH_CLAUSES	3	FindBugs: Dodgy code	This method uses the same code to implement two clauses of a switch statement.
COV_JAVA_FB.DLS_DEAD_LOCAL_STORE	3	FindBugs: Dodgy code	This instruction assigns a value to a local variable, but the value is not read or used in any subsequent instruction.
COV_JAVA_FB.DLS_DEAD_LOCAL_STORE_IN_RETURN	3	FindBugs: Dodgy code	This statement assigns to a local variable in a return statement.
COV_JAVA_FB.DLS_DEAD_LOCAL_STORE_OF_NULL	3	FindBugs: Dodgy code	The code stores null into a local variable, and the stored value is not read.
COV_JAVA_FB.DLS_DEAD_LOCAL_STORE_SHADOWS_FIELD	3	FindBugs: Dodgy code	This instruction assigns a value to a local variable, but the value is not read or used in any subsequent instruction.
COV_JAVA_FB.DMI_HARDCODED_ABSOLUTE_FILENAME	3	FindBugs: Dodgy code	This code constructs a File object using a hard coded to an absolute pathname (e.g., 'new File("/home/dannyc/workspace/j2ee/src/share/com/sun/enterprise/deployment");'
COV_JAVA_FB.DMI_NONSERIALIZABLE_OBJECT_WRITTEN	3	FindBugs: Dodgy code	This code seems to be passing a non-serializable object to the ObjectOutput.writeObject method.
COV_JAVA_FB.DMI_THREAD_PASSED_WHERE_RUNNABLE_EXPECTED	3	FindBugs: Dodgy code	A Thread object is passed as a parameter to a method where a Runnable is expected.
COV_JAVA_FB.DMI_UNSUPPORTED_METHOD	3	FindBugs: Dodgy code	All targets of this method invocation throw an UnsupportedOperationException.
COV_JAVA_FB.DMI_USELESS_SUBSTRING	3	FindBugs: Dodgy code	This code invokes substring(0) on a String, which returns the original value.
COV_JAVA_FB.EQ_DOESNT_OVERRIDE_EQUALS	3	FindBugs: Dodgy code	This class extends a class that defines an equals method and adds fields, but doesn't define an equals method itself.
COV_JAVA_FB.EQ_UNUSUAL	3	FindBugs: Dodgy code	This class doesn't do any of the patterns we recognize for checking that the type of the argument is compatible with the type of the 'this' object.
COV_JAVA_FB.FE_FLOATING_POINT_EQUALITY	3	FindBugs: Dodgy code	This operation compares two floating point values for equality.
COV_JAVA_FB.IA_AMBIGUOUS_INVOCATION_OF_INHERITED_OR_OUTER_METHOD	3	FindBugs: Dodgy code	An inner class is invoking a method that could be resolved to either a inherited method or a method defined in an outer class.
COV_JAVA_FB.IC_INIT_CIRCULARITY	3	FindBugs: Dodgy code	A circularity was detected in the static initializers of the two classes referenced by the bug instance.
COV_JAVA_FB.ICAST_IDIV_CAST_TO_DOUBLE	3	FindBugs: Dodgy code	This code casts the result of an integral division (e.g., int or long division) operation to double or float.
COV_JAVA_FB.ICAST_INTEGER_MULTIPLY_CAST_TO_LONG	3	FindBugs: Dodgy code	This code performs integer multiply and then converts the result to a long.
COV_JAVA_FB.ICAST_QUESTIONABLE_UNSIGNED_RIGHT_SHIFT	3	FindBugs: Dodgy code	The code performs an unsigned right shift, whose result is then cast to a short or byte, which discards the upper bits of the result.
COV_JAVA_FB.IM_AVERAGE_COMPUTATION_COULD_OVERFLOW	3	FindBugs: Dodgy code	The code computes the average of two integers using either division or signed right shift, and then uses the result as the index of an array.
COV_JAVA_FB.IM_BAD_CHECK_FOR_ODD	3	FindBugs: Dodgy code	The code uses x % 2 == 1 to check to see if a value is odd, but this won't work for negative numbers (e.g., (-5) % 2 == -1).
COV_JAVA_FB.INT_BAD_REM_BY_1	3	FindBugs: Dodgy code	Any expression (exp % 1) is guaranteed to always return zero.
COV_JAVA_FB.INT_VACUOUS_BIT_OPERATION	3	FindBugs: Dodgy code	This is an integer bit operation (and, or, or exclusive or) that doesn't do any useful work (e.g., 'v & 0xffffffff').
COV_JAVA_FB.INT_VACUOUS_COMPARISON	3	FindBugs: Dodgy code	There is an integer comparison that always returns the same value (e.g., x <= Integer.MAX_VALUE).
COV_JAVA_FB.MTIA_SUSPECT_SERVLET_INSTANCE_FIELD	3	FindBugs: Dodgy code	This class extends from a Servlet class, and uses an instance member variable.
COV_JAVA_FB.MTIA_SUSPECT_STRUTS_INSTANCE_FIELD	3	FindBugs: Dodgy code	This class extends from a Struts Action class, and uses an instance member variable.
COV_JAVA_FB.NP_DEREFERENCE_OF_READLINE_VALUE	3	FindBugs: Dodgy code	The result of invoking readLine() is dereferenced without checking to see if the result is null.
COV_JAVA_FB.NP_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR	4	FindBugs: Dodgy code	This is a read of a field is never initialized within any constructor, and is therefore could be null after the object is initialized. (FindBugs Deprecated) (FindBugs Experimental)
COV_JAVA_FB.NP_IMMEDIATE_DEREFERENCE_OF_READLINE	3	FindBugs: Dodgy code	The result of invoking readLine() is immediately dereferenced.
COV_JAVA_FB.NP_LOAD_OF_KNOWN_NULL_VALUE	3	FindBugs: Dodgy code	The variable referenced at this point is known to be null due to an earlier check against null.
COV_JAVA_FB.NP_METHOD_PARAMETER_RELAXING_ANNOTATION	4	FindBugs: Dodgy code	A method should always implement the contract of a method it overrides. (FindBugs Deprecated)
COV_JAVA_FB.NP_METHOD_PARAMETER_TIGHTENS_ANNOTATION	3	FindBugs: Dodgy code	A method should always implement the contract of a method it overrides.
COV_JAVA_FB.NP_METHOD_RETURN_RELAXING_ANNOTATION	3	FindBugs: Dodgy code	A method should always implement the contract of a method it overrides.
COV_JAVA_FB.NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE	3	FindBugs: Dodgy code	The return value from a method is dereferenced without a null check, and the return value of that method is one that should generally be checked for null.
COV_JAVA_FB.NP_NULL_ON_SOME_PATH_MIGHT_BE_INFEASIBLE	3	FindBugs: Dodgy code	There is a branch of statement that, <em>if executed,</em> guarantees that a null value will be dereferenced, which would generate a 'NullPointerException' when the code is executed.
COV_JAVA_FB.NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE	3	FindBugs: Dodgy code	This parameter is always used in a way that requires it to be nonnull, but the parameter is explicitly annotated as being Nullable.
COV_JAVA_FB.NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD	3	FindBugs: Dodgy code	The program is dereferencing a public or protected field that does not seem to ever have a non-null value written to it.
COV_JAVA_FB.NS_DANGEROUS_NON_SHORT_CIRCUIT	3	FindBugs: Dodgy code	This code seems to be using non-short-circuit logic (e.g., & or |) rather than short-circuit logic (&& or ||).
COV_JAVA_FB.NS_NON_SHORT_CIRCUIT	3	FindBugs: Dodgy code	This code seems to be using non-short-circuit logic (e.g., & or |) rather than short-circuit logic (&& or ||).
COV_JAVA_FB.PS_PUBLIC_SEMAPHORES	3	FindBugs: Dodgy code	This class uses synchronization along with wait(), notify() or notifyAll() on itself (the this reference).
COV_JAVA_FB.PZLA_PREFER_ZERO_LENGTH_ARRAYS	3	FindBugs: Dodgy code	It is often a better design to return a length zero array rather than a null reference to indicate that there are no results (i.e., an empty list of results).
COV_JAVA_FB.QF_QUESTIONABLE_FOR_LOOP	3	FindBugs: Dodgy code	Are you sure this for loop is incrementing the correct variable? It appears that another variable is being initialized and checked by the for loop.
COV_JAVA_FB.RCN_REDUNDANT_COMPARISON_OF_NULL_AND_NONNULL_VALUE	3	FindBugs: Dodgy code	This method contains a reference known to be non-null with another reference known to be null.
COV_JAVA_FB.RCN_REDUNDANT_COMPARISON_TWO_NULL_VALUES	3	FindBugs: Dodgy code	This method contains a redundant comparison of two references known to both be definitely null.
COV_JAVA_FB.RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE	3	FindBugs: Dodgy code	This method contains a redundant check of a known non-null value against the constant null.
COV_JAVA_FB.RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE	3	FindBugs: Dodgy code	This method contains a redundant check of a known null value against the constant null.
COV_JAVA_FB.REC_CATCH_EXCEPTION	3	FindBugs: Dodgy code	This catch block for Exception also catches any RuntimeException, which could mask programming errors.
COV_JAVA_FB.RI_REDUNDANT_INTERFACES	3	FindBugs: Dodgy code	This class declares that it implements an interface that is also implemented by a superclass.
COV_JAVA_FB.RV_CHECK_FOR_POSITIVE_INDEXOF	3	FindBugs: Dodgy code	The method invokes String.indexOf and checks to see if the result is positive or non-positive.
COV_JAVA_FB.RV_DONT_JUST_NULL_CHECK_READLINE	3	FindBugs: Dodgy code	The value returned by readLine is discarded after checking to see if the return value is non-null.
COV_JAVA_FB.RV_REM_OF_HASHCODE	3	FindBugs: Dodgy code	This code computes a hashCode, and then computes the remainder of that value modulo another value.
COV_JAVA_FB.RV_REM_OF_RANDOM_INT	3	FindBugs: Dodgy code	This code generates a random signed integer and then computes the remainder of that value modulo another value.
COV_JAVA_FB.RV_RETURN_VALUE_IGNORED_INFERRED	3	FindBugs: Dodgy code	This code calls a method and ignores the return value.
COV_JAVA_FB.SA_FIELD_DOUBLE_ASSIGNMENT	3	FindBugs: Dodgy code	This method contains a double assignment of a field; e.g.
COV_JAVA_FB.SA_LOCAL_DOUBLE_ASSIGNMENT	3	FindBugs: Dodgy code	This method contains a double assignment of a local variable; e.g.
COV_JAVA_FB.SA_LOCAL_SELF_ASSIGNMENT	3	FindBugs: Dodgy code	This method contains a self assignment of a local variable; e.g.
COV_JAVA_FB.SE_PRIVATE_READ_RESOLVE_NOT_INHERITED	3	FindBugs: Dodgy code	This class defines a private readResolve method.
COV_JAVA_FB.SE_TRANSIENT_FIELD_OF_NONSERIALIZABLE_CLASS	3	FindBugs: Dodgy code	The field is marked as transient, but the class isn't Serializable, so marking it as transient has absolutely no effect.
COV_JAVA_FB.SF_SWITCH_FALLTHROUGH	3	FindBugs: Dodgy code	This method contains a switch statement where one case branch will fall through to the next case.
COV_JAVA_FB.SF_SWITCH_NO_DEFAULT	3	FindBugs: Dodgy code	This method contains a switch statement where default case is missing.
COV_JAVA_FB.ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD	3	FindBugs: Dodgy code	This instance method writes to a static field.
COV_JAVA_FB.TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_ALWAYS_SINK	3	FindBugs: Dodgy code	A value is used in a way that requires it to be always be a value denoted by a type qualifier, but there is an explicit annotation stating that it is not known where the value is required to have that type qualifier.
COV_JAVA_FB.TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_NEVER_SINK	3	FindBugs: Dodgy code	A value is used in a way that requires it to be never be a value denoted by a type qualifier, but there is an explicit annotation stating that it is not known where the value is prohibited from having that type qualifier.
COV_JAVA_FB.UCF_USELESS_CONTROL_FLOW	3	FindBugs: Dodgy code	This method contains a useless control flow statement, where control flow continues onto the same place regardless of whether or not the branch is taken.
COV_JAVA_FB.UCF_USELESS_CONTROL_FLOW_NEXT_LINE	3	FindBugs: Dodgy code	This method contains a useless control flow statement in which control flow follows to the same or following line regardless of whether or not the branch is taken.
COV_JAVA_FB.UOE_USE_OBJECT_EQUALS	3	FindBugs: Dodgy code	This method invokes the .equals(Object o) method on a final class that doesn't override the equals method in the Object class, effectively making the equals method test for sameness, like ==. (FindBugs Experimental)
COV_JAVA_FB.URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD	3	FindBugs: Dodgy code	This field is never read.
COV_JAVA_FB.USM_USELESS_ABSTRACT_METHOD	3	FindBugs: Dodgy code	This abstract method is already defined in an interface that is implemented by this abstract class. (FindBugs Experimental)
COV_JAVA_FB.USM_USELESS_SUBCLASS_METHOD	3	FindBugs: Dodgy code	This derived method merely calls the same superclass method passing in the exact parameters received. (FindBugs Experimental)
COV_JAVA_FB.UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD	3	FindBugs: Dodgy code	This field is never used.
COV_JAVA_FB.UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR	3	FindBugs: Dodgy code	This field is never initialized within any constructor, and is therefore could be null after the object is constructed.
COV_JAVA_FB.UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD	3	FindBugs: Dodgy code	No writes were seen to this public/protected field.
COV_JAVA_FB.VA_FORMAT_STRING_BAD_CONVERSION_TO_BOOLEAN	3	FindBugs: Dodgy code	An argument not of type Boolean is being formatted with a %b format specifier.
COV_JAVA_FB.XFB_XML_FACTORY_BYPASS	3	FindBugs: Dodgy code	This method allocates a specific implementation of an xml interface.

COV_JAVA_FB.LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE	3	FindBugs: Experimental	OpenJDK introduces a potential incompatibility.
COV_JAVA_FB.OBL_UNSATISFIED_OBLIGATION	3	FindBugs: Experimental	This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. (FindBugs Experimental)
COV_JAVA_FB.OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE	3	FindBugs: Experimental	This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. (FindBugs Experimental)
COV_JAVA_FB.SKIPPED_CLASS_TOO_BIG	3	FindBugs: Experimental	This class is bigger than can be effectively handled, and was not fully analyzed for errors.
COV_JAVA_FB.TESTING	3	FindBugs: Experimental	This bug pattern is only generated by new, incompletely implemented bug detectors.
COV_JAVA_FB.TESTING1	3	FindBugs: Experimental	This bug pattern is only generated by new, incompletely implemented bug detectors.
COV_JAVA_FB.TESTING2	3	FindBugs: Experimental	This bug pattern is only generated by new, incompletely implemented bug detectors.
COV_JAVA_FB.TESTING3	3	FindBugs: Experimental	This bug pattern is only generated by new, incompletely implemented bug detectors.
COV_JAVA_FB.UNKNOWN	3	FindBugs: Experimental	A warning was recorded, but findbugs can't find the description of this bug pattern and so can't describe it.

COV_JAVA_FB.DM_CONVERT_CASE	3	FindBugs: Internationalization	A String is being converted to upper or lowercase, using the platform's default encoding.
COV_JAVA_FB.DM_DEFAULT_ENCODING	3	FindBugs: Internationalization	Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable.

COV_JAVA_FB.EI_EXPOSE_REP	3	FindBugs: Malicious code vulnerability	Returning a reference to a mutable object value stored in one of the object's fields exposes the internal representation of the object.
COV_JAVA_FB.EI_EXPOSE_REP2	3	FindBugs: Malicious code vulnerability	This code stores a reference to an externally mutable object into the internal representation of the object.
COV_JAVA_FB.EI_EXPOSE_STATIC_REP2	3	FindBugs: Malicious code vulnerability	This code stores a reference to an externally mutable object into a static field.
COV_JAVA_FB.FI_PUBLIC_SHOULD_BE_PROTECTED	3	FindBugs: Malicious code vulnerability	A class's 'finalize()' method should have protected access, not public.
COV_JAVA_FB.MS_CANNOT_BE_FINAL	3	FindBugs: Malicious code vulnerability	A mutable static field could be changed by malicious code or by accident from another package.
COV_JAVA_FB.MS_EXPOSE_REP	3	FindBugs: Malicious code vulnerability	A public static method returns a reference to an array that is part of the static state of the class.
COV_JAVA_FB.MS_FINAL_PKGPROTECT	3	FindBugs: Malicious code vulnerability	A mutable static field could be changed by malicious code or by accident from another package.
COV_JAVA_FB.MS_MUTABLE_ARRAY	3	FindBugs: Malicious code vulnerability	A final static field references an array and can be accessed by malicious code or by accident from another package.
COV_JAVA_FB.MS_MUTABLE_HASHTABLE	3	FindBugs: Malicious code vulnerability	A final static field references a Hashtable and can be accessed by malicious code or by accident from another package.
COV_JAVA_FB.MS_OOI_PKGPROTECT	3	FindBugs: Malicious code vulnerability	A final static field that is defined in an interface references a mutable object such as an array or hashtable.
COV_JAVA_FB.MS_PKGPROTECT	3	FindBugs: Malicious code vulnerability	A mutable static field could be changed by malicious code or by accident.
COV_JAVA_FB.MS_SHOULD_BE_FINAL	3	FindBugs: Malicious code vulnerability	A mutable static field could be changed by malicious code or by accident from another package.
COV_JAVA_FB.MS_SHOULD_BE_REFACTORED_TO_BE_FINAL	3	FindBugs: Malicious code vulnerability	A mutable static field could be changed by malicious code or by accident from another package.

COV_JAVA_FB.AT_OPERATION_SEQUENCE_ON_CONCURRENT_ABSTRACTION	2	FindBugs: Multithreaded correctness	This code contains a sequence of calls to a concurrent abstraction (such as a concurrent hash map).
COV_JAVA_FB.DC_DOUBLECHECK	2	FindBugs: Multithreaded correctness	This method may contain an instance of double-checked locking.
COV_JAVA_FB.DL_SYNCHRONIZATION_ON_BOOLEAN	2	FindBugs: Multithreaded correctness	The code synchronizes on a boxed primitive constant, such as an Boolean.
COV_JAVA_FB.DL_SYNCHRONIZATION_ON_BOXED_PRIMITIVE	2	FindBugs: Multithreaded correctness	The code synchronizes on a boxed primitive constant, such as an Integer.
COV_JAVA_FB.DL_SYNCHRONIZATION_ON_SHARED_CONSTANT	2	FindBugs: Multithreaded correctness	The code synchronizes on interned String.
COV_JAVA_FB.DL_SYNCHRONIZATION_ON_UNSHARED_BOXED_PRIMITIVE	2	FindBugs: Multithreaded correctness	The code synchronizes on an apparently unshared boxed primitive, such as an Integer.
COV_JAVA_FB.DM_MONITOR_WAIT_ON_CONDITION	2	FindBugs: Multithreaded correctness	This method calls 'wait()' on a 'java.util.concurrent.locks.Condition' object.
COV_JAVA_FB.DM_USELESS_THREAD	2	FindBugs: Multithreaded correctness	This method creates a thread without specifying a run method either by deriving from the Thread class, or by passing a Runnable object.
COV_JAVA_FB.ESYNC_EMPTY_SYNC	2	FindBugs: Multithreaded correctness	The code contains an empty synchronized block.
COV_JAVA_FB.IS_FIELD_NOT_GUARDED	2	FindBugs: Multithreaded correctness	This field is annotated with net.jcip.annotations.GuardedBy, but can be accessed in a way that seems to violate the annotation.
COV_JAVA_FB.IS_INCONSISTENT_SYNC	3	FindBugs: Multithreaded correctness	The fields of this class appear to be accessed inconsistently with respect to synchronization. (FindBugs Deprecated)
COV_JAVA_FB.IS2_INCONSISTENT_SYNC	2	FindBugs: Multithreaded correctness	The fields of this class appear to be accessed inconsistently with respect to synchronization.
COV_JAVA_FB.JLM_JSR166_LOCK_MONITORENTER	2	FindBugs: Multithreaded correctness	This method performs synchronization an object that implements java.util.concurrent.locks.Lock.
COV_JAVA_FB.JLM_JSR166_UTILCONCURRENT_MONITORENTER	2	FindBugs: Multithreaded correctness	This method performs synchronization an object that is an instance of a class from the java.util.concurrent package (or its subclasses).
COV_JAVA_FB.JML_JSR166_CALLING_WAIT_RATHER_THAN_AWAIT	2	FindBugs: Multithreaded correctness	This method calls 'wait()', 'notify()' or 'notifyAll()()' on an object that also provides an 'await()', 'signal()', 'signalAll()' method (such as util.concurrent Condition objects).
COV_JAVA_FB.LI_LAZY_INIT_INSTANCE	3	FindBugs: Multithreaded correctness	This method contains an unsynchronized lazy initialization of a non-volatile field. (FindBugs Deprecated) (FindBugs Experimental)
COV_JAVA_FB.LI_LAZY_INIT_STATIC	2	FindBugs: Multithreaded correctness	This method contains an unsynchronized lazy initialization of a non-volatile static field.
COV_JAVA_FB.LI_LAZY_INIT_UPDATE_STATIC	2	FindBugs: Multithreaded correctness	This method contains an unsynchronized lazy initialization of a static field.
COV_JAVA_FB.ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELD	2	FindBugs: Multithreaded correctness	This method synchronizes on a field in what appears to be an attempt to guard against simultaneous updates to that field.
COV_JAVA_FB.ML_SYNC_ON_UPDATED_FIELD	2	FindBugs: Multithreaded correctness	This method synchronizes on an object referenced from a mutable field.
COV_JAVA_FB.MSF_MUTABLE_SERVLET_FIELD	2	FindBugs: Multithreaded correctness	A web server generally only creates one instance of servlet or jsp class (i.e., treats the class as a Singleton), and will have multiple threads invoke methods on that instance to service multiple simultaneous requests.
COV_JAVA_FB.MWN_MISMATCHED_NOTIFY	2	FindBugs: Multithreaded correctness	This method calls Object.notify() or Object.notifyAll() without obviously holding a lock on the object.
COV_JAVA_FB.MWN_MISMATCHED_WAIT	2	FindBugs: Multithreaded correctness	This method calls Object.wait() without obviously holding a lock on the object.
COV_JAVA_FB.NN_NAKED_NOTIFY	2	FindBugs: Multithreaded correctness	A call to 'notify()' or 'notifyAll()' was made without any (apparent) accompanying modification to mutable object state.
COV_JAVA_FB.NO_NOTIFY_NOT_NOTIFYALL	2	FindBugs: Multithreaded correctness	This method calls 'notify()' rather than 'notifyAll()'.
COV_JAVA_FB.NP_SYNC_AND_NULL_CHECK_FIELD	2	FindBugs: Multithreaded correctness	Since the field is synchronized on, it seems not likely to be null.
COV_JAVA_FB.RS_READOBJECT_SYNC	2	FindBugs: Multithreaded correctness	This serializable class defines a 'readObject()' which is synchronized.
COV_JAVA_FB.RU_INVOKE_RUN	2	FindBugs: Multithreaded correctness	This method explicitly invokes 'run()' on an object.
COV_JAVA_FB.RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED	2	FindBugs: Multithreaded correctness	The 'putIfAbsent' method is typically used to ensure that a single value is associated with a given key (the first value for which put if absent succeeds).
COV_JAVA_FB.SC_START_IN_CTOR	2	FindBugs: Multithreaded correctness	The constructor starts a thread.
COV_JAVA_FB.SP_SPIN_ON_FIELD	2	FindBugs: Multithreaded correctness	This method spins in a loop which reads a field.
COV_JAVA_FB.STCAL_INVOKE_ON_STATIC_CALENDAR_INSTANCE	2	FindBugs: Multithreaded correctness	Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multihtreaded use.
COV_JAVA_FB.STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE	2	FindBugs: Multithreaded correctness	As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use.
COV_JAVA_FB.STCAL_STATIC_CALENDAR_INSTANCE	2	FindBugs: Multithreaded correctness	Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multihtreaded use.
COV_JAVA_FB.STCAL_STATIC_SIMPLE_DATE_FORMAT_INSTANCE	2	FindBugs: Multithreaded correctness	As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use.
COV_JAVA_FB.SWL_SLEEP_WITH_LOCK_HELD	2	FindBugs: Multithreaded correctness	This method calls Thread.sleep() with a lock held.
COV_JAVA_FB.TLW_TWO_LOCK_NOTIFY	3	FindBugs: Multithreaded correctness	The code calls notify() or notifyAll() while two locks are held. (FindBugs Deprecated) (FindBugs Experimental)
COV_JAVA_FB.TLW_TWO_LOCK_WAIT	2	FindBugs: Multithreaded correctness	Waiting on a monitor while two locks are held may cause deadlock.
COV_JAVA_FB.UG_SYNC_SET_UNSYNC_GET	2	FindBugs: Multithreaded correctness	This class contains similarly-named get and set methods where the set method is synchronized and the get method is not.
COV_JAVA_FB.UL_UNRELEASED_LOCK	2	FindBugs: Multithreaded correctness	This method acquires a JSR-166 ('java.util.concurrent') lock, but does not release it on all paths out of the method.
COV_JAVA_FB.UL_UNRELEASED_LOCK_EXCEPTION_PATH	2	FindBugs: Multithreaded correctness	This method acquires a JSR-166 ('java.util.concurrent') lock, but does not release it on all exception paths out of the method.
COV_JAVA_FB.UW_UNCOND_WAIT	2	FindBugs: Multithreaded correctness	This method contains a call to 'java.lang.Object.wait()' which is not guarded by conditional control flow.
COV_JAVA_FB.VO_VOLATILE_INCREMENT	2	FindBugs: Multithreaded correctness	This code increments a volatile field.
COV_JAVA_FB.VO_VOLATILE_REFERENCE_TO_ARRAY	2	FindBugs: Multithreaded correctness	This declares a volatile reference to an array, which might not be what you want.
COV_JAVA_FB.WA_AWAIT_NOT_IN_LOOP	2	FindBugs: Multithreaded correctness	This method contains a call to 'java.util.concurrent.await()' (or variants) which is not in a loop.
COV_JAVA_FB.WA_NOT_IN_LOOP	2	FindBugs: Multithreaded correctness	This method contains a call to 'java.lang.Object.wait()' which is not in a loop.
COV_JAVA_FB.WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERAL	2	FindBugs: Multithreaded correctness	This instance method synchronizes on 'this.getClass()'.
COV_JAVA_FB.WS_WRITEOBJECT_SYNC	2	FindBugs: Multithreaded correctness	This class has a 'writeObject()' method which is synchronized; however, no other method of the class is synchronized.

COV_JAVA_FB.BX_BOXING_IMMEDIATELY_UNBOXED	7	FindBugs: Performance	A primitive is boxed, and then immediately unboxed.
COV_JAVA_FB.BX_BOXING_IMMEDIATELY_UNBOXED_TO_PERFORM_COERCION	7	FindBugs: Performance	A primitive boxed value constructed and then immediately converted into a different primitive type (e.g., 'new Double(d).intValue()').
COV_JAVA_FB.BX_UNBOXING_IMMEDIATELY_REBOXED	7	FindBugs: Performance	A boxed value is unboxed and then immediately reboxed.
COV_JAVA_FB.DM_BOOLEAN_CTOR	7	FindBugs: Performance	Creating new instances of 'java.lang.Boolean' wastes memory, since 'Boolean' objects are immutable and there are only two useful values of this type.
COV_JAVA_FB.DM_BOXED_PRIMITIVE_FOR_PARSING	7	FindBugs: Performance	A boxed primitive is created from a String, just to extract the unboxed primitive value.
COV_JAVA_FB.DM_BOXED_PRIMITIVE_TOSTRING	7	FindBugs: Performance	A boxed primitive is allocated just to call toString().
COV_JAVA_FB.DM_FP_NUMBER_CTOR	7	FindBugs: Performance	Using 'new Double(double)' is guaranteed to always result in a new object whereas 'Double.valueOf(double)' allows caching of values to be done by the compiler, class library, or JVM.
COV_JAVA_FB.DM_GC	7	FindBugs: Performance	Code explicitly invokes garbage collection.
COV_JAVA_FB.DM_NEW_FOR_GETCLASS	7	FindBugs: Performance	This method allocates an object just to call getClass() on it, in order to retrieve the Class object for it.
COV_JAVA_FB.DM_NEXTINT_VIA_NEXTDOUBLE	7	FindBugs: Performance	If 'r' is a 'java.util.Random', you can generate a random number from '0' to 'n-1' using 'r.nextInt(n)', rather than using '(int)(r.nextDouble() * n)'.
COV_JAVA_FB.DM_NUMBER_CTOR	7	FindBugs: Performance	Using 'new Integer(int)' is guaranteed to always result in a new object whereas 'Integer.valueOf(int)' allows caching of values to be done by the compiler, class library, or JVM.
COV_JAVA_FB.DM_STRING_CTOR	7	FindBugs: Performance	Using the 'java.lang.String(String)' constructor wastes memory because the object so constructed will be functionally indistinguishable from the 'String' passed as a parameter.
COV_JAVA_FB.DM_STRING_TOSTRING	7	FindBugs: Performance	Calling 'String.toString()' is just a redundant operation.
COV_JAVA_FB.DM_STRING_VOID_CTOR	7	FindBugs: Performance	Creating a new 'java.lang.String' object using the no-argument constructor wastes memory because the object so created will be functionally indistinguishable from the empty string constant '""'.
COV_JAVA_FB.DMI_BLOCKING_METHODS_ON_URL	7	FindBugs: Performance	The equals and hashCode method of URL perform domain name resolution, this can result in a big performance hit.
COV_JAVA_FB.DMI_COLLECTION_OF_URLS	7	FindBugs: Performance	This method or field is or uses a Map or Set of URLs.
COV_JAVA_FB.HSC_HUGE_SHARED_STRING_CONSTANT	7	FindBugs: Performance	A large String constant is duplicated across multiple class files.
COV_JAVA_FB.IMA_INEFFICIENT_MEMBER_ACCESS	7	FindBugs: Performance	This method of an inner class reads from or writes to a private member variable of the owning class, or calls a private method of the owning class. (FindBugs Experimental)
COV_JAVA_FB.ITA_INEFFICIENT_TO_ARRAY	7	FindBugs: Performance	This method uses the toArray() method of a collection derived class, and passes in a zero-length prototype array argument.
COV_JAVA_FB.SBSC_USE_STRINGBUFFER_CONCATENATION	7	FindBugs: Performance	The method seems to be building a String using concatenation in a loop.
COV_JAVA_FB.SIC_INNER_SHOULD_BE_STATIC	7	FindBugs: Performance	This class is an inner class, but does not use its embedded reference to the object which created it.
COV_JAVA_FB.SIC_INNER_SHOULD_BE_STATIC_ANON	7	FindBugs: Performance	This class is an inner class, but does not use its embedded reference to the object which created it.
COV_JAVA_FB.SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS	7	FindBugs: Performance	This class is an inner class, but does not use its embedded reference to the object which created it except during construction of the inner object.
COV_JAVA_FB.SS_SHOULD_BE_STATIC	7	FindBugs: Performance	This class contains an instance final field that is initialized to a compile-time static value.
COV_JAVA_FB.UM_UNNECESSARY_MATH	7	FindBugs: Performance	This method uses a static method from java.lang.Math on a constant value.
COV_JAVA_FB.UPM_UNCALLED_PRIVATE_METHOD	7	FindBugs: Performance	This private method is never called.
COV_JAVA_FB.URF_UNREAD_FIELD	7	FindBugs: Performance	This field is never read.
COV_JAVA_FB.UUF_UNUSED_FIELD	7	FindBugs: Performance	This field is never used.
COV_JAVA_FB.WMI_WRONG_MAP_ITERATOR	7	FindBugs: Performance	This method accesses the value of a Map entry, using a key that was retrieved from a keySet iterator.

COV_JAVA_BAD_EQ_01	2	Incorrect expression	Using wrong equality operation (equals method vs. "==") for this type
COV_JAVA_COPY_PASTE_ERROR	2	Incorrect expression	A copied piece of code is inconsistent with the original
COV_JAVA_IDENTICAL_BRANCHES_01	2	Incorrect expression	The same code is executed regardless of the condition
COV_JAVA_PROPERTY_MIXUP	2	Incorrect expression	This may lead to incorrect program behavior.
COV_JAVA_PW.ASSIGNMENT_IN_CONDITIONAL	2	Incorrect expression	An assignment (=) occurs where compare (==) is probably intended
COV_JAVA_UNINTENDED_INTEGER_DIVISION	2	Incorrect expression	When dividing two values of integer types, integer division is used, which ignores any remainder. When such a result is used in a context expecting a floating-point number, it is likely that floating-point division was intended.
COV_JAVA_USELESS_CALL	1	Incorrect expression	A function call that seems to have an intended effect has no actual effect on the logic of the program.

COV_JAVA_BAD_SHIFT	2	Integer handling issues	A bit shift operation has a shift amount which is too large or has a negative value.
COV_JAVA_CONSTANT_EXPRESSION_RESULT_03	2	Integer handling issues	An operation with non-constant operands that computes a result with constant value
COV_JAVA_DIVIDE_BY_ZERO_02	2	Integer handling issues	Division or modulo by zero results in undefined behavior.
COV_JAVA_OVERFLOW_BEFORE_WIDEN	2	Integer handling issues	An integer overflow occurs, with the result converted to a wider integer type

COV_JAVA_OTHER	3	Miscellaneous	Unclassified violation

COV_JAVA_FORWARD_NULL_01	2	Null pointer dereferences	Reference may be null but is then dereferenced anyway
COV_JAVA_NULL_RETURNS	2	Null pointer dereferences	Return value of function which returns null is dereferenced without checking
COV_JAVA_REVERSE_INULL	2	Null pointer dereferences	All paths that lead to this null pointer comparison already dereference the pointer earlier

COV_JAVA_PW.*	3	Parse warnings	A parse warning may indicate a bug, or poor coding practice

COV_JAVA_DC.PERFORMANCE	7	Performance inefficiencies	This particular way of using a method or constructor is not the most efficient
COV_JAVA_HIBERNATE_UNNECESSARY_GET	7	Performance inefficiencies	There is an unnecessary call to org.hibernate.Session.get(...) which will result in a database access. In some cases, org.hibernate.Session.load(...) can be called to improve performance.
COV_JAVA_ORM_UNNECESSARY_GET	7	Performance inefficiencies	There is an unnecessary call to org.hibernate.Session.get(...) which will result in a database access. In some cases, org.hibernate.Session.load(...) can be called to improve performance.
COV_JAVA_STRING_CONCAT	7	Performance inefficiencies	A String object is concatenated within a loop, which results in the creation of a StringBuffer and new String
COV_JAVA_UNEXPECTED_SYNC	7	Performance inefficiencies	Synchronized block appears to be unnecessary because the lock protects no variables consistently


COV_JAVA_DEADLOCK	2	Program hangs	Threads may try to acquire two or more locks in different orders, potentially causing deadlock
COV_JAVA_INFINITE_LOOP_01	2	Program hangs	Infinite loop with unsatisfiable exit condition
COV_JAVA_LOCK_INVERSION	2	Program hangs	Threads may try to acquire two locks in different orders, potentially causing deadlock
COV_JAVA_LOCK_ORDERING	2	Program hangs	Threads may try to acquire three or more locks in different orders, potentially causing deadlock

COV_JAVA_RESOURCE_LEAK_02	1	Resource leaks	Leak of a system resource

COV_JAVA_ATTRIBUTE_NAME_CONFLICT	2	Rule violations	This may lead to undefined behavior.  Tomcat 7 or later will fail when there are duplicate attributes in JSP tags.

COV_JAVA_FB.CNT_ROUGH_CONSTANT_VALUE	3	SpotBugs: Bad practice	It's recommended to use the predefined library constant for code clarity and better precision.
COV_JAVA_FB.JUA_DONT_ASSERT_INSTANCEOF_IN_TESTS	3	SpotBugs: Bad practice	Problems in JUnit Assertions
COV_JAVA_FB.ME_MUTABLE_ENUM_FIELD	3	SpotBugs: Bad practice	A mutable public field is defined inside a public enum, thus can be changed by malicious code or by accident from another package.

COV_JAVA_FB.BSHIFT_WRONG_ADD_PRIORITY	2	SpotBugs: Correctness	The code performs an operation like (x << 8 + y). Although this might be correct, probably it was meant to perform (x << 8) + y, but shift operation has a lower precedence, so it's actually parsed as x << (8 + y).
COV_JAVA_FB.CAA_COVARIANT_ARRAY_ELEMENT_STORE	2	SpotBugs: Correctness	Value is stored into the array and the value type doesn't match the array type.
COV_JAVA_FB.DM_INVALID_MIN_MAX	1	SpotBugs: Correctness	The code always produces the same result (or NaN if the value is NaN).
COV_JAVA_FB.DMI_FUTILE_ATTEMPT_TO_CHANGE_MAXPOOL_SIZE_OF_SCHEDULED_THREAD	3	SpotBugs: Correctness	Dubious method used
COV_JAVA_FB.OVERRIDING_METHODS_MUST_INVOKE_SUPER	2	SpotBugs: Correctness	Bad implementation of cloneable idiom
COV_JAVA_FB.RANGE_ARRAY_INDEX	1	SpotBugs: Correctness	Array operation is performed, but array index is out of bounds, which will result in ArrayIndexOutOfBoundsException at runtime.
COV_JAVA_FB.RANGE_ARRAY_LENGTH	1	SpotBugs: Correctness	Method is called with array parameter and length parameter, but the length is out of bounds. This will result in IndexOutOfBoundsException at runtime.
COV_JAVA_FB.RANGE_ARRAY_OFFSET	1	SpotBugs: Correctness	Method is called with array parameter and offset parameter, but the offset is out of bounds. This will result in IndexOutOfBoundsException at runtime.
COV_JAVA_FB.RANGE_STRING_INDEX	1	SpotBugs: Correctness	String method is called and specified string index is out of bounds. This will result in StringIndexOutOfBoundsException at runtime.

COV_JAVA_FB.CAA_COVARIANT_ARRAY_FIELD	3	SpotBugs: Dodgy code	Array of covariant type is assigned to a field, may lead to ArrayStoreException at runtime if the reference of some other type will be stored in this array later.
COV_JAVA_FB.CAA_COVARIANT_ARRAY_LOCAL	3	SpotBugs: Dodgy code	Array of covariant type is assigned to a local variable, may lead to ArrayStoreException at runtime if the reference of some other type will be stored in this array later.
COV_JAVA_FB.CAA_COVARIANT_ARRAY_RETURN	3	SpotBugs: Dodgy code	Array of covariant type is returned from the method, may lead to ArrayStoreException at runtime if the calling code will try to store the reference of some other type in the returned array.
COV_JAVA_FB.UC_USELESS_CONDITION	1	SpotBugs: Dodgy code	This condition always produces the same result as the value of the involved variable that was narrowed before. Probably something else was meant or the condition can be removed.
COV_JAVA_FB.UC_USELESS_CONDITION_TYPE	1	SpotBugs: Dodgy code	This condition always produces the same result due to the type range of the involved variable. Probably something else was meant or the condition can be removed.

COV_JAVA_FB.MS_MUTABLE_COLLECTION	3	SpotBugs: Malicious code vulnerability	A mutable collection instance is assigned to a final static field, thus can be changed by malicious code or by accident from another package. 
COV_JAVA_FB.MS_MUTABLE_COLLECTION_PKGPROTECT	3	SpotBugs: Malicious code vulnerability	A mutable collection instance is assigned to a final static field, thus can be changed by malicious code or by accident from another package.

COV_JAVA_FB.DC_PARTIALLY_CONSTRUCTED	2	SpotBugs: Multithreaded correctness	Consider storing the object into the local variable first and save it to the volatile field only after it's fully constructed.

COV_JAVA_FB.IIL_ELEMENTS_GET_LENGTH_IN_LOOP	7	SpotBugs: Performance	The method calls NodeList.getLength() inside the loop and NodeList was produced by getElementsByTagName call. This NodeList doesn't store its length, but computes it every time in not very optimal way. Consider storing the length to the variable before the loop.
COV_JAVA_FB.IIL_PATTERN_COMPILE_IN_LOOP	7	SpotBugs: Performance	The method calls Pattern.compile inside the loop passing the constant arguments. If the Pattern should be used several times there's no reason to compile it for each loop iteration. Move this call outside of the loop or even into static final field.
COV_JAVA_FB.IIL_PATTERN_COMPILE_IN_LOOP_INDIRECT	7	SpotBugs: Performance	The method creates the same regular expression inside the loop, so it will be compiled every iteration. It would be more optimal to precompile this regular expression using Pattern.compile outside of the loop.
COV_JAVA_FB.IIL_PREPARE_STATEMENT_IN_LOOP	7	SpotBugs: Performance	The method calls Connection.prepareStatement inside the loop passing the constant arguments. If the PreparedStatement should be executed several times there's no reason to recreate it for each loop iteration. Move this call outside of the loop.
COV_JAVA_FB.IIO_INEFFICIENT_INDEX_OF	7	SpotBugs: Performance	This code passes a constant string of length 1 to String.indexOf(). It is more efficient to use the integer implementations of String.indexOf(). f. e. call myString.indexOf('.') instead of myString.indexOf(".").
COV_JAVA_FB.IIO_INEFFICIENT_LAST_INDEX_OF	7	SpotBugs: Performance	This code passes a constant string of length 1 to String.lastIndexOf(). It is more efficient to use the integer implementations of String.lastIndexOf(). f. e. call myString.lastIndexOf('.') instead of myString.lastIndexOf(".").
COV_JAVA_FB.IRA_INEFFICIENT_REPLACEALL	7	SpotBugs: Performance	Method uses replaceAll(String regex, String replacement) without any special regex characters.

COV_JAVA_TA.*	3	Test advisor issues	Code does not satisfy the testing policy established by your organization.
COV_JAVA_TA.INSUFFICIENT_COVERAGE	3	Test advisor issues	Function does not reach coverage threshold required by the policy
COV_JAVA_TA.INSUFFICIENT_FILE_COVERAGE	3	Test advisor issues	File does not reach coverage threshold required by the policy
COV_JAVA_TA.NO_COVERAGE	3	Test advisor issues	Function is not covered by any test
COV_JAVA_TA.UNCALLED	3	Test advisor issues	Function is not called from any test

COV_JAVA_UNINIT_NONNULL	3	Uninitialized members	Null value is disallowed for the field. Other code may dereference it without a null-check.

// New in Coverity 2022.03
COV_JAVA_FB.DCN_NULLPOINTER_EXCEPTION	3	SpotBugs: Dodgy code	DCN: Don't Catch NullPointer Exception: According to SEI CERT rule ERR08-J NullPointerException should not be caught.
COV_JAVA_FB.EI_EXPOSE_BUF	3	SpotBugs: Malicious code vulnerability	EI: Exposes internal representation: Returning a reference to a buffer (java.nio.*Buffer) which wraps an array stored in one of the object's fields exposes the internal representation of the array elements because the buffer only stores a reference to the array instead of copying its content.
COV_JAVA_FB.EI_EXPOSE_BUF2	3	SpotBugs: Malicious code vulnerability	EI2: Storing reference to mutable object: This code creates a buffer which stores a reference to an external array or the array of an external buffer into the internal representation of the object.
COV_JAVA_FB.EI_EXPOSE_STATIC_BUF2	3	SpotBugs: Malicious code vulnerability	MS: Mutable static field: This code creates a buffer which stores a reference to an external array or the array of an external buffer into a static field.
COV_JAVA_FB.EOS_BAD_END_OF_STREAM_CHECK	2	SpotBugs: Correctness	EOS: Bad End of Stream check: The method java.io.FileInputStream.read() returns an int.
COV_JAVA_FB.MC_OVERRIDABLE_METHOD_CALL_IN_CLONE	3	SpotBugs: Malicious code vulnerability	MC: Dangerous call to overridable method: Calling overridable methods from the clone() method is insecure because a subclass could override the method, affecting the behavior of clone().
COV_JAVA_FB.MC_OVERRIDABLE_METHOD_CALL_IN_CONSTRUCTOR	3	SpotBugs: Malicious code vulnerability	MC: Dangerous call to overridable method: Calling an overridable method during in a constructor may result in the use of uninitialized data.
COV_JAVA_FB.MS_EXPOSE_BUF	3	SpotBugs: Malicious code vulnerability	MS: Mutable static field: A public static method either returns a buffer (java.nio.*Buffer) which wraps an array that is part of the static state of the class by holding a reference only to this same array or it returns a shallow-copy of a buffer that is part of the static stat of the class which shares its reference with the original buffer.
COV_JAVA_FB.REFLC_REFLECTION_MAY_INCREASE_ACCESSIBILITY_OF_CLASS	3	SpotBugs: Malicious code vulnerability	REFLC: Reflection increasing accessibility of classes: The SEI CERT SEC05-J rule forbids the use of reflection to increase accessibility of classes, methods or fields.
COV_JAVA_FB.REFLF_REFLECTION_MAY_INCREASE_ACCESSIBILITY_OF_FIELD	3	SpotBugs: Malicious code vulnerability	REFLF: Reflection increasing accessibility of fields: The SEI CERT SEC05-J rule forbids the use of reflection to increase accessibility of classes, methods or fields.
