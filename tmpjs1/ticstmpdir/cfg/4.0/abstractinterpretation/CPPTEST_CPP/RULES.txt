BD-API-BADPARAM	1	Incorrect API usage	Do not pass incorrect values to library functions
BD-API-CTYPE	2	Incorrect API usage	Do not pass incorrect values to ctype.h library functions
BD-API-NEGPARAM	1	Incorrect API usage	Do not pass negative values to functions expecting non-negative arguments
BD-API-REVNEGPARAM	2	Incorrect API usage	Do not check for a non-negative value after passing as a non-negative argument
BD-API-STRSIZE	2	Incorrect API usage	The size_t argument passed to any function in string.h shall have an appropriate value
BD-API-VALPARAM	2	Incorrect API usage	Validate values passed to library functions

BD-CO-EMPCON	2	Containers	Do not pass empty container iterators to std algorithms as destinations
BD-CO-ITINVCOMP	2	Containers	Do not compare iterators from different containers
BD-CO-ITMOD	2	Containers	Do not modify container while iterating over it
BD-CO-ITOUT	1	Containers	Do not access iterator out of range
BD-CO-STRMOD	1	Containers	Use valid references, pointers, and iterators to reference elements of a basic_string 

BD-MISC-DC	5	Miscellaneous	Prevent calling unsafe functions (custom rule)
BD-MISC-TRANS	1	Miscellaneous	Always close transactions

BD-PB-ARRAY	2	Possible Bugs	Avoid accessing arrays out of bounds
BD-PB-ARRPTR	2	Possible Bugs	A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type
BD-PB-BADSHIFT	2	Possible Bugs	Avoid incorrect shift operations
BD-PB-BYTEORD	2	Possible Bugs	Use the correct byte ordering when transferring data between systems
BD-PB-CC	2	Possible Bugs	Avoid conditions that always evaluate to the same value
BD-PB-CHECKRET	2	Possible Bugs	Consistently check the returned value of non-void functions
BD-PB-CHECKRETGEN	2	Possible Bugs	Always check the returned value of non-void function
BD-PB-DEREF	2	Possible Bugs	Do not check for null after dereferencing
BD-PB-DNMPTR	2	Possible Bugs	Do not modify the alignment of objects by calling realloc()
BD-PB-EOFCOMP	2	Possible Bugs	The macro EOF should be compared with the unmodified return value from the Standard Library function
BD-PB-ERRNO	2	Possible Bugs	Properly use errno value
BD-PB-EXCEPT	1	Possible Bugs	Always catch exceptions
BD-PB-EXITHAN	2	Possible Bugs	Properly define exit handlers
BD-PB-FGETS	2	Possible Bugs	Reset strings on fgets() or fgetws() failure
BD-PB-FSETPOS	2	Possible Bugs	Only use values for fsetpos() that are returned from fgetpos()
BD-PB-INFREC	2	Possible Bugs	Avoid infinite recursion
BD-PB-INTOVERF	3	Possible Bugs	Avoid integer overflows
BD-PB-INVENV	2	Possible Bugs	Do not rely on an environment pointer following an operation that may invalidate it
BD-PB-INVRET	2	Possible Bugs	Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function
BD-PB-MODSTR	1	Possible Bugs	Do not modify string literals
BD-PB-MCCSTR	2	Possible Bugs	The Standard Library function memcmp shall not be used to compare null terminated strings
BD-PB-NEWHAN	2	Possible Bugs	Properly define new handlers
BD-PB-NOEXCEPT	2	Possible Bugs	Avoid throwing exceptions from functions that are declared not to throw
BD-PB-NORETDECL	5	Possible Bugs	Declare non-returning functions with the attribute that specifies that they do not return
BD-PB-NORETURN	2	Possible Bugs	Never return from functions that should not return
BD-PB-NOTINIT	1	Possible Bugs	Avoid use before initialization
BD-PB-NP	1	Possible Bugs	Avoid null pointer dereferencing
BD-PB-NZTS	3	Possible Bugs	Ensure strings are zero terminated
BD-PB-OVERFARRAY	2	Possible Bugs	Avoid accessing arrays and pointers out of bounds
BD-PB-OVERFFMT	1	Possible Bugs	Avoid buffer overflow due to defining incorrect format limits
BD-PB-OVERLAP	2	Possible Bugs	An object shall not be assigned or copied to an overlapping object
BD-PB-OVERFNZT	1	Possible Bugs	Avoid overflow due to reading a not zero terminated string
BD-PB-OVERFRD	1	Possible Bugs	Avoid overflow when reading from a buffer
BD-PB-OVERFWR	1	Possible Bugs	Avoid overflow when writing to a buffer
BD-PB-POLARR	2	Possible Bugs	Do not treat arrays polymorphically
BD-PB-POVR	1	Possible Bugs	Avoid overwriting method parameters
BD-PB-PTRARR	2	Possible Bugs	A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array
BD-PB-PTRCMP	2	Possible Bugs	Do not compare two unrelated pointers
BD-PB-PTRSUB	2	Possible Bugs	Do not subtract two pointers that do not elements of the same array
BD-PB-PTRVALUE	2	Possible Bugs	Do not store an already-owned pointer value in an unrelated smart pointer
BD-PB-PUTENV	2	Possible Bugs	Do not call putenv() with a pointer to an automatic variable as the argument
BD-PB-RECFUN	5	Possible Bugs	Do not use recursion
BD-PB-REFPARAM	3	Possible Bugs	A parameter shall be passed by reference if it can't be NULL
BD-PB-SIGHAN	2	Possible Bugs	Properly define signal handlers
BD-PB-SIGRETURN	2	Possible Bugs	Do not return from a computational exception signal handler
BD-PB-STDEXC	3	Possible Bugs	Always throw the created std::exception object
BD-PB-STREAMFLAGS	3	Possible Bugs	Suspicious setting of stream flags
BD-PB-STREAMFMT	3	Possible Bugs	Restore stream format
BD-PB-STREAMINOUT	2	Possible Bugs	Do not alternately input and output from a stream without an intervening flush or positioning call
BD-PB-SUBSEQFRWD	2	Possible Bugs	Do not subsequently use the argument to std::forward
BD-PB-SUBSEQMOVE	2	Possible Bugs	Do not rely on the value of a moved-from object
BD-PB-SWITCH	2	Possible Bugs	Avoid switch with unreachable branches
BD-PB-TERMHAN	2	Possible Bugs	Properly define terminate handlers
BD-PB-UNEXPHAN	2	Possible Bugs	Properly define unexpected handlers
BD-PB-VALRANGE	4	Possible Bugs	Guarantee that container indices are within the valid range
BD-PB-VARARGS	3	Possible Bugs	Use macros for variable arguments correctly
BD-PB-VCTOR	2	Possible Bugs	Do not invoke class's virtual functions from any of its constructors
BD-PB-VDTOR	2	Possible Bugs	Do not invoke class's virtual functions from its destructor
BD-PB-VLASIZE	2	Possible Bugs	Ensure the size of the variable length array is in valid range
BD-PB-VOVR	3	Possible Bugs	Avoid unused values
BD-PB-WRAPESC	1	Possible Bugs	Do not point to a wrapped object that has been freed
BD-PB-WRRDSTR	2	Possible Bugs	The same file shall not be opened for read and write access at the same time on different streams
BD-PB-WRROS	2	Possible Bugs	Avoid writing to a stream which has been opened as read only
BD-PB-ZERO	1	Possible Bugs	Avoid division by zero

BD-RES-BADFREEF	1	Resources	Ensure deallocation functions guarantee resource freeing
BD-RES-CSP	2	Resources	Avoid cyclic shared_ptr references
BD-RES-FREE	1	Resources	Do not use resources that have been freed
BD-RES-INSUFMEM	1	Resources	Allocate sufficient memory to hold an object of a given type
BD-RES-INVFREE	1	Resources	Do not free resources using invalid pointers
BD-RES-LEAKS	1	Resources	Ensure resources are freed
BD-RES-BADDEALLOC	1	Resources	Properly deallocate dynamically allocated resources
BD-RES-STACKLIM	3	Resources	Do not create variables on the stack above the defined limits

BD-TRS-ARG	2	Threads & Synchronization	Declare objects shared between POSIX threads with appropriate storage durations
BD-TRS-BITLOCK	3	Threads & Synchronization	Use locks to prevent race conditions when modifying bit fields
BD-TRS-CMF	2	Threads & Synchronization	Make const member functions thread-safe
BD-TRS-DIFCS	1	Threads & Synchronization	Variable should be used in context of single critical section
BD-TRS-DLOCK	1	Threads & Synchronization	Avoid double locking
BD-TRS-DSTRLOCK	3	Threads & Synchronization	Do not destroy another thread's mutex
BD-TRS-FRC	2	Threads & Synchronization	Avoid race conditions while accessing files
BD-TRS-FORKFILE	1	Threads & Synchronization	Avoid race conditions when using fork and file descriptors
BD-TRS-JOINDETACH	2	Threads & Synchronization	Do not join or detach a thread that was previously joined or detached
BD-TRS-LOCK	1	Threads & Synchronization	Do not abandon unreleased locks
BD-TRS-MLOCK	1	Threads & Synchronization	Do not use global variable with different locks set
BD-TRS-ORDER	1	Threads & Synchronization	Do not acquire locks in different order
BD-TRS-REVLOCK	3	Threads & Synchronization	Do not release a lock that has not been acquired
BD-TRS-SYMLINK	1	Threads & Synchronization	Avoid race conditions while checking for the existence of a symbolic link
BD-TRS-TSHL	1	Threads & Synchronization	Do not use blocking functions while holding a lock
