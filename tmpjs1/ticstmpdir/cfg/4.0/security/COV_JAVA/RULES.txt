// Coverity 2022.03 and below
COV_JAVA_CONFIG.ANDROID_GRADLE_OBFUSCATION_NOT_ENABLED	3	Audit impact security	Not configuring code shrinking for an Android application may result not only in a larger application size, but also in exposing application logic and sensitive functionality to an attacker.
COV_JAVA_CONFIG.HARDCODED_CREDENTIALS_AUDIT	1	Audit impact security	Having hardcoded credentials in configuration files accessible to potentially malicious users leads an attacker using those credentials to gain access to the application's data and services.
COV_JAVA_CONFIG.JAVAEE_MISSING_SERVLET_MAPPING	3	Audit impact security	If the servlet mapping is not done explicitly, implicit mapping will be applied. The implicit mapping allows on demand execution of JSP pages and introduces a security risk in the web application. In that case, another servlet in the classpath or even inside a Jar file could be invoked directly.
COV_JAVA_CORS_MISCONFIGURATION_AUDIT	1	Audit impact security	An attacker can abuse the application by sending CORS requests using any of the methods allowed: GET, HEAD, PUT, PATCH, POST, DELETE.
COV_JAVA_INSECURE_COOKIE	2	Audit impact security	While web browsers send cookies with the 'Secure' attribute only over HTTPS, they do send cookies without it over HTTP. If an attacker can fool the victim's browser into sending an HTTP request to the vulnerable site (for example, with JavaScript code on a malicious page or with a phishing link), the victim's browser will send the vulnerable cookie in the clear. If the attacker can also intercept this network traffic, then they can steal the victim's session cookie and impersonate the victim.
COV_JAVA_LDAP_NOT_CONSTANT	2	Audit impact security	An attacker can change the intent of the LDAP query, which may bypass security controls or disclose unauthorized data.
COV_JAVA_LOG_INJECTION	2	Audit impact security	An attacker may be able to forge log messages to confuse automated log parsing tools or humans trying to diagnose an attack or other problem.
COV_JAVA_SQL_NOT_CONSTANT	2	Audit impact security	Malicious or rogue values may alter the intent of the SQL query or command and cause incorrect behavior, leaked sensitive information, or a loss of data.
COV_JAVA_WEAK_URL_SANITIZATION	3	Audit impact security	Malicious URLs can bypass the weak regular expression. The incomplete check might cause attacks such as request forgeries and malicious redirects.
COV_JAVA_XML_INJECTION	2	Audit impact security	An attacker may be able to insert unintended content or structure to subvert the application's logic.

COV_JAVA_FB.DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEDGED	4	FindBugs: Bad practice	This code creates a classloader, which requires a security manager. (FindBugs Deprecated) (FindBugs Experimental)
COV_JAVA_FB.DP_DO_INSIDE_DO_PRIVILEDGED	4	FindBugs: Bad practice	This code invokes a method that requires a security permission check. (FindBugs Deprecated) (FindBugs Experimental)
COV_JAVA_FB.ME_ENUM_FIELD_SETTER	4	FindBugs: Bad practice	This public method declared in public enum unconditionally sets enum field, thus this field can be changed by malicious code or by accident from another package. Though mutable enum fields may be used for lazy initialization, it's a bad practice to expose them to the outer world. Consider removing this method or declaring it package-private.

COV_JAVA_FB.DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED	3	FindBugs: Malicious code vulnerability	This code creates a classloader, which needs permission if a security manage is installed.
COV_JAVA_FB.DP_DO_INSIDE_DO_PRIVILEGED	3	FindBugs: Malicious code vulnerability	This code invokes a method that requires a security permission check.

COV_JAVA_FB.DMI_CONSTANT_DB_PASSWORD	2	FindBugs: Security	This code creates a database connect using a hardcoded, constant password.
COV_JAVA_FB.DMI_EMPTY_DB_PASSWORD	2	FindBugs: Security	This code creates a database connect using a blank or empty password.
COV_JAVA_FB.HRS_REQUEST_PARAMETER_TO_COOKIE	2	FindBugs: Security	This code constructs an HTTP Cookie using an untrusted HTTP parameter.
COV_JAVA_FB.HRS_REQUEST_PARAMETER_TO_HTTP_HEADER	2	FindBugs: Security	This code directly writes an HTTP parameter to an HTTP header, which allows for a HTTP response splitting vulnerability.
COV_JAVA_FB.PT_ABSOLUTE_PATH_TRAVERSAL	2	FindBugs: Security	PT: Path traversal
COV_JAVA_FB.PT_RELATIVE_PATH_TRAVERSAL	2	FindBugs: Security	The software uses an HTTP request parameter to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory.
COV_JAVA_FB.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE	2	FindBugs: Security	The method invokes the execute method on an SQL statement with a String that seems to be dynamically generated.
COV_JAVA_FB.SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING	2	FindBugs: Security	The code creates an SQL prepared statement from a nonconstant String.
COV_JAVA_FB.XSS_REQUEST_PARAMETER_TO_JSP_WRITER	2	FindBugs: Security	This code directly writes an HTTP parameter to JSP output, which allows for a cross site scripting vulnerability.
COV_JAVA_FB.XSS_REQUEST_PARAMETER_TO_SEND_ERROR	2	FindBugs: Security	This code directly writes an HTTP parameter to a Server error page (using HttpServletResponse.sendError).
COV_JAVA_FB.XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER	2	FindBugs: Security	This code directly writes an HTTP parameter to Servlet output, which allows for a reflected cross site scripting vulnerability.

COV_JAVA_BAD_CERT_VERIFICATION	1	High impact security	An attacker can execute a man-in-the-middle attack to eavesdrop on or interfere with all traffic in the session.
COV_JAVA_CORS_MISCONFIGURATION	1	High impact security	An attacker can use iFrames or HTTP redirects to generate requests with null origin. Since the user is logged in, the requests will be credentialed and their responses may contain sensitive information. The attacker can now be read this information, compromising the user's session.
COV_JAVA_CSRF_01	1	High impact security	The web application controller modifies data or state and is unprotected from cross-site request forgery.
COV_JAVA_EL_INJECTION	1	High impact security	A user-controllable string is evaluated by an expression language resolver.
COV_JAVA_JAVA_CODE_INJECTION	1	High impact security	A user-controllable string is evaluated by an API that produces dynamic Java bytecode.
COV_JAVA_JSP_SQL_INJECTION	1	High impact security	A user-controllable string is injected into a SQL query, via the JSTL SQL tag (e.g. <sql:query>)
COV_JAVA_LDAP_INJECTION	1	High impact security	A user-controllable string is injected into an LDAP query.
COV_JAVA_OGNL_INJECTION	1	High impact security	A user-controllable string is evaluated by an OGNL resolver.
COV_JAVA_OS_CMD_INJECTION_01	1	High impact security	OS Command Injection
COV_JAVA_PATH_MANIPULATION	2	High impact security	A user-controllable string is used as part or all of a filesystem path or filename.
COV_JAVA_SCRIPT_CODE_INJECTION	1	High impact security	Script code interpreted or executed on the server is constructed from user-controllable data.
COV_JAVA_SENSITIVE_DATA_LEAK_01	1	High impact security	Sensitive data is stored or transmitted without encrypting it
COV_JAVA_SQLI_01	2	High impact security	Untrusted user-supplied data is inserted into a SQL statement without adequate validation, escaping, or filtering
COV_JAVA_TAINT_ASSERT	2	High impact security	Untainted assertion violation
COV_JAVA_UNENCRYPTED_SENSITIVE_DATA_01	2	High impact security	Retrieving or receiving unencrypted sensitive data.
COV_JAVA_UNSAFE_DESERIALIZATION	2	High impact security	A user-controllable string is deserialized.
COV_JAVA_WEAK_PASSWORD_HASH_01	2	High impact security	Hashing a password using a scheme that is not computationally intensive, and/or without using a random and unique salt as part of the input.
COV_JAVA_XSS	2	High impact security	Untrusted user-supplied data is inserted into a context that can execute JavaScript without adequate validation, escaping, or filtering

COV_JAVA_INSECURE_RANDOM	2	Insecure random category	An attacker may be able to predict the values generated by a cryptographically weak PRNG and gain access to sensitive information.

COV_JAVA_ANDROID_DEBUG_MODE	3	Low impact security	An attacker might debug the internal state of the Android application and get access to sensitive data and services.
COV_JAVA_CONFIG.CORDOVA_PERMISSIVE_WHITELIST	3	Low impact security	Allowing unrecognized URLs to be handled by other applications on the device may result in information leakage or phishing attacks.
COV_JAVA_CONFIG.DUPLICATE_SERVLET_DEFINITION	3	Low impact security	A servlet-name is used twice for different servlets, one of them will not be used by the container.
COV_JAVA_CONFIG.DWR_DEBUG_MODE	3	Low impact security	DWR debug mode is enabled in the configuration file.
COV_JAVA_CONFIG.DYNAMIC_DATA_HTML_COMMENT	3	Low impact security	Dynamic data is output in HTML comments inside JSP tags.
COV_JAVA_CONFIG.JAVAEE_MISSING_HTTPONLY	3	Low impact security	The HttpOnly flag is not enabled for the session cookies.
COV_JAVA_CONFIG.SPRING_SECURITY_REMEMBER_ME_HARDCODED_KEY	2	Low impact security	The remember-me key is hardcoded in the Spring Security configuration.
COV_JAVA_CONFIG.UNSAFE_SESSION_TIMEOUT	3	Low impact security	The session-timeout tag value is -1, which means that a session will never expire.  Session-based attacks require an active session, and insufficient expiration unnecessarily prolongs the time window where an attacker can hijack a session.
COV_JAVA_DC.DANGEROUS	2	Low impact security	Calling an inherently dangerous function for which better alternatives exist.
COV_JAVA_DC.DEADLOCK	2	Low impact security	Using a deprecated API that can easily lead to deadlock despite the existence of better alternatives.
COV_JAVA_MISSING_PERMISSION_FOR_BROADCAST	3	Low impact security	A malicious application could send or receive these broadcasts.
COV_JAVA_MISSING_PERMISSION_ON_EXPORTED_COMPONENT	3	Low impact security	Exporting a component without requiring a permission exposes the component to attackers.
COV_JAVA_PREDICTABLE_RANDOM_SEED	3	Low impact security	An attacker may predict generated random number with modest computational effort.
COV_JAVA_REGEX_INJECTION	2	Low impact security	A regular expression is constructed from a user-controllable string.
COV_JAVA_SQLI_UNKNOWN_SOURCE_01	2	Low impact security	Non-constant data of unknown origin is inserted into a SQL statement without adequate validation, escaping, or filtering
COV_JAVA_TAINTED_ENVIRONMENT_WITH_EXECUTION	3	Low impact security	An attacker may be able to change what the process does, which could bypass security controls or disclose unauthorized data.
COV_JAVA_TRUST_BOUNDARY_VIOLATION	3	Low impact security	The tainted data can be mixed with trustworthy data and can be mistakenly used in an insecure manner.
COV_JAVA_UNKNOWN_LANGUAGE_INJECTION	3	Low impact security	A user-controllable string is parsed using a parser generator that is used to create new languages or grammars.
COV_JAVA_UNRESTRICTED_ACCESS_TO_FILE	3	Low impact security	An attacker can access and modify the information contained in this database.
COV_JAVA_UNSAFE_NAMED_QUERY	3	Low impact security	An attacker can subvert program functionality or expose sensitive data.
COV_JAVA_UNSAFE_REFLECTION	3	Low impact security	A user-controllable string is passed to a reflection API.
COV_JAVA_URL_MANIPULATION	3	Low impact security	An attacker may access, modify, or corrupt content that contains sensitive information or is critical to the application.
COV_JAVA_WEAK_GUARD_01	3	Low impact security	Performing a security check against unreliable and spoofable data
COV_JAVA_XSS_UNKNOWN_SOURCE	2	Low impact security	Non-constant data of unknown origin is inserted into a context that can execute JavaScript without adequate validation, escaping, or filtering

COV_JAVA_ANDROID_CAPABILITY_LEAK	2	Medium impact security	A malicious application could abuse the unprotected capability to perform activities for which it does not have permission.
COV_JAVA_CONFIG.HTTP_VERB_TAMPERING	2	Medium impact security	The web application is vulnerable to HTTP Verb Tampering attack.
COV_JAVA_EXPOSED_PREFERENCES	2	Medium impact security	Malicious applications can read or write this SharedPreferences object.
COV_JAVA_HARDCODED_CREDENTIALS_04	1	Medium impact security	A security token is stored directly in the source code.
COV_JAVA_HEADER_INJECTION	2	Medium impact security	A user-controllable string is used to construct an HTTP header name.
COV_JAVA_IMPLICIT_INTENT	2	Medium impact security	A malicious application could register to receive this Intent and see any information in it.
COV_JAVA_INSECURE_COMMUNICATION	2	Medium impact security	Sensitive data sent to or received from the application may be read or manipulated by unintended actors.
COV_JAVA_JCR_INJECTION	2	Medium impact security	A user-controllable string is injected into a Content Repository for Java query
COV_JAVA_JSP_DYNAMIC_INCLUDE	2	Medium impact security	A JSP include path is partially or entirely user-controllable.
COV_JAVA_MISSING_AUTHZ	2	Medium impact security	Missing or insufficient authorization may permit unintended users to perform actions or access sensitive data for which they do not have permission.
COV_JAVA_MOBILE_ID_MISUSE	2	Medium impact security	An attacker may predict the mobile device identifier, authenticate, and gain access to data and services.
COV_JAVA_NOSQL_QUERY_INJECTION	2	Medium impact security	A user-controllable string is injected into a NoSQL query.
COV_JAVA_OPEN_REDIRECT	2	Medium impact security	An attacker can mount a phishing attack by modifying the URL value to point to a malicious Web site.
COV_JAVA_RISKY_CRYPTO_01	2	Medium impact security	A risky cryptographic function was used. This may allow an attacker to decrypt encrypted data as the quality of the cryptographic protection is suspect.
COV_JAVA_SESSION_FIXATION	1	Medium impact security	A user-controllable string is used as a session identifier.
COV_JAVA_UNLOGGED_SECURITY_EXCEPTION	2	Medium impact security	Each security exception must be logged properly to provide a notification about and a history of security events. This aids in a timely response to limit the severity and scale of attacks. It also provides information to analyze their origins and consequences.
COV_JAVA_UNRESTRICTED_DISPATCH	2	Medium impact security	A user-controllable string is used as a servlet dispatch path.
COV_JAVA_UNSAFE_JNI	2	Medium impact security	A user-controllable string is used in a dynamic library path.
COV_JAVA_XML_EXTERNAL_ENTITY	2	Medium impact security	Processing an arbitrary DTD without limiting entity expansion may result in parsing a large number of entities, causing denial of service.
COV_JAVA_XPATH_INJECTION	2	Medium impact security	A user-controllable string is injected into an XPath query

COV_JAVA_SIGMA.empty_password_core_java_sql	1	Sigma: High impact security	The application creates a database connection using an empty password string. An attacker who  guesses or otherwise obtains a username with an empty password needs no further information to  authenticate to the database and access protected data.
COV_JAVA_SIGMA.cors_with_credentials_all_origin_core_java	1	Sigma: High impact security	CORS configuration allows credentialed requests from all origins: The CORS policy shares credentialed responses with all origins by setting the `Access-Control-Allow-Origin` header to the wildcard `*`. Furthermore, this is an invalid CORS configuration that will be rejected by many modern browsers.
COV_JAVA_SIGMA.cors_with_credentials_all_origin_servlet	1	Sigma: High impact security	CORS configuration allows credentialed requests from all origins: The CORS policy shares credentialed responses with all origins by setting the `Access-Control-Allow-Origin` header to the wildcard `*`. Furthermore, this is an invalid CORS configuration that will be rejected by many modern browsers.
COV_JAVA_SIGMA.cors_with_credentials_all_origin_spring_corsconfiguration	1	Sigma: High impact security	CORS configuration allows credentialed requests from all origins: The `CorsConfiguration` object is configured with the wildcard origin `*` for credentialed requests which bypasses CORS controls and shares the protected resource with any origin. Furthermore, this is an invalid CORS configuration that will be rejected by many modern browsers.
COV_JAVA_SIGMA.cors_with_credentials_all_origin_spring_corsregistration	1	Sigma: High impact security	CORS configuration allows credentialed requests from all origins: The CORS policy shares credentialed responses with all origins by setting the `Access-Control-Allow-Origin` header to the wildcard `*`. Furthermore, this is an invalid CORS configuration that will be rejected by many modern browsers.
COV_JAVA_SIGMA.cors_with_credentials_null_origin_spring_corsconfiguration	1	Sigma: High impact security	CORS configuration allows credentialed requests from the `null` origin: The CORS policy shares sensitive responses with the null origin by setting the `Access-Control-Allow-Origin` header `null`. An attacker can then use iFrames or HTTP redirects to generate requests withthe null origin. Since the user is logged in, the requests will be credentialed and their responses may contain sensitive information. The attacker can now read this information, compromising the user's session.
COV_JAVA_SIGMA.unsafe_deserialization_activemq_settrustallpackages	1	Sigma: High impact security	Unsafe deserialization: ActiveMQ is configured to trust all packages during deserialization. This can lead to remote code execution when deserializing untrusted data.
COV_JAVA_SIGMA.unsafe_deserialization_activemq_settrustedpackages	1	Sigma: High impact security	Unsafe deserialization: The list of trusted packages is set to the wildcard `*`, which will trust all packages. This can lead to remote code execution when deserializing untrusted data.
COV_JAVA_SIGMA.unsafe_deserialization_jackson_objectmapper	1	Sigma: High impact security	Unsafe deserialization: Calling `ObjectMapper.enableDefaultTyping()` makes `Jackson` vulnerable to unsafe deserialization attacks, allowing an attacker to achieve remote code execution by deliberately constructing malicious `JSON` objects.
COV_JAVA_SIGMA.weak_xss_protection_servlet	1	Sigma: High impact security	Weak XSS protection: The application uses `XSSRequestWrapper`, which is an implementation of 'HttpServletRequestWrapper' published through various sites. The XSS filter in this code is weak and can be bypassed by malicious actors.
COV_JAVA_SIGMA.insecure_file_permission_core_java	3	Sigma: Low impact security	Insecure File Permission. The application sets permissions on a file that leaves the file world-readable, world-writable, or world-executable. Specifically, the java.nio.file.Files.setPosixFilePermissions() API grants access to the Others permission group. As a result, any application or user with access to the file system can view, modify, or execute the unprotected file.
COV_JAVA_SIGMA.insecure_tls_renegotiation_core_java	3	Sigma: Low impact security	Insecure TLS renegotiation. This Java application allows legacy insecure renegotiation between clients and servers. This can  allow attackers to perform man-in-the-middle attacks in order to insert data into the HTTPS session, or even other available types of sessions protected by TLS.
COV_JAVA_SIGMA.markdown_allow_dangerous_html_react	3	Sigma: Low impact security	The allowDangerousHtml flag is set to true which disables the default XSS protection.
COV_JAVA_SIGMA.rsa_no_padding_core_java	3	Sigma: Low impact security	Using the RSA algorithm without Optimal Asymmetric Encryption Padding (OAEP) can allow an attacker to decrypt or modify sensitive data.
COV_JAVA_SIGMA.unsafe_innerhtml_manipulation_vue_jsx	3	Sigma: Low impact security	The use of domPropsInnerHTML does not HTML escape the contents, allowing for XSS.
COV_JAVA_SIGMA.unspecified_cipher_transformation_core_java	3	Sigma: Low impact security	The javax.crypto.Cipher.getInstance() methods accept transformation string in form of algorithm/mode/padding or algorithm. If mode/padding is omitted, the default mode and padding specified by the provider will be used. Some providers use ECB as default mode that allow an attacker to decrypt or modify sensitive data
COV_JAVA_SIGMA.certificate_verification_disabled_core_java	3	Sigma: Low impact security	Certificate verification disabled: Disabling checks for certificate revocation results in a failure to properly authenticate its SSL/TLS peer, thereby allowing a client to connect to this system with a revoked certificate.
COV_JAVA_SIGMA.cors_no_credentials_permissive_origin_core_java	3	Sigma: Low impact security	CORS configuration allows non-credentialed requests from all origins: The `Access-Control-Allow-Origin` header is configured to bypass CORS controls and share the requested resource with any origin. An attacker can exploit this issue with a malicious cross-origin request and steal non-public responses from the application.
COV_JAVA_SIGMA.cors_no_credentials_permissive_origin_servlet	3	Sigma: Low impact security	CORS configuration allows non-credentialed requests from all origins: The `Access-Control-Allow-Origin` header is configured to bypass CORS controls and share the requested resource with any origin. An attacker can exploit this issue with a malicious cross-origin request and steal non-public responses from the application.
COV_JAVA_SIGMA.cors_no_credentials_permissive_origin_spring_corsconfiguration	3	Sigma: Low impact security	CORS configuration allows non-credentialed requests from all origins: The `CorsConfiguration` object is configured with the wildcard `*` or `null` origins which bypass CORS controls and share the requested resource with any origin. As a result, internal application resources that can be accessed without authentication may be exposed to untrusted external origins via the user's browser.
COV_JAVA_SIGMA.cors_no_credentials_permissive_origin_spring_corsregistration	3	Sigma: Low impact security	CORS configuration allows non-credentialed requests from all origins: The `CorsRegistration.allowedOrigins()` method is configured with the wildcard `*` which bypasses CORS controls and shares the requested resource with any origin. As a result, internal application resources that can be accessed without authentication may be exposed to untrusted external origins via the user's browser.
COV_JAVA_SIGMA.cors_preflight_age_too_long_core_java	3	Sigma: Low impact security	CORS Configuration preflight age too long: The `Access-Control-Max-Age` response header is set to a value greater than 1800 seconds. This header sets how long the CORS preflight response is cached. Setting the time too long increases a possibility of user agents using stale CORS policies.
COV_JAVA_SIGMA.cors_preflight_age_too_long_servlet	3	Sigma: Low impact security	CORS Configuration preflight age too long: The `HttpServletResponse` object has an `Access-Control-Max-Age` header with a value greater than 1800 seconds. This header sets how long the CORS preflight response is cached. Setting the time too long increases a possibility of user agents using stale CORS policies.
COV_JAVA_SIGMA.cors_preflight_age_too_long_spring_corsconfiguration	3	Sigma: Low impact security	CORS Configuration preflight age too long: The `CorsConfiguration.setMaxAge()` method sets the `Access-Control-Max-Age` header to a value greater than 1800 seconds. An excessively long cache timeout increases the risk that changes to a server's CORS policy will not be honored by user agents as they continue to use a cached response.
COV_JAVA_SIGMA.cors_preflight_age_too_long_spring_corsregistration	3	Sigma: Low impact security	CORS Configuration preflight age too long: The `CorsRegistration.maxAge()` method sets the `Access-Control-Max-Age` header to a value greater than 1800 seconds. An excessively long cache timeout increases the risk that changes to a server's CORS policy will not be honored by user agents as they continue to use a cached response.
COV_JAVA_SIGMA.cors_with_credentials_http_origin_core_java	3	Sigma: Low impact security	CORS Configuration allows credentialed requests from unencrypted origins: The CORS policy shares responses to credentialed requests with non-HTTPS origins leaving the response vulnerable to man-in-the-middle attacks.
COV_JAVA_SIGMA.cors_with_credentials_http_origin_servlet	3	Sigma: Low impact security	CORS Configuration allows credentialed requests from unencrypted origins: The CORS policy shares responses to credentialed requests with non-HTTPS origins leaving the response vulnerable to man-in-the-middle attacks.
COV_JAVA_SIGMA.cors_with_credentials_http_origin_spring_corsconfiguration	3	Sigma: Low impact security	CORS Configuration allows credentialed requests from unencrypted origins: The CORS policy shares responses to credentialed requests with non-HTTPS origins leaving the response vulnerable to man-in-the-middle attacks.
COV_JAVA_SIGMA.cors_with_credentials_http_origin_spring_corsregistration	3	Sigma: Low impact security	CORS Configuration allows credentialed requests from unencrypted origins: The CORS policy shares responses to credentialed requests with non-HTTPS origins leaving the response vulnerable to man-in-the-middle attacks.
COV_JAVA_SIGMA.cors_with_credentials_subdomain_origin_core_java	3	Sigma: Low impact security	CORS configuration allows credentialed requests to all subdomains: The `Access-Control-Allow-Origin` is set to an origin with a wildcard sub-domain for an authenticated request. If an attacker controls another sub-domain on that server, such as through a cross-site scripting vulnerability, they can leverage the compromised sub-domain to trick a user into submitting an authenticated request and read its response.
COV_JAVA_SIGMA.cors_with_credentials_subdomain_origin_servlet	3	Sigma: Low impact security	CORS configuration allows credentialed requests to all subdomains: The application allows authenticated access from all subdomains due to the `Access-Control-Allow-Origin` being set to an origin with a wildcard sub-domain (i.e. `*.example.com`). If an attacker controls another sub-domain, such as through a cross-site scripting vulnerability, they can leverage the other sub-domain to compromise this application.
COV_JAVA_SIGMA.cors_with_credentials_subdomain_origin_spring_corsconfiguration	3	Sigma: Low impact security	CORS configuration allows credentialed requests to all subdomains: The `CorsConfiguration` object is configured with an origin with a wildcard sub-domain (i.e. `*.example.com`). If an attacker can manipulate one of the sub-domains, such as through a cross-site scripting vulnerability, they can leverage it to compromise this application.
COV_JAVA_SIGMA.cors_with_credentials_subdomain_origin_spring_corsregistration	3	Sigma: Low impact security	CORS configuration allows credentialed requests to all subdomains: The `CorsRegistration.allowedOrigins()` method sets the `Access-Control-Allow-Origin` header to a value with a wildcard sub-domain (i.e. `*.example.com`). If an attacker can manipulate one of the sub-domains, such as through a cross-site scripting vulnerability, they can leverage it to compromise this application.
COV_JAVA_SIGMA.csrf_protection_disabled_spring_security_code	3	Sigma: Low impact security	CSRF protection is disabled: The Spring Security CSRF protection is disabled. An attacker may trick a client into making an unintentional request to the web server which will be treated as an authentic request. It may result in unintended execution of sensitive functionality or in exposure of data if the CSRF protection is disabled.
COV_JAVA_SIGMA.dangerously_exposed_interface_android	3	Sigma: Low impact security	Dangerously exposed interface: The use of the `android.webkit.WebView.addJavascriptInterface()` method exposes public methods of the Java object to the JavaScript code running in a WebView control. A malicious JavaScript can call any public method on this Java object in applications that target Android API level 16 or lower (regardless of which version of Android they are actually running on). The same issue is present in applications that are running on Android versions older than 4.2 (regardless of their target API level). If an application targets API level 17 or higher AND the application is running on a device with Android 4.2 or newer, then only methods that are annotated with `@JavascriptInterface` are accessible from JavaScript.
COV_JAVA_SIGMA.debug_enabled_spring_security_filter	3	Sigma: Low impact security	Debug mode enabled: The `DebugFilter` is added to the `FilterChainProxy` which enables the debug mode. Enabling debug mode in the production code leads to security risks because it logs more details than necessary, and these details may be exposed to attackers.
COV_JAVA_SIGMA.debug_logging_enabled_spring_security_code	3	Sigma: Low impact security	Excessive log level: The Spring Web Security logging level is set to debug mode. Enabling debug mode in the production code leads to security risks because it logs more details than necessary, and these details may be exposed to attackers.
COV_JAVA_SIGMA.deprecated_http_client_apache_default_http_client	3	Sigma: Low impact security	Deprecated HTTP client: The class `org.apache.http.impl.client.DefaultHttpClient` is deprecated and may not support the latest versions of TLS.
COV_JAVA_SIGMA.deprecated_http_client_apache_system_default_http_client	3	Sigma: Low impact security	Deprecated HTTP client: The class `org.apache.http.impl.client.SystemDefaultHttpClient` is deprecated and may not support the latest versions of TLS.
COV_JAVA_SIGMA.deprecated_xss_header_spring_security_code	3	Sigma: Low impact security	Use of the deprecated X-XSS-Protection HTTP header: The deprecated `X-XSS-Protection` HTTP header is explicitly enabled. The security header X-XSS-Protection is easy to bypass and is set to be deprecated.
COV_JAVA_SIGMA.encryption_disabled_spring_security	3	Sigma: Low impact security	Encryption disabled: The `noOpText()` method of the `org.springframework.security.crypto.encrypt.Encryptors` class is used. Using an encryptor that does not actually perform any encryption of the data may leak sensitive information to an attacker.
COV_JAVA_SIGMA.hardcoded_credentials_uri_core_java	3	Sigma: Low impact security	Use of hard-coded credential in URI: A URI with a password component is stored directly in the source code. Users with access to source code can use this password to gain access to services or data at a protected URI. The credentials may also be visible as clear text whenever the full URI is logged, stored, or transmitted insecurely.
COV_JAVA_SIGMA.http_firewall_allow_any_http_method_spring	3	Sigma: Low impact security	HTTP firewall allows any HTTP method: Setting the attribute `unsafeAllowAnyHttpMethod` to `true` allows any HTTP method without validation. This results in malicious requests not being handled by the server; therefore, they can reach the application and tamper or exfiltrate sensitive data.
COV_JAVA_SIGMA.http_firewall_allows_special_char_spring_backslash	3	Sigma: Low impact security	HTTP firewall allows insecure special character: Setting the attribute `allowBackSlash` to `true` allows a backslash `\` which might help bypass URL-based security controls. This results in malicious requests not being handled by the server; therefore, they can reach the application and tamper or exfiltrate sensitive data.
COV_JAVA_SIGMA.http_firewall_allows_special_char_spring_percent	3	Sigma: Low impact security	HTTP firewall allows insecure special character: Setting the attribute `allowUrlEncodedPercent` to `true` allows a percent `%` in the URL which might help bypass URL-based security controls. This results in malicious requests not being handled by the server; therefore, they can reach the application and tamper or exfiltrate sensitive data.
COV_JAVA_SIGMA.http_firewall_allows_special_char_spring_period	3	Sigma: Low impact security	HTTP firewall allows insecure special character: Setting the attribute `allowUrlEncodedPeriod` to `true` allows a period `.` in the URL which might help bypass URL-based security controls. This results in malicious requests not being handled by the server; therefore, they can reach the application and tamper or exfiltrate sensitive data.
COV_JAVA_SIGMA.http_firewall_allows_special_char_spring_semicolon	3	Sigma: Low impact security	HTTP firewall allows insecure special character: Setting the attribute `allowSemicolon` to `true` allows a semicolon in the URL and might result in Reflected File Download Attacks. This results in malicious requests not being handled by the server; therefore, they can reach the application and tamper or exfiltrate sensitive data.
COV_JAVA_SIGMA.http_firewall_allows_special_char_spring_slash	3	Sigma: Low impact security	HTTP firewall allows insecure special character: Setting the attribute `allowUrlEncodedSlash` to `true` allows a URL encoded slash in the URL which might help bypass URL-based security controls. This results in malicious requests not being handled by the server; therefore, they can reach the application and tamper or exfiltrate sensitive data.
COV_JAVA_SIGMA.http_firewall_insecure_default_spring	3	Sigma: Low impact security	Insecure default HTTP firewall: Creating the HTTP firewall `DefaultHttpFirewall`. This results in malicious requests not being handled by the server; therefore, they can reach the application and tamper or exfiltrate sensitive data.
COV_JAVA_SIGMA.http_header_validation_disabled_netty	3	Sigma: Low impact security	HTTP header validation disabled: The Netty HTTP header validation is disabled. Disabling HTTP header validation makes the application vulnerable to HTTP response splitting attack if user input is written directly into an HTTP header.
COV_JAVA_SIGMA.insecure_cipher_core_java_block_cipher_mode	3	Sigma: Low impact security	Insecure Cipher: A vulnerable block cipher mode is used in the transformation string provided to the `javax.crypto.Cipher.getInstance()` method. The block cipher mode does not include message authenticity. Thus, the ciphertext could be tampered with by an attacker without being discovered.
COV_JAVA_SIGMA.insecure_tls_version_core_java	3	Sigma: Low impact security	Insecure TLS version: The `SSLContext.getInstance()` method is configured with an outdated SSL or TLS version. Older SSL and TLS versions are vulnerable to known man-in-the-middle ("MITM") attacks, including the BEAST and POODLE attacks.
COV_JAVA_SIGMA.insufficient_asymmetric_key_size_core_java	3	Sigma: Low impact security	Insufficient Asymmetric Key Size: The application uses an asymmetric algorithm with insufficient key size, making the ciphertext data vulnerable to brute force attacks.
COV_JAVA_SIGMA.insufficient_symmetric_key_size_core_java	3	Sigma: Low impact security	Insufficient Symmetric Key Size: The application uses a symmetric algorithm with a key size less than 128 bits, making the ciphertext data vulnerable to brute force attacks.
COV_JAVA_SIGMA.login_over_http_spring_security	3	Sigma: Low impact security	Login over HTTP: The login form can be accessed over HTTP. When login occurs over an unencrypted connection, an attacker may steal credentials and tamper with the login form.
COV_JAVA_SIGMA.missing_httponly_attribute_servlet	3	Sigma: Low impact security	HttpOnly attribute not set for cookie: The `HttpOnly` flag is not enabled for cookies. Enabling the `HttpOnly` flag prevents an attacker from stealing or modifying cookie data via cross-site scripting attacks executed against vulnerable client-side applications.
COV_JAVA_SIGMA.missing_samesite_attribute_cookie_servlet	3	Sigma: Low impact security	Missing or insecure samesite attribute for cookie: The application doesn't set the `SameSite` attribute of the HTTP response header `Set-Cookie`, which is used to restrict the cookie to a first-party or same-site context. This may allow Cross-Site Request Forgery (CSRF) attacks.
COV_JAVA_SIGMA.missing_secure_attribute_remember_me_cookie_spring_security_code	3	Sigma: Low impact security	Secure attribute not set for RememberMe cookie: The RememberMe service configuration does not set the `useSecureCookie` attribute of the cookie. Thus, the RememberMe cookie is allowed to be sent over an insecure HTTP protocol.
COV_JAVA_SIGMA.missing_secure_attribute_servlet	3	Sigma: Low impact security	Secure attribute not set for cookie: The `secure` attribute is not enabled for cookies. While web browsers send cookies with the `secure` attribute only over HTTPS, they do send cookies without it over HTTP. If an attacker can fool the victim's browser into sending an HTTP request to the vulnerable site (for example, with JavaScript code on a malicious page or with a phishing link), the victim's browser will send the vulnerable cookie in clear text. If the attacker can also intercept this network traffic, then they can steal the victim's session cookie and impersonate the victim.
COV_JAVA_SIGMA.missing_tls_apache_telnet	3	Sigma: Low impact security	Missing TLS: The application creates an insecure telnet connection using `org.apache.commons.net.telnet.TelnetClient.connect()`. Telnet does not use encryption, which could lead to sensitive data leaks.
COV_JAVA_SIGMA.missing_tls_java_unirest	3	Sigma: Low impact security	Missing TLS: The application sends requests using the `http://` protocol in the `Unirest` class. Performing an HTTP request with the insecure `http://` protocol is dangerous as the server is attempting to connect to a website that does not encrypt traffic with TLS. If sensitive data were sent in cleartext over a communication channel without TLS, that data can be sniffed by unauthorized actors.
COV_JAVA_SIGMA.missing_tls_spring_ftp	3	Sigma: Low impact security	Missing TLS: Communication over the File Transfer Protocol (FTP) using the Spring framework method `DefaultFtpSessionFactory.setHost()` is not encrypted. Thus FTP traffic is sent in cleartext allowing the credentials and any data to easily be captured via MITM attacks, eavesdropping, or sniffing.
COV_JAVA_SIGMA.missing_tls_spring_resttemplate	3	Sigma: Low impact security	Missing TLS: The Application sends request via the Java Spring `RestTemplate` API using the `http://` protocol. This connection does not encrypt traffic with TLS, and thus may lead to man-in-the-middle attacks and leaking sensitive data.
COV_JAVA_SIGMA.reverse_tabnabbing_react	3	Sigma: Low impact security	Reverse tabnabbing: The anchor tag is generated dynamically and sets the `target` attribute to `_blank`. The page opened from that link will have access to the `location` object of the original page through `window.opener.location`. A malicious page associated with this link will be able to navigate the original page to an arbitrary site, such as a phishing site, and thus, execute a reverse tabnabbing attack.
COV_JAVA_SIGMA.sensitive_data_in_cookie_servlet	3	Sigma: Low impact security	Sensitive data in cookie storage: The application stores sensitive data in the client-side cookie store, potentially leaking that information to anyone with physical access to the client system.
COV_JAVA_SIGMA.session_fixation_protection_disabled_spring_security	3	Sigma: Low impact security	Session fixation protection disabled: The Spring Security session fixation protection is disabled. An attacker may preset the session id before the user logs in, and then abuse the active session after the login, if the session fixation protection is disabled.
COV_JAVA_SIGMA.shared_preferences_data_exposure_android	3	Sigma: Low impact security	Exposing shared preferences: Creating a `SharedPreferences` object in a mode other than `MODE_PRIVATE`. Malicious applications can read or write this `SharedPreferences` object.
COV_JAVA_SIGMA.unlimited_concurrent_sessions_spring_security	3	Sigma: Low impact security	Unlimited concurrent sessions: The maximum number of concurrent sessions is unlimited, which might allow an attacker to acquire and use a large number of server resources causing a denial of service on the server.
COV_JAVA_SIGMA.unsafe_authentication_filter_spring_security	3	Sigma: Low impact security	Credentials exposed in GET requests: The authentication filter allows credentials to be accepted in a GET request. Credentials sent in query strings may leak sensitive information to an attacker through proxy logs, browser history, or other means.
COV_JAVA_SIGMA.unsafe_innerhtml_manipulation_react	3	Sigma: Low impact security	Unsafe output of data into innerHtml: Setting raw HTML content without proper sanitization to the `innerHTML` property of a DOM element by using the `dangerouslySetInnerHTML` attribute may lead to cross-site scripting vulnerabilities.
COV_JAVA_SIGMA.verbose_error_message_spring_boot_exception_code	3	Sigma: Low impact security	Verbose error message: The Spring Boot application is configured to allow exception information to be displayed in an error page which may assist attackers in gaining unauthorized access to the system.
COV_JAVA_SIGMA.weak_hash_apache_commons_codec	3	Sigma: Low impact security	Weak hash algorithm: This application uses a weak algorithm to create a `MessageDigest`, which may lead to collision attacks.
COV_JAVA_SIGMA.weak_hash_core_java	3	Sigma: Low impact security	Weak hash algorithm: This application uses a weak algorithm to create a `MessageDigest`, which may lead to collision attacks.
COV_JAVA_SIGMA.weak_password_hash_spring_security_code	3	Sigma: Low impact security	Weak password hash algorithm: Spring Security framework uses weak hashing algorithm in the PasswordEncoder interface. Weak hashing algorithm does not adequately protect the password. In case of a data leak from a password storage, attackers will easily be able to obtain the original password values.
COV_JAVA_SIGMA.webview_file_access_android	3	Sigma: Low impact security	Same Origin Policy bypass through accessing local files: Allowing a WebView to access files on the local file system creates a security risk if the WebView is loaded from an untrusted source or its content can be manipulated. If an attacker can control the contents of the WebView, then the WebView may be tricked into loading a malicious local file that can access sensitive files on the device without origin restrictions.
COV_JAVA_SIGMA.jwt_algorithm_none_auth0_jwt	2	Sigma: Medium impact security	The application accepts unsigned JWT tokens, i.e., tokens containing the None signature algorithm. This allows an attacker to impersonate other users by forging an unsigned JWT tokens with data of their choice.
COV_JAVA_SIGMA.cbc_insecure_padding_core_java	2	Sigma: Medium impact security	Cipher block chaining with insecure padding: Using a block cipher with `CBC` mode and `PKCS5Padding` may be vulnerable to padding oracle attacks. In many scenarios, an attacker can exploit this issue to recover the full plaintext with little effort.
COV_JAVA_SIGMA.cors_with_credentials_null_origin_core_java	2	Sigma: Medium impact security	CORS configuration allows credentialed requests from the `null` origin: The CORS policy shares sensitive responses with the null origin by setting the `Access-Control-Allow-Origin` header `null`. An attacker can then use iFrames or HTTP redirects to generate requests with null origin. Since the user is logged in, the requests will be credentialed and their responses may contain sensitive information. The attacker can now read this information, compromising the user's session.
COV_JAVA_SIGMA.cors_with_credentials_null_origin_servlet	2	Sigma: Medium impact security	CORS configuration allows credentialed requests from the `null` origin: The CORS policy shares sensitive responses with the null origin by setting the `Access-Control-Allow-Origin` header `null`. An attacker can then use iFrames or HTTP redirects to generate requests with null origin. Since the user is logged in, the requests will be credentialed and their responses may contain sensitive information. The attacker can now read this information, compromising the user's session.
COV_JAVA_SIGMA.cors_with_credentials_null_origin_spring_corsregistration	2	Sigma: Medium impact security	CORS configuration allows credentialed requests from the `null` origin: The CORS policy shares sensitive responses with the null origin by setting the `Access-Control-Allow-Origin` header `null`. An attacker can then use iFrames or HTTP redirects to generate requests with null origin. Since the user is logged in, the requests will be credentialed and their responses may contain sensitive information. The attacker can now read this information, compromising the user's session.
COV_JAVA_SIGMA.improper_use_of_symmetric_cryptography_hazelcast_code	2	Sigma: Medium impact security	Improper use of symmetric cryptography: `Hazelcast` is configured to use the deprecated symmetric encryption protocol which shares the same key with all cluster members and may lead to key management issues. Additionally, the symmetric encryption protocol does not encrypt client-server communications.
COV_JAVA_SIGMA.insecure_cipher_core_java_block_cipher	2	Sigma: Medium impact security	Insecure Cipher: Using a weak block cipher algorithm is dangerous and may lead to exposure of sensitive information or loss of data integrity.
COV_JAVA_SIGMA.insecure_cipher_core_java_stream_cipher	2	Sigma: Medium impact security	Insecure Cipher: Using a weak stream cipher algorithm is dangerous and may lead to exposure of sensitive information or loss of data integrity.
COV_JAVA_SIGMA.jwt_untrusted_decode_io_jsonwebtoken	2	Sigma: Medium impact security	JSON Web Token decoded without signature verification: The application uses the `io.jsonwebtoken.JwtParser` package's `parse()`, `parsePlaintextJwt()` or `parseClaimsJwt()` method to parse a JWT without first verifying the token's signature, allowing an attacker to forge the token claims and perform attacks such as impersonating other users.
COV_JAVA_SIGMA.ldap_entry_poisoning_core_java	2	Sigma: Medium impact security	LDAP entry poisoning: An object-returning LDAP search may return an LDAP entry with a deserialized Java object. This may allow an attacker to add a malicious object, when deserialized, can execute arbitrary code.
COV_JAVA_SIGMA.missing_tls_apache_http	2	Sigma: Medium impact security	Missing TLS: The application sends requests over the `http://` protocol using apache components. Thus, any sensitive data transmitted over this insecure communication channel could be read and modified by attackers.
COV_JAVA_SIGMA.missing_tls_core_java_httprequest	2	Sigma: Medium impact security	Missing TLS: The application creates a connection to the URL using the insecure `HTTP` protocol.  As a result, application data is transmitted over an insecure channel where it can be read and modified by attackers.
COV_JAVA_SIGMA.missing_tls_core_java_httpurlconnection	2	Sigma: Medium impact security	Missing TLS: The application creates a connection to the URL using the insecure `HTTP` protocol. As a result, application data is transmitted over an insecure channel where it can be read and modified by attackers.
COV_JAVA_SIGMA.null_cipher_used_core_java	2	Sigma: Medium impact security	Null cipher used: The `NullCipher` class is used to create an `java.crypto.Cipher` instance. Using `NullCipher` does not actually encrypt any data which may lead to the exposure of sensitive information or the loss of data integrity.
COV_JAVA_SIGMA.unsafe_deserialization_apache_xmlrpc	2	Sigma: Medium impact security	Unsafe deserialization: This application enables extensions for Apache XML RPC server or client, allowing remote attackers to execute arbitrary code via a specially crafted serialized Java object.
COV_JAVA_SIGMA.unsafe_deserialization_core_java_xmldecoder	2	Sigma: Medium impact security	Unsafe deserialization: This application uses `java.beans.XMLDecoder`, which support arbitrary method invocation when doing deserialization, leading arbitrary code execution if the input data is malicious.
COV_JAVA_SIGMA.unsafe_xml_canonicalization_spring_saml_code	2	Sigma: Medium impact security	Unsafe XML canonicalization: The `SAMLResponse` object allows XML comments in the provided username. This may cause security issues depending on how the username gets parsed.

// Coverity 2022.03
COV_JAVA_SIGMA.cors_with_credentials_all_origin_spring_httpheaders	1	Sigma: High impact security	CORS configuration allows credentialed requests from all origins: The `HttpHeaders` object is configured with the wildcard origin `*` for credentialed requests which bypasses CORS controls and shares the protected resource with any origin. Furthermore, this is an invalid CORS configuration that will be rejected by many modern browsers.
COV_JAVA_SIGMA.jwt_ignored_expiration_time_jose4j	1	Sigma: High impact security	JSON Web Token expiration time ignored: The instance of `JwtConsumerBuilder` ignores the expiration time by default, unless the `setRequireExpirationTime()` function is called explicitly. Ignoring the expiration time for a JSON web token means it is valid forever. Since the token never expires, an attacker has a longer window to brute-force or exploit the stolen token.
COV_JAVA_SIGMA.jwt_ignored_expiration_time_vertx_auth_jwt	1	Sigma: High impact security	JSON Web Token expiration time ignored: The instance of `JWTOptions` checks the expiration time by default, unless the `setIgnoreExpiration(true)` function is called explicitly. Ignoring the expiration time for a JSON web token means it is valid forever. Since the token never expires, an attacker has a longer window to brute-force or exploit the stolen token.
COV_JAVA_SIGMA.cors_no_credentials_permissive_origin_spring_httpheaders	3	Sigma: Low impact security	CORS configuration allows non-credentialed requests from all origins: The `HttpHeaders` object is configured with the wildcard `*` or `null` origins which bypass CORS controls and share the requested resource with any origin. As a result, internal application resources that can be accessed without authentication may be exposed to untrusted external origins via the user's browser.
COV_JAVA_SIGMA.cors_preflight_age_too_long_spring_httpheaders	3	Sigma: Low impact security	CORS Configuration preflight age too long: The `Access-Control-Max-Age` header is set to a value greater than 1800 seconds. An excessively long cache timeout increases the risk that changes to a server's CORS policy will not be honored by user agents as they continue to use a cached response.
COV_JAVA_SIGMA.hsts_disabled_spring_security_code	3	Sigma: Low impact security	HSTS is disabled: The `hsts` header is disabled. Disabling this header prevents the automatic conversion of all requests from HTTP to HTTPS, creating opportunities for a man-in-the-middle attack.
COV_JAVA_SIGMA.insecure_network_bind_java_grpc	3	Sigma: Low impact security	Insecure network bind: The gRPC server is configured to be bound to all network interfaces, which exposes the server to every possible network. Note, that the default address is "0.0.0.0", which is the insecure setting.
COV_JAVA_SIGMA.insecure_tls_version_okhttp	3	Sigma: Low impact security	Insecure TLS version: The configured TLS connection protocols used in `OkHttp` use an outdated SSL or TLS version. Older SSL and TLS versions are vulnerable to known man-in-the-middle ("MITM") attacks, including `BEAST` and `POODLE` attacks.
COV_JAVA_SIGMA.insufficient_password_hash_iterations_spring_security_argon2	3	Sigma: Low impact security	Insufficient password hash iterations: The application uses the `Argon2` hashing algorithm with insecure parameters, making the data vulnerable to side-channel and GPU-based attacks.
COV_JAVA_SIGMA.insufficient_password_hash_iterations_spring_security_bcrypt_code	3	Sigma: Low impact security	Insufficient password hash iterations: The application uses `bcrypt` with a cost factor less than 10 which provides insufficient protection against brute force attacks, potentially exposing protected data.
COV_JAVA_SIGMA.insufficient_password_hash_iterations_spring_security_pbkdf2_code	3	Sigma: Low impact security	Insufficient password hash iterations: The application uses the `Pbkdf2PasswordEncoder` class with insufficient iterations to derive a hash key. Without enough iterations, a derived password-based key is more susceptible to brute-force attacks aimed at discovering passwords.
COV_JAVA_SIGMA.insufficient_password_hash_key_length_spring_security_pbkdf2_code	3	Sigma: Low impact security	Insufficient password hash key length: The application uses the `Pbkdf2PasswordEncoder` class to derive a hash key shorter than 128 bits (16 bytes). Without a long enough hash key, a derived password-based key is more susceptible to brute-force attacks aimed at discovering passwords.
COV_JAVA_SIGMA.insufficient_password_hash_salt_length_spring_security_pbkdf2_code	3	Sigma: Low impact security	Insufficient password hash salt length: The application uses the `Pbkdf2PasswordEncoder` class with a salt shorter than 64 bits (16 bytes) to derive a hash key. Without a long enough salt, a derived password-based key is more susceptible to brute-force attacks aimed at discovering passwords.
COV_JAVA_SIGMA.introspection_enabled_java_graphql	3	Sigma: Low impact security	Introspection enabled: Introspection on the GraphQL server has been enabled, exposing query schema data. An attacker can use this information to facilitate subsequent attacks against the query schema.
COV_JAVA_SIGMA.jwt_ignored_start_time_jose4j	3	Sigma: Low impact security	JSON Web Token not before time ignored: The instance of `JwtConsumerBuilder` ignores the not-before time by default. When the verified JWT contains the `nbd` field, the `setRequireNotBefore()` method should be invoked explicitly to verify the token's not-before time. Ignoring the not-before setting of a JSON web token means it may become valid before the particular point in time, and thus the attacker may use the invalid token to access resource.
COV_JAVA_SIGMA.jwt_no_claims_validation_jose4j	3	Sigma: Low impact security	JSON Web Token decoded without claims verification: The application invokes `setSkipAllValidators`, `setSkipDefaultAudienceValidation` or `setSkipAllDefaultValidators` to ignore validating JSON Web Token claims. This can be exploited by attackers to reuse an existing JWT signed for other scenarios.
COV_JAVA_SIGMA.no_depth_limit_java_graphql	3	Sigma: Low impact security	No depth limiting for GraphQL query: The depth limit for nested query objects is not configured in GraphQL. A maliciously formed query with an exceptional number of nested query objects can easily lead to a successful DoS attack or exhaust the server resources.
COV_JAVA_SIGMA.no_sniff_disabled_spring_security_code	3	Sigma: Low impact security	MIME type sniffing prevention disabled: The Spring application is configured to disable `Content-Type-Options`. This will result in a response without the `X-Content-Type-Options` header set to the value `nosniff`, which may increase the risk of MIME type sniffing.
COV_JAVA_SIGMA.unrestricted_database_access_android	3	Sigma: Low impact security	Unrestricted database access control: The application uses the class `android.content.Context` or its derived class method `openOrCreateDatabase` with the mode `MODE_WORLD_READABLE` or `MODE_WORLD_WRITEABLE` to open or create a database.
COV_JAVA_SIGMA.unrestricted_file_access_android	3	Sigma: Low impact security	Unrestricted file access control: The application uses the class `android.content.Context` or its derived class method `openFileOutput` with the mode `MODE_WORLD_READABLE` or `MODE_WORLD_WRITEABLE` to open or create a file. Each Android application has a designated internal storage area which, by default, only the application can access. By explicitly setting the mode to `MODE_WORLD_WRITEABLE` or `MODE_WORLD_READABLE`, the application can create files on its internal storage that are accessible to other applications. Applications can also access external storage (for example, an SD card) that is globally readable and writable. Because there is no way to control access to external storage, applications should never store sensitive information on external storage.
COV_JAVA_SIGMA.verbose_error_message_spring_boot_stacktrace_code	3	Sigma: Low impact security	Verbose error message: The Spring Boot application server is configured to allow stack traces to be displayed in an error page. The stack traces might contain sensitive information and should not be displayed.
COV_JAVA_SIGMA.xml_external_entity_enabled_core_java_xpath	3	Sigma: Low impact security	XML external entity processing enabled: The application performs an `XPath` action without disabling `DTD` or enabling `XMLConstants.FEATURE_SECURE_PROCESSING` mode. If the parser handles untrusted data, it will be vulnerable to XML External Entity (XXE) attacks.
COV_JAVA_SIGMA.trojan_source_bidi_char_anywhere	3	Sigma: Low impact security	Trojan Source: The file contains bidirectional Unicode text which may cause the code to be compiled or interpreted differently than how it appears rendered.
COV_JAVA_SIGMA.certificate_verification_disabled_apache_email	2	Sigma: Medium impact security	Certificate verification disabled: The application fails to call the method `setSSLCheckServerIdentity(true)` for the class `org.apache.commons.mail.Email` or it's subclasses. The variable `setSSLCheckServerIdentity` is set to `false` by default, which leads to a rogue certificate not being rejected when the signature cannot be verified by any of the certificate authorities. This allows for an insecure connection and a man-in-the-middle attack.
COV_JAVA_SIGMA.cors_with_credentials_http_origin_spring_httpheaders	2	Sigma: Medium impact security	CORS Configuration allows credentialed requests from unencrypted origins: The CORS policy shares responses to credentialed requests with non-HTTPS origins leaving the response vulnerable to man-in-the-middle attacks.
COV_JAVA_SIGMA.cors_with_credentials_null_origin_spring_httpheaders	2	Sigma: Medium impact security	CORS configuration allows credentialed requests from the `null` origin: The CORS policy shares sensitive responses with the null origin by setting the `Access-Control-Allow-Origin` header `null`. An attacker can then use iFrames or HTTP redirects to generate requests with null origin. Since the user is logged in, the requests will be credentialed and their responses may contain sensitive information. The attacker can now read this information, compromising the user's session.
COV_JAVA_SIGMA.insecure_tls_version_apache_ssl	2	Sigma: Medium impact security	Insecure TLS version: The `supportedProtocols` field of the `SSLConnectionSocketFactory` constructor contains an outdated SSL or TLS version. Older SSL and TLS versions are vulnerable to known man-in-the-middle ("MITM") attacks, including BEAST and POODLE attacks.
COV_JAVA_SIGMA.insecure_tls_version_core_java_tls_client	2	Sigma: Medium impact security	Insecure TLS version: The `jdk.tls.client.protocols` property is configured with an outdated SSL or TLS version. Older SSL and TLS versions are vulnerable to known man-in-the-middle ("MITM") attacks, including BEAST and POODLE attacks.
COV_JAVA_SIGMA.jwt_non_expiring_token_auth0_jwt	2	Sigma: Medium impact security	JSON Web Token without expiration time: The instance of `JWTCreator.Builder` doesn't set the expiration time when generating the token. Ignoring the expiration time for a JSON web token means it is valid forever. Since the token never expires, an attacker has a longer window to brute-force or exploit the stolen the token.
COV_JAVA_SIGMA.jwt_non_expiring_token_io_jsonwebtoken	2	Sigma: Medium impact security	JSON Web Token without expiration time: The instance of `JwtBuilder` doesn't set the expiration time when generating the token. Ignoring the expiration time for a JSON web token means it is valid forever. Since the token never expires, an attacker has a longer window to brute-force or exploit the stolen the token.
COV_JAVA_SIGMA.jwt_non_expiring_token_jose4j	2	Sigma: Medium impact security	JSON Web Token without expiration time: The instance of `JwtClaims` doesn't set the expiration time when generating the token. Ignoring the expiration time for a JSON web token means it is valid forever. Since the token never expires, an attacker has a longer window to brute-force or exploit the stolen the token.
COV_JAVA_SIGMA.jwt_non_expiring_token_vertx_auth_jwt	2	Sigma: Medium impact security	JSON Web Token without expiration time: The instance of `JWTAuth` doesn't set the expiration time when generating the token. Ignoring the expiration time for a JSON web token means it is valid forever. Since the token never expires, an attacker has a longer window to brute-force or exploit the stolen the token.
COV_JAVA_SIGMA.jwt_untrusted_decode_jose4j	2	Sigma: Medium impact security	JSON Web Token decoded without signature verification: The application invokes `setDisableRequireSignature` or `setSkipSignatureVerification` which disable JWT signature verification. Without signature verification, an attacker can modify the JWT claims to perform attacks such as replaying an expired token or impersonating another user.
COV_JAVA_SIGMA.missing_tls_java_grpc	2	Sigma: Medium impact security	Missing TLS: The application creates a gRPC connection to a gRPC client or server without encryption. As a result, application data is transmitted over an insecure channel where it can be read and modified by attackers.
COV_JAVA_SIGMA.trojan_source_bidi_char_unterminated	2	Sigma: Medium impact security	Trojan Source: The file contains an unterminated right-to-left bidirectional Unicode character which may cause the code to be compiled or interpreted differently than how it appears rendered.

