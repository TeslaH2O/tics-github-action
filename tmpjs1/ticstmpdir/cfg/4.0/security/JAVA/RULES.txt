JAVA.BD.SECURITY.BUFEXP	2	Security	Do not expose data wrapped by a buffer to untrusted code
JAVA.BD.SECURITY.CANPATH	2	Security	Path should be standardized before validation
JAVA.BD.SECURITY.CUSTOM	4	Security	Prevent security vulnerability (custom rule)
JAVA.BD.SECURITY.EACM	2	Security	Encapsulate arguments of dangerous methods with a validation method
JAVA.BD.SECURITY.FPEXC	2	Security	Check floating-point inputs for exceptional values
JAVA.BD.SECURITY.LOG	2	Security	Avoid passing unvalidated binary data to log methods
JAVA.BD.SECURITY.PRIVIL	2	Security	Avoid operating on tainted data in privileged blocks
JAVA.BD.SECURITY.REMTMP	2	Security	Remove temporary files before termination
JAVA.BD.SECURITY.SENS	4	Security	Prevent exposure of sensitive data
JAVA.BD.SECURITY.SENSLOG	2	Security	Avoid passing sensitive data to functions that write to log files
JAVA.BD.SECURITY.SIGCLASS	2	Security	Do not rely on the default automatic signature verification provided by URLClassLoader and java.util.jar
JAVA.BD.SECURITY.SSSD	3	Security	Safely serialize sensitive data
JAVA.BD.SECURITY.TDALLOC	3	Security	Validate potentially tainted data before it is used to determine the size of memory allocation
JAVA.BD.SECURITY.TDCODE	3	Security	Validate potentially tainted data before it is used in methods that generate code
JAVA.BD.SECURITY.TDCMD	4	Security	Protect against Command injection
JAVA.BD.SECURITY.TDDIG	4	Security	Protect against Jakarta Digester injection
JAVA.BD.SECURITY.TDENV	4	Security	Protect against Environment injection
JAVA.BD.SECURITY.TDFILES	4	Security	Protect against File contents injection
JAVA.BD.SECURITY.TDFNAMES	4	Security	Protect against File names injection
JAVA.BD.SECURITY.TDINPUT	4	Security	Exclude unsanitized user input from format strings
JAVA.BD.SECURITY.TDJXPATH	4	Security	Protect against JXPath injection
JAVA.BD.SECURITY.TDLDAP	4	Security	Protect against LDAP injection
JAVA.BD.SECURITY.TDLIB	4	Security	Protect against Library injection
JAVA.BD.SECURITY.TDLOG	4	Security	Protect against log forging
JAVA.BD.SECURITY.TDNET	4	Security	Protect against network resource injection
JAVA.BD.SECURITY.TDPASSWD	4	Security	Protect against using unprotected credentials
JAVA.BD.SECURITY.TDRESP	4	Security	Protect against HTTP response splitting
JAVA.BD.SECURITY.TDRFL	4	Security	Protect against Reflection injection
JAVA.BD.SECURITY.TDSESSION	4	Security	Do not store untrusted data in HTTP session
JAVA.BD.SECURITY.TDSQL	4	Security	Protect against SQL injection
JAVA.BD.SECURITY.TDXML	4	Security	Protect against XML data injection
JAVA.BD.SECURITY.TDXPATH	4	Security	Protect against XPath injection
JAVA.BD.SECURITY.TDXSS	4	Security	Protect against XSS vulnerabilities
JAVA.BD.SECURITY.VPPD	4	Security	Validate all dangerous data
JAVA.BD.SECURITY.XMLVAL	4	Security	Validate untrusted XML using schema or DTD before reading

JAVA.BV.NSF	3	Backdoor Vulnerabilities	Do not call 'Socket.setSocketImplFactory()' or 'URL.setURLStreamHandlerFactory()' in a web component.
JAVA.BV.ADT	5	Backdoor Vulnerabilities	Inspect usage of 'Date', 'Time' objects and 'System.currentTimeMillis()' method invocations
JAVA.BV.AUG	5	Backdoor Vulnerabilities	Inspect usage of 'getName()' from 'java.lang.Class' object.
JAVA.BV.PCFM	3	Backdoor Vulnerabilities	Wrap "privileged" method invocations in "final" methods.
JAVA.BV.PCPM	3	Backdoor Vulnerabilities	Wrap "privileged" method invocations in "private" methods.
JAVA.BV.PDLC	3	Backdoor Vulnerabilities	Avoid using dynamically loaded classes in "privileged" code blocks.
JAVA.BV.SYSP	2	Backdoor Vulnerabilities	Do not access or set System properties.
JAVA.BV.ENFL	3	Backdoor Vulnerabilities	Ensure all sensitive method invocations are logged
JAVA.BV.ACL	3	Backdoor Vulnerabilities	Do not access the class loader in a web component.
JAVA.BV.CQRO	3	Backdoor Vulnerabilities	Use "read-only" AccessMode for Castor queries

JAVA.ESD.PLC	1	Exposing Sensitive Data	Avoid storing sensitive data in plaintext in a cookie
JAVA.ESD.SIO	3	Exposing Sensitive Data	Avoid calling print methods of 'System.err' or 'System.out'
JAVA.ESD.CSD	3	Exposing Sensitive Data	Clear sensitive data after use.
JAVA.ESD.RA	3	Exposing Sensitive Data	Avoid methods that might expose internal representations by returning arrays or other mutable fields
JAVA.ESD.SIF	1	Exposing Sensitive Data	Inspect instance fields of serializable objects to make sure they will not expose sensitive information
JAVA.ESD.SDM	3	Exposing Sensitive Data	Store sensitive data in mutable objects.
JAVA.ESD.TSPF	2	Exposing Sensitive Data	Avoid "transient" fields in serialPersistentFields array.
JAVA.ESD.PEO	1	Exposing Sensitive Data	Do not pass exception messages into output in order to prevent the application from leaking sensitive information
JAVA.ESD.SPI	1	Exposing Sensitive Data	Do not interrogate or modify security policy information in a web component
JAVA.ESD.ACW	5	Exposing Sensitive Data	Avoid writing to Consoles
JAVA.ESD.SNFD	3	Exposing Sensitive Data	Do not expose data with a 'FileNotFound' exception
JAVA.ESD.CONSEN	1	Exposing Sensitive Data	Do not log confidential or sensitive information

JAVA.SECURITY.UEC.PCCF	4	Unsafe Environment Configuration	Avoid storing usernames and passwords in plain text in Castor 'jdo-conf.xml' files
JAVA.SECURITY.UEC.WCMWS	4	Unsafe Environment Configuration	Ensure WS-Security is enabled in WebSphere 'ibm-webservicesclient-ext.xmi' files
JAVA.SECURITY.UEC.WCPWD	4	Unsafe Environment Configuration	Avoid unencrypted passwords in WebSphere 'ibm-webservicesclient-ext.xmi' files
JAVA.SECURITY.UEC.WMWS	4	Unsafe Environment Configuration	Ensure WS-Security is enabled in WebSphere 'ibm-webservices-ext.xmi' files
JAVA.SECURITY.UEC.WPWD	4	Unsafe Environment Configuration	Avoid unencrypted passwords in WebSphere 'ibm-webservices-ext.xmi' files

JAVA.WSC.JXCORS	4	Weak Security Controls	Restrict cross-origin resource sharing to secure origins
JAVA.WSC.MCNC	5	Weak Security Controls	Make your classes noncloneable
JAVA.WSC.PBRTE	1	Weak Security Controls	Always specify absolute paths to execute commands
JAVA.WSC.DMDS	1	Weak Security Controls	Avoid using the DriverManagerDataSource class in production code
JAVA.WSC.BUSSB	3	Weak Security Controls	Prevent external processes from blocking on output or error streams
JAVA.WSC.AISSAJAVA	5	Weak Security Controls	Avoid using insecure cryptographic algorithms for data encryption with Spring
JAVA.WSC.EWSSEC	1	Weak Security Controls	Avoid debug information from Spring Security framework to logs
JAVA.WSC.MDSALT	1	Weak Security Controls	Use hash functions with a salt
JAVA.WSC.PBFA	5	Weak Security Controls	Ensure sufficient protection against multiple failed authentication attempts
JAVA.WSC.HV	1	Weak Security Controls	Ensure the HostnameVerifier.verify() method validates the certificate
JAVA.WSC.MCMDU	1	Weak Security Controls	MessageDigest objects must process the data with the 'update' method
JAVA.WSC.SIKG	1	Weak Security Controls	Initialize KeyGenerator instances 
JAVA.WSC.HGRSI	4	Weak Security Controls	Avoid using the 'getRequestedSessionId' method from the 'HttpServletRequest' class
JAVA.WSC.HTTPRHA	3	Weak Security Controls	Do not rely on IP addresses obtained from HTTP request headers for authentication
JAVA.WSC.ACMD	4	Weak Security Controls	Avoid using custom MessageDigest implementations
JAVA.WSC.APIBS	3	Weak Security Controls	Inspect usage of standard API calls that bypass security
JAVA.WSC.ARXML	1	Weak Security Controls	Process XML and HTML with a library instead of raw text 
JAVA.WSC.ASAPI	3	Weak Security Controls	Prevent the scripting API from executing untrusted code
JAVA.WSC.HCCK	1	Weak Security Controls	Avoid using hard-coded cryptographic keys
JAVA.WSC.INNER	3	Weak Security Controls	Make all member classes "private".
JAVA.WSC.PPKG	3	Weak Security Controls	Ensure that all Permissions, PrivilegedActions, and PrivilegedActionExceptions are declared in the same package
JAVA.WSC.STREP	3	Weak Security Controls	Use library methods for string replacements of special characters in HTML and XML
JAVA.WSC.VJFS	1	Weak Security Controls	Always verify JarFile signatures
JAVA.WSC.ZOIS	1	Weak Security Controls	Inspect usage of scripting API
JAVA.WSC.ENPP	2	Weak Security Controls	Ensure arguments passed to certain methods come from predefined methods list.
JAVA.WSC.ACDP	3	Weak Security Controls	Avoid using anonymous "privileged" classes when invoking "AccessController.doPrivileged()".
JAVA.WSC.AMA	3	Weak Security Controls	Avoid constructors and overriding methods which are more accessible than those of their super classes
JAVA.WSC.CFM	3	Weak Security Controls	Only call "final" methods from specified code blocks in non-"final" classes.
JAVA.WSC.CIFC	3	Weak Security Controls	Only "clone()" instances of "final" classes.
JAVA.WSC.CKTS	2	Weak Security Controls	Avoid using cryptographic keys which are too short.
JAVA.WSC.CLO	4	Weak Security Controls	Do not override any 'ClassLoader' method except 'findClass()'
JAVA.WSC.CMO	3	Weak Security Controls	Do not pass mutable objects to 'ObjectOutputStream' in the 'writeObject()' method
JAVA.WSC.FOLLOW	5	Weak Security Controls	Ensure that file target paths retrieved by resolving symbolic links are safe.
JAVA.WSC.HCCS	1	Weak Security Controls	Avoid passing hardcoded usernames/passwords/URLs to database connection methods.
JAVA.WSC.ICA	1	Weak Security Controls	Avoid using insecure algorithms for cryptography.
JAVA.WSC.IDP	3	Weak Security Controls	Avoid setting the write or execute file permissions to unintended users.
JAVA.WSC.IVR	2	Weak Security Controls	Avoid non-random "byte[]" when using IvParameterSpec.
JAVA.WSC.LNK	4	Weak Security Controls	Validate shortcut target paths before use.
JAVA.WSC.PAF	3	Weak Security Controls	Declare subclasses of 'PrivilegedAction', 'PrivilegedExceptionAction', and 'PrivilegedActionException' "final"
JAVA.WSC.PBPSF	3	Weak Security Controls	Declare subclasses of 'Permission' and 'BasicPermission' "final".
JAVA.WSC.PRMF	3	Weak Security Controls	Declare the 'run()' method of 'PrivilegedAction' and 'PrivilegedExceptionAction' implementations "final"
JAVA.WSC.PSFC	3	Weak Security Controls	Do not declare fields as "public" "static" "final" 'Collection' or 'Map' objects.
JAVA.WSC.SCF	1	Weak Security Controls	Enforce 'SecurityManager' checks before setting or getting fields
JAVA.WSC.SCLONE	1	Weak Security Controls	Enforce 'SecurityManager' checks in methods of 'Cloneable' classes
JAVA.WSC.SCSER	1	Weak Security Controls	Enforce 'SecurityManager' checks in methods of 'Serializable' classes
JAVA.WSC.SCSM	1	Weak Security Controls	Ensure 'SecurityManager' check in constructor of "public" non-"final" sensitive type
JAVA.WSC.SMSTR	3	Weak Security Controls	Ensure 'SecurityManager' checks before 'Socket' transfers or retrievals
JAVA.WSC.AHCA	1	Weak Security Controls	Avoid hard-coding the arguments to certain methods
JAVA.WSC.BP	3	Weak Security Controls	Allow only certain providers to be specified for the 'Security.addProvider()' method.
JAVA.WSC.CACM	1	Weak Security Controls	Keep all access control methods centralized to enforce consistency
JAVA.WSC.CAM	1	Weak Security Controls	Keep all authentication methods centralized to enforce consistency
JAVA.WSC.PAC	1	Weak Security Controls	Call authentication methods to enforce consistency
JAVA.WSC.PACC	1	Weak Security Controls	Call access control methods to enforce consistency
JAVA.WSC.UWM	3	Weak Security Controls	Use wrapper methods instead of calling dangerous or problematic methods directly (custom rule)
JAVA.WSC.UOSC	1	Weak Security Controls	Use the ''getSecure()'' and ''setSecure()'' methods to enforce the use of secure cookies.
JAVA.WSC.VSI	2	Weak Security Controls	Properly validate server identity
JAVA.WSC.SS	3	Weak Security Controls	Do not use sockets in web components.
JAVA.WSC.SSP	1	Weak Security Controls	Do not call 'System.setProperty()' in a web component.
JAVA.WSC.DNSL	1	Weak Security Controls	Avoid DNS lookups for decision making
JAVA.WSC.ISL	1	Weak Security Controls	Always call 'HttpSession.invalidate()' before 'LoginContext.login()'
JAVA.WSC.FIMU	4	Weak Security Controls	Make immutable classes final
JAVA.WSC.INIVF	4	Weak Security Controls	Defend against partially initialized instances of non-final classes
JAVA.WSC.FXMLP	1	Weak Security Controls	Ensure that Secure Processing is used
JAVA.WSC.CAP	1	Weak Security Controls	Always clone array parameters which are stored to fields
JAVA.WSC.ACPST	3	Weak Security Controls	Do not call the 'printStackTrace()' method of "Throwable" objects.
JAVA.WSC.SCHTTP	2	Weak Security Controls	Mark cookies as HttpOnly
JAVA.WSC.AUNC	2	Weak Security Controls	Avoid using the javax.crypto.NullCipher class in non-test classes.
