FortifyObjectiveCAccessControlAdministrativeInterface	1	Access Control	Failure to restrict access to administrative interfaces could allow an attacker gain complete control over the application.
FortifyObjectiveCAccessControlDatabase	1	Access Control	Without proper access control, executing a SQL statement that contains a user-controlled primary key can allow an attacker to view unauthorized records.
FortifyObjectiveCAccessControlMissingAuthentication	1	Access Control	The target web application contains a page with sensitive information or privileged functionality that does not require authentication.
FortifyObjectiveCAccessControlMissingURLNormalization	1	Access Control	Failure to convert request URLs into their canonical form before performing URL authorization can allow attackers to bypass Basic Authentication and gain unauthorized access to resources.
FortifyObjectiveCAuthenticationBadPracticeIgnoredAuthenticationMethod	1	Authentication Bad Practice	Implementing the NSURLConnectionDelegate.connection(_:willSendRequestFor:) delegate callback method will make the system ignore the NSURLConnectionDelegate.connection(_:canAuthenticateAgainstProtectionSpace:) and NSURLConnectionDelegate.connection(_:didReceive:) methods.
FortifyObjectiveCAuthenticationBadPracticeMissingCertificateEvaluation	1	Authentication Bad Practice	The code initializes a certificate-based server credentials without evaluating its trust chain beforehand.
FortifyObjectiveCAuthenticationBadPracticeMissingCheckagainstEvaluationResult	1	Authentication Bad Practice	Before creating a server trust credential, it is the responsibility of the delegate of an NSURLConnection object, NSURLSession object or an NSURLDownload object to evaluate the server trust. In order to evaluate the server trust, the SecTrustEvaluate(_:_:) method should be called with the trust obtained from the serverTrust method of the server's NSURLProtectionSpace object. The SecTrustEvaluate(_:_:) method returns two different values:- The returned OSStatus value represents the result code.- The object pointed by the second argument represents the result type of the evaluation.If the trust is invalid, the authentication challenge should be canceled with cancel(_:).Example 1: In the following example, the server trust is evaluated but the received credentials are used without checking the result of this evaluation:SecTrustRef trust = [[challenge protectionSpace] serverTrust];SecTrustResultType result = kSecTrustResultInvalid;OSStatus status = SecTrustEvaluate(trust, &result);completionHandler(NSURLSessionAuthChallengeUseCredential, [challenge proposedCredential]);
FortifyObjectiveCAuthenticationBadPracticeMissingCheckagainstProtectionSpace	1	Authentication Bad Practice	The NSURLConnection delegate handles authentication challenges without first verifying that the application knows how to handle the authentication challenge for a particular protection space.
FortifyObjectiveCAuthenticationBadPracticeMissingHostCheck	1	Authentication Bad Practice	The authentication handling callback for NSURLConnection or NSURLSession fails to check what host it is sending the credentials to.
FortifyObjectiveCBiometricAuthenticationInsecureTouchIDImplementation	2	Biometric Authentication	The application uses the LocalAuthentication framework to authenticate the user which may not be sufficient for apps requiring heightened security controls.
FortifyObjectiveCBiometricAuthenticationInsufficientTouchIDProtection	2	Biometric Authentication	The application uses Touch ID to store an item in the Keychain but fails to restrict the valid fingerprints to those available when the Keychain item was stored.
FortifyObjectiveCBiometricAuthenticationMissingOperationMessage	2	Biometric Authentication	The application asks the users to enter their fingerprints without providing a justification.
FortifyObjectiveCCacheManagementHeaders	3	Cache Management	Insecure cache management policies could allow attackers to extract application content through header manipulation.
FortifyObjectiveCCacheManagementInsecureManifest	3	Cache Management	Insecure cache management policy for HTML5 offline application manifest can hinder timely updates to cached contents, resulting in unexpected application behavior.
FortifyObjectiveCCacheManagementInsecurePolicy	3	Cache Management	Insecure caching policies could allow an attacker to conduct content spoofing or information theft attacks.
FortifyObjectiveCCacheManagementLanguage	3	Cache Management	Insecure cache management policies could allow attackers to gain access to restricted content by manipulating the language setting.
FortifyObjectiveCCacheManagementSessionCookies	3	Cache Management	Failure to restrict proxy servers from caching responses establishing authentication cookies can expose sensitive session information to attackers enabling to conduct session hijacking attacks.
FortifyObjectiveCCacheManagementUnspecifiedCriteria	3	Cache Management	Insecure cache management policies could lead to information exposure.
FortifyObjectiveCCacheManagementUserAgent	3	Cache Management	Insecure cache management policies could lead to information exposure.
FortifyObjectiveCClassLoaderManipulationStruts	1	ClassLoader Manipulation	The target application uses a version of Apache Struts known to contain a remote command injection vulnerability (CVE-2014-0112 and CVE-2014-0114).
FortifyObjectiveCCommandInjectionServerSideInclude	1	Command Injection	Improper handling of data by server-side includes can result in arbitrary command injection.
FortifyObjectiveCComplianceFailureMissingPrivacyPolicy	2	Compliance Failure	The application fails to clearly state the policy to protect user information.
FortifyObjectiveCCookieSecurityCookienotSentOverSSL	2	Cookie Security	A cookie is created without the secure flag set to true.
FortifyObjectiveCCookieSecurityOverlyBroadDomain	2	Cookie Security	A cookie with an overly broad domain opens an application to attack through other applications.
FortifyObjectiveCCookieSecurityOverlyBroadPath	2	Cookie Security	A cookie with an overly broad path can be accessed through other applications on the same domain.
FortifyObjectiveCCookieSecurityPersistentCookie	2	Cookie Security	Storing sensitive data in a persistent cookie can lead to a breach of confidentiality or account compromise.
FortifyObjectiveCCredentialManagementDefaultCredentials	2	Credential Management	Failure to remove default credentials can lead to severe system compromise.
FortifyObjectiveCCredentialManagementSensitiveInformationDisclosure	2	Credential Management	An attacker can capture sensitive information such as username, password and pin from HTML comments, URLs and unencrypted requests/responses.
FortifyObjectiveCCredentialManagementSensitiveInformationinURL	2	Credential Management	Attackers can capture any passwords transmitted in the URL.
FortifyObjectiveCCrossFrameScripting	1	Cross-Frame Scripting	Failure to restrict framing of an application within an Iframe can lead to Cross-Site Request Forgery or phishing attacks.
FortifyObjectiveCCrossSiteRequestForgery	2	Cross-Site Request Forgery	Form posts must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.
FortifyObjectiveCCrossSiteScriptingInterComponentCommunication	1	Cross-Site Scripting	Sending unvalidated data to a web browser can result in the browser executing malicious code.
FortifyObjectiveCCrossSiteScriptingPersistent	1	Cross-Site Scripting	Sending unvalidated data to a web browser can result in the browser executing malicious code.
FortifyObjectiveCCrossSiteScriptingPoorValidation	1	Cross-Site Scripting	Relying on HTML, XML, and other types of encoding to validate user input can result in the browser executing malicious code.
FortifyObjectiveCCrossSiteScriptingReflected	1	Cross-Site Scripting	Sending unvalidated data to a web browser can result in the browser executing malicious code.
FortifyObjectiveCDangerousFileInclusionLocal	1	Dangerous File Inclusion	Allowing unvalidated user input to control files that are included dynamically in an HTML file can lead to malicious code execution.
FortifyObjectiveCDangerousFileInclusionRemote	1	Dangerous File Inclusion	Allowing unvalidated user input to control files that are included dynamically in an HTML file can lead to malicious code execution.
FortifyObjectiveCDeadCodeUnusedParameter	4	Dead Code	Supporting parameters to trigger unexposed, privileged functionality could allow an attacker to gain unauthorized access to application resources.
FortifyObjectiveCDenialofServiceRegularExpression	1	Denial of Service	Untrusted data is passed to the application and used as a regular expression. This can cause the thread to overconsume CPU resources.
FortifyObjectiveCDirectoryTraversal	2	Directory Traversal	Failure to sufficiently validate user supplied input could allow an attacker read arbitrary files on the system.
FortifyObjectiveCDynamicCodeEvaluationCodeInjection	1	Dynamic Code Evaluation	Interpreting user-controlled instructions at run-time can allow attackers to execute malicious code.
FortifyObjectiveCDynamicCodeEvaluationRubyYAMLDeserialization	1	Dynamic Code Evaluation	Unsafe deserialization of user supplied input could allow  an attacker to inject arbitrary commands and gain unauthorized access to the system.
FortifyObjectiveCExposureofPOSTParametersinGETRequest	2	Exposure of POST Parameters in GET Request	Transmitting sensitive information via GET parameters can expose the application to Cross-Site Request Forgery attacks.
FortifyObjectiveCFileBasedCrossZoneScripting	1	File Based Cross-Zone Scripting	Loading a file that can run unstrusted scripts within the context of your application is dangerous.
FortifyObjectiveCFormatString	2	Format String	Allowing an attacker to control a function's format string can result in a buffer overflow.
FortifyObjectiveCHardcodedDomaininHTML	2	Hardcoded Domain in HTML	Including a script from another domain means that the security of this web page is dependent on the security of the other domain.
FortifyObjectiveCHeaderManipulation	2	Header Manipulation	Including unvalidated data in an HTTP response header can enable cache-poisoning, cross-site scripting, cross-user defacement, page hijacking, cookie manipulation or open redirect.
FortifyObjectiveCHeaderManipulationIMAP	2	Header Manipulation	The target application unsafely constructs and saves an email over the Internet Message Access Protocol (IMAP), potentially allowing for an injection attack.
FortifyObjectiveCHiddenField	3	Hidden Field	A hidden form field is used.
FortifyObjectiveCHTML5CORSFunctionalityAbuse	2	HTML5	Failure to properly restrict cross domain access to sensitive resources could allow an attacker to carry out data theft or content spoofing attacks.
FortifyObjectiveCHTML5CORSProlongedCachingofPreflightResponse	2	HTML5	Unsafe caching of the preflight response could result in unauthorized cross domain access to sensitive resources based on an invalid policy.
FortifyObjectiveCHTML5CORSUnsafeMethodsAllowed	2	HTML5	Allowing unsafe HTTP methods such as PUT or DELETE could allow an attacker to inject malicious code, backdoor, deface site, or delete and lock resources to cause denial of service attacks.
FortifyObjectiveCHTML5DeprecatedContentSecurityPolicy	2	HTML5	Using deprecated Content Security Policy headers can cause unexpected behaviour in web browswers. 
FortifyObjectiveCHTML5FormValidationTurnedOff	2	HTML5	HTML5 validation of input form fields is disabled.
FortifyObjectiveCHTML5MisconfiguredContentSecurityPolicy	2	HTML5	Incorrectly configured Content Security Policy could expose an application against client-side threats including Cross-Site Scripting, Cross Frame Scripting and Cross-Site Request Forgery.
FortifyObjectiveCHTML5MissingContentSecurityPolicy	2	HTML5	The Content Security Policy (CSP) is an HTTP response security header that developers and security architects can leverage to whitelist domains from which the site is allowed to load resources.
FortifyObjectiveCHTML5OverlyPermissiveReferrerPolicy	2	HTML5	Setting Referrer-Policy header to "Unsafe-URL" may cause applications to expose sensitive site and user data, such as session token and username and passwords to third party sites.
FortifyObjectiveCHTML5SensitiveInformationDisclosureviaClientSideStorage	2	HTML5	Improper use of client-side storage could lead to disclosure of sensitive information.
FortifyObjectiveCInputInterceptionKeyboardExtensionsAllowed	5	Input Interception	The application allows third party keyboard extensions to be installed.
FortifyObjectiveCInsecureDeploymentDefaultConfiguration	1	Insecure Deployment	Leaving third-party application installations in default configuration could allow an attacker to gain unauthorized access or steal sensitive information.
FortifyObjectiveCInsecureDeploymentHTTPsys	1	Insecure Deployment	The target server uses a version of Microsoft's IIS web server software that contains a critical remote code execution vulnerability (CVE-2015-1635).
FortifyObjectiveCInsecureDeploymentKnownApplicationFingerprint	1	Insecure Deployment	Deploying unpatched versions of applications can allow attackers to exploit known vulnerabilities to compromise the target system.
FortifyObjectiveCInsecureDeploymentKnownCAPTCHAFingerprint	1	Insecure Deployment	Use of insecure CAPTCHA implementations can allow attackers to bypass anti-automation protections.
FortifyObjectiveCInsecureDeploymentKnownFrameworkFingerprint	1	Insecure Deployment	Knowledge about the framework used to build the application can allow attackers to devise attacks targeted for vulnerabilities specific to detected framework.
FortifyObjectiveCInsecureDeploymentKnownServerFingerprint	1	Insecure Deployment	Deploying web applications on unpatched or insecurely configured servers can allow attackers to compromise the target by exploiting known vulnerabilities against detected server.
FortifyObjectiveCInsecureDeploymentKnownTechnologyFingerprint	1	Insecure Deployment	Failure to follow security best practices guidelines established for the underlying technology can expose an application to exploits targeting known security weaknesses.
FortifyObjectiveCInsecureDeploymentMaliciousApplication	1	Insecure Deployment	Presence of a malicious application could indicate that an attacker installed backdoor that could render all the application security controls ineffective.
FortifyObjectiveCInsecureDeploymentOpenSSL	1	Insecure Deployment	Deploying vulnerable versions of the OpenSSL library could allow an attacker to intercept and hijack secure SSL/TLS communication.
FortifyObjectiveCInsecureDeploymentPathNormalizationConflict	1	Insecure Deployment	Path Normalization Conflict can allow attackers to gain access to sensitive resources that would otherwise be inaccessible.
FortifyObjectiveCInsecureDeploymentPredictableResourceName	1	Insecure Deployment	Use of predictable names for sensitive resources could aid an attacker in the application discovery process.
FortifyObjectiveCInsecureDeploymentSampleApplication	1	Insecure Deployment	Deploying sample applications alongside custom application code and resources could allow an attacker to gain unauthorized access to sensitive resources and functionality or remotely execute arbitrary commands.
FortifyObjectiveCInsecureDeploymentSitemap	1	Insecure Deployment	Ensure that restricted sensitive resources are not exposed through the sitemap.
FortifyObjectiveCInsecureDeploymentUnpatchedApplication	1	Insecure Deployment	Failure to install up-to-date patches could lead to severe system compromise
FortifyObjectiveCInsecureIPCMissingContentValidation	1	Insecure IPC	The extension view controller fails to validate the data sent from the host app.
FortifyObjectiveCInsecureIPCMissingSenderVerification	1	Insecure IPC	The application fails to verify the sender of a URL-based Inter-Procedure Communication (IPC) call.
FortifyObjectiveCInsecureIPCMissingURLValidation	1	Insecure IPC	The application fails to validate the calling URL in a URL-based Inter-Procedure Communication (IPC) call.
FortifyObjectiveCInsecureIPCURLSchemeHijacking	1	Insecure IPC	The application uses custom URL schemes for Inter-Procedure Communication (IPC) which is subject to "URL Scheme Hijacking".
FortifyObjectiveCInsecureSSLOverlyBroadCertificateTrust	1	Insecure SSL	An SSL/TLS connection is created using the default pre-loaded system Certificate Authorities (CAs), that might enable attackers to intercept encrypted communications by performing man-in-the-middle (MiTM) attacks using certificates signed with compromised root CAs.
FortifyObjectiveCInsecureSSLServerIdentityVerificationDisabled	1	Insecure SSL	Server identity verification is disabled when making SSL connections.
FortifyObjectiveCInsecureStorageExternallyAvailableKeychain	1	Insecure Storage	The identified method stores data in the Keychain with an accessibility level that allows the item to be backed up to iCloud and unencrypted iTunes backups.
FortifyObjectiveCInsecureStorageHTTPResponseCacheLeak	1	Insecure Storage	The identified method sets up the HTTP(S) response cache in an insecure shared storage.
FortifyObjectiveCInsecureStorageInsufficientCacheLeakProtection	1	Insecure Storage	The application tries to disable the HTTP(S) cache by setting the disk or memory cache capacity to 0. However, there is no guarantee this setting will be enforced.
FortifyObjectiveCInsecureStorageInsufficientDataProtection	1	Insecure Storage	The identified method writes data to a file with potentially insufficient encryption settings.
FortifyObjectiveCInsecureStorageInsufficientKeychainProtection	1	Insecure Storage	The identified method stores data in the Keychain with potentially insufficient encryption settings.
FortifyObjectiveCInsecureStorageLackingDataProtection	1	Insecure Storage	The identified method writes data to a file lacking sufficient encryption settings.
FortifyObjectiveCInsecureStorageLackingKeychainProtection	1	Insecure Storage	The identified method stores data in the Keychain lacking sufficient encryption settings.
FortifyObjectiveCInsecureStorageMissingDatabaseEncryption	1	Insecure Storage	The identified method establishes a connection to an unencrypted database.
FortifyObjectiveCInsecureStorageMissingEncryptiononStoredPrivateMedia	1	Insecure Storage	The identified method writes unencrypted data to iOS's photo album.
FortifyObjectiveCInsecureStoragePasscodePolicyUnenforced	1	Insecure Storage	The identified method stores data in the Keychain without enforcing the user to set a passcode for his device.
FortifyObjectiveCInsecureStorageUnspecifiedKeychainAccessPolicy	1	Insecure Storage	The identified method stores data in the Keychain without specifying an accessibility level.
FortifyObjectiveCInsecureTransport	1	Insecure Transport	The application uses an unencrypted protocol instead of an encrypted protocol to communicate with the server.
FortifyObjectiveCInsecureTransportChannelMixing	1	Insecure Transport	Mixing HTTP and HTTPS content in a single web page can lead to data exposure vulnerabilities.
FortifyObjectiveCInsecureTransportInsufficientDiffieHellmanStrength	1	Insecure Transport	Using Diffie-Hellman group with prime(p or small prime) of size 1024-bit or less leaves the server vulnerable to man in the middle attack (MitM).
FortifyObjectiveCInsecureTransportMisconfiguredPublicKeyPinning	1	Insecure Transport	Failure to configure Public-Key-Pins header as per RFC7469 guidance may result in an ineffective or weak protection against man-in-the-middle attacks arising from rogue or compromised certificate authority (CA).
FortifyObjectiveCInsecureTransportMissingPerfectForwardSecrecy	1	Insecure Transport	The target application does not support a cipher suite that implements Perfect Forward Secrecy (PFS).
FortifyObjectiveCInsecureTransportMissingPublicKeyPinning	1	Insecure Transport	Failure to include Public-Key-Pins security header may result in a hostile pinning attack against a host as described in header RFC7469. Usage of the header provides a declarative way to implement public key pinning and provides protection against threats arising from rogue or compromised certificate authorities (CA).
FortifyObjectiveCInsecureTransportOAuthCommunicationChannel	1	Insecure Transport	Conducting OAuth communication over an insecure channel could allow an attacker to gain access to sensitive information and perform privileged actions on behalf of the user.
FortifyObjectiveCInsecureTransportSecureSectionAccessNotSSLEnabled	1	Insecure Transport	Access to secure sections of a web site over an unencrypted communication channel can lead to unintended exposure of sensitive information.
FortifyObjectiveCInsecureTransportSSLv3TLSRenegotiationStreamInjection	1	Insecure Transport	Use of unsafe renegotiation could allow an attacker to inject plaintext into the SSL/TLS protocol stream.
FortifyObjectiveCInsecureTransportTLS_RSA	1	Insecure Transport	ROBOT attack allows an attacker to perform RSA signing operations with a private key of TLS server and decrypt previously recorded TLS sessions established with RSA key exchange. It may allow an attacker to potentially extract critical sensitive data including, but not limited to, usernames and passwords, business intellectual properties, personal identity, financial, social and political secrets etc.
FortifyObjectiveCInsecureTransportWeakSSLCipher	1	Insecure Transport	Relying on weak cipher suites to enable encrypted communication could allow an attacker to steal sensitive information.
FortifyObjectiveCInsecureTransportWeakSSLProtocol	1	Insecure Transport	The SSLv2, SSLv23, and SSLv3 protocols contain several flaws that make them insecure, so they should not be used to transmit sensitive data.
FortifyObjectiveCInsufficientAntiAutomation	1	Insufficient Anti-Automation	Failure to detect and block automated attacks could allow an attacker to conduct brute force attacks or trigger denial of service conditions.
FortifyObjectiveCJSONInjection	1	JSON Injection	The method writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.
FortifyObjectiveCKeyManagementEmptyEncryptionKey	1	Key Management	Empty encryption keys can compromise security in a way that cannot be easily remedied.
FortifyObjectiveCKeyManagementEmptyHMACKey	1	Key Management	Empty HMAC keys could compromise system security in a way that cannot be easily remedied.
FortifyObjectiveCKeyManagementEmptyPBEPassword	1	Key Management	Using a key generated by a password-based key derivation function that was passed an empty value for its password argument may compromise system security in a way that cannot be easily remedied.
FortifyObjectiveCKeyManagementHardcodedEncryptionKey	1	Key Management	Hardcoded encryption keys can compromise security in a way that cannot be easily remedied.
FortifyObjectiveCKeyManagementHardcodedHMACKey	1	Key Management	Hardcoded HMAC keys could compromise system security in a way that cannot be easily remedied.
FortifyObjectiveCKeyManagementHardcodedPBEPassword	1	Key Management	Using a key generated by a password-based key derivation function that was passed a hardcoded value for its password argument may compromise system security in a way that cannot be easily remedied.
FortifyObjectiveCKeyManagementNullEncryptionKey	1	Key Management	Null encryption keys can compromise security in a way that cannot be easily remedied.
FortifyObjectiveCKeyManagementNullPBEPassword	1	Key Management	Generating and using a cryptographic key based on a null password may compromise system security in a way that cannot be easily remedied.
FortifyObjectiveCLinkInjectionAutoDial	1	Link Injection	The identified method loads a page into a webview but does not implement any controls to prevent auto-dialing attacks when visiting malicious sites.
FortifyObjectiveCLinkInjectionMissingValidation	1	Link Injection	The identified method loads a page into a webview but does not implement any controls to verify and validate the links the user will be able to click on.
FortifyObjectiveCLogForging	2	Log Forging	Writing unvalidated user input to log files can allow an attacker to forge log entries or inject malicious content into the logs.
FortifyObjectiveCMemoryLeak	3	Memory Leak	Memory is allocated but never freed.
FortifyObjectiveCNoSQLInjectionRealm	1	NoSQL Injection	Constructing a dynamic Realm query with input that comes from an untrusted source could allow an attacker to modify the statement's meaning.
FortifyObjectiveCOftenMisusedEncoding	4	Often Misused	Improper overriding of the classes in the .NET Framework, may lead to arbitrary code execution on the server, abuse of application logic or denial of service.
FortifyObjectiveCOftenMisusedFileSystem	4	Often Misused	Passing an inadequately-sized output buffer to a path manipulation function can result in a buffer overflow.
FortifyObjectiveCOftenMisusedFileUpload	4	Often Misused	Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.
FortifyObjectiveCOftenMisusedHTTPMethodOverride	4	Often Misused	Attackers may bypass server protections against dangerous HTTP verbs using override techniques.
FortifyObjectiveCOftenMisusedLogin	4	Often Misused	Insecure handling of login information can allow attackers to circumvent the application's authentication system.
FortifyObjectiveCOftenMisusedMACAddress	4	Often Misused	A MAC address is intended to be used as a network identifier. Since a MAC address permanently identifies a device, all apps using it as a user identifier will have the same ID value.  Hence, by correlating information from various apps, it is possible to identify a device and its user, threatening user privacy.
FortifyObjectiveCOftenMisusedMobileUDID	4	Often Misused	The target mobile application sends data that looks like a Universal Device Identifier (UDID) in a request.
FortifyObjectiveCOftenMisusedMobileUUID	4	Often Misused	The target mobile application sends data that looks like a Universally Unique Identifier (UUID) in a request.
FortifyObjectiveCOftenMisusedPriceRelatedFields	4	Often Misused	Relying solely on client-side security controls and failure to perform server-side validation can allow attackers to manipulate sensitive data and adversely affect the application operation.
FortifyObjectiveCOftenMisusedSMS	4	Often Misused	The application performs iOS specific SMS-related operations.
FortifyObjectiveCOftenMisusedWeakSSLCertificate	4	Often Misused	The target server uses a self-signed certificate.
FortifyObjectiveCOftenMisusedXDomainRequestAllowed	4	Often Misused	The target server included the XDomainRequestAllowed header in an HTTP request with a value of "1," potentially enabling unauthorized cross-domain requests.
FortifyObjectiveCParameterTamperingSpecialCharacters	2	Parameter Tampering	Processing of user supplied input without proper validation could allow an attacker to gain unauthorized access to server resources, extract information from a database, or execute arbitrary operating-system level commands.
FortifyObjectiveCPasswordManagement	2	Password Management	Storing a password in plain text can result in a system compromise.
FortifyObjectiveCPasswordManagementEmptyPassword	2	Password Management	Empty passwords may compromise system security in a way that cannot be easily remedied.
FortifyObjectiveCPasswordManagementHardcodedPassword	2	Password Management	Hardcoded passwords could compromise system security in a way that cannot be easily remedied.
FortifyObjectiveCPasswordManagementInsecureSubmission	2	Password Management	Submitting a password as part of an HTTP GET request will cause the password to be displayed, logged, or stored in a cache.
FortifyObjectiveCPasswordManagementNullPassword	2	Password Management	Null passwords can compromise security.
FortifyObjectiveCPasswordManagementPasswordinHTMLForm	2	Password Management	Populating password fields in an HTML form could result in a system compromise.
FortifyObjectiveCPasswordManagementWeakCryptography	2	Password Management	Obscuring a password with trivial encoding does not protect the password.
FortifyObjectiveCPasswordManagementWeakPasswordPolicy	2	Password Management	Weak passwords can be easily guessed and are an easy target for brute force attacks. This can lead to an authentication system failure and compromise system security.
FortifyObjectiveCPathManipulation	3	Path Manipulation	Allowing user input to control paths used in file system operations could enable an attacker to access or modify otherwise protected files.
FortifyObjectiveCPathManipulationAbsolutePathTraversal	3	Path Manipulation	Allowing user to supply file paths to access without sufficient validation and access control checks could lead to sensitive data disclosure and potential recovery of proprietary business logic.
FortifyObjectiveCPathManipulationRelativePathOverwrite	3	Path Manipulation	Anomalous handling of relative paths by an application server may allow attackers to bypass existing protections for vulnerabilities such as Cross-Site Scripting and provide new ways to attack the application.
FortifyObjectiveCPathManipulationSpecialCharacters	3	Path Manipulation	Use of unfiltered data in selection of requested application file path could lead to sensitive data disclosure and potential theft of proprietary business logic.
FortifyObjectiveCPathManipulationZipEntryOverwrite	3	Path Manipulation	Allowing user input to control paths used in file system operations could enable an attacker to arbitrarily overwrite files on the system.
FortifyObjectiveCPoorErrorHandlingColdFusionError	3	Poor Error Handling	The target ColdFusion application reveals potentially sensitive information within a publicly-displayed error message.
FortifyObjectiveCPredicateInjection	1	Predicate Injection	Constructing a dynamic NSPredicate with input that comes from an untrusted source may allow an attacker to modify the statement's meaning.
FortifyObjectiveCPrivacyViolation	2	Privacy Violation	Mishandling private information, such as customer passwords or social security numbers, can compromise user privacy and is often illegal.
FortifyObjectiveCPrivacyViolationAutocomplete	2	Privacy Violation	Autocompletion of forms allows some browsers to retain sensitive information in their history.
FortifyObjectiveCPrivacyViolationCaliforniaDriverLicenseNumber	2	Privacy Violation	Revealing driver license numbers could contribute to successful identity theft attempts.
FortifyObjectiveCPrivacyViolationCreditCardNumber	2	Privacy Violation	Revealing a credit card number could pose a significant financial risk to the user and also contribute to successful identity theft attempts.
FortifyObjectiveCPrivacyViolationDatabaseConnectionString	2	Privacy Violation	Revealing database connection details through hardcoded connection strings can lead to data theft and data corruption by unauthorized parties.
FortifyObjectiveCPrivacyViolationEmailDisclosure	2	Privacy Violation	Disclosure of a personal email address can compromise an individual's identity, their privacy and is in direct violation of the EU General Data Protection Regulation (GDPR).
FortifyObjectiveCPrivacyViolationGeolocation	2	Privacy Violation	The target mobile application sends device geolocation data in a request to an external host.
FortifyObjectiveCPrivacyViolationHealthInformation	2	Privacy Violation	The identified function mishandles health information. This program could compromise user privacy.
FortifyObjectiveCPrivacyViolationHTTPGET	2	Privacy Violation	The identified call uses the HTTP GET instead of POST method to send data to the server.
FortifyObjectiveCPrivacyViolationiCloudSynchronizedCredentials	2	Privacy Violation	The identified method initializes a new synchronizable NSURLCredential which will be distributed to all synchronized devices and stored in Apple's iCloud environment.
FortifyObjectiveCPrivacyViolationIncompleteCredentialRemoval	2	Privacy Violation	The identified method removes an NSURLCredential instance locally but fails to remove the copy stored on other devices and iCloud.
FortifyObjectiveCPrivacyViolationInconsistentFeedback	2	Privacy Violation	When entering an invalid user name or password during a login, forgotten password or new user signup function, an application may provide meaningful feedback through a response discrepancy. For the potential attacker, this discrepancy increases the chances of a successful brute force attack against the site's authentication.
FortifyObjectiveCPrivacyViolationiOSPropertyList	2	Privacy Violation	Private information which is stored and not protected, such as passwords in a clear-text file, endangers system security.
FortifyObjectiveCPrivacyViolationKeyboardCaching	2	Privacy Violation	The identified field mishandles confidential information by allowing sensitive input without also taking the appropriate measures to disable iOS' keyboard caching mechanism.
FortifyObjectiveCPrivacyViolationNationalIDDisclosure	2	Privacy Violation	Disclosure of a person's national identification number can compromise an individual's identity, their privacy and is in direct violation of the EU General Data Protection Regulation (GDPR).
FortifyObjectiveCPrivacyViolationScreenCaching	2	Privacy Violation	iOS will automatically take a screenshot before an app is backgrounded (i.e. hitting the "Home" button when the app is active). This may compromise user privacy if sensitive information is on display while this occurs.
FortifyObjectiveCPrivacyViolationSensitiveDataAccessibleFromiTunes	2	Privacy Violation	The identified method writes sensitive data to the public Documents directory without properly masking it first.
FortifyObjectiveCPrivacyViolationShoulderSurfing	2	Privacy Violation	A viewed password endangers system security.
FortifyObjectiveCPrivacyViolationSocialSecurityNumber	2	Privacy Violation	Revealing a social security number could contribute to successful identity theft attempts.
FortifyObjectiveCResourceInjection	1	Resource Injection	Allowing user input to control resource identifiers could enable an attacker to access or modify otherwise protected system resources.
FortifyObjectiveCSAMLBadPracticesInsecureMessageIDImplementation	2	SAML Bad Practices	SAML message that do not provide same unique ID for AuthnRequest, InResponseTo attributes and a unique ID for SAML Assertion  might be susceptible to replay attacks.
FortifyObjectiveCSAMLBadPracticesInsufficientMessageExpiration	2	SAML Bad Practices	Failure to properly restrict validity period for SAML Assertion could allow an attacker to carry out SAML Replay attacks.
FortifyObjectiveCSAMLBadPracticesMissingAssertionSignature	2	SAML Bad Practices	Service provider can not prove validity and integrity of SAML responses that are not cryptographically signed.
FortifyObjectiveCServerSideScriptInjection	1	Server-Side Script Injection	Failure to validate user-supplied input could allow an attacker to bypass authentication, steal sensitive information or trigger a denial of service condition.
FortifyObjectiveCSessionFixationOAuth	2	Session Fixation	Authenticating a user without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.
FortifyObjectiveCSessionManagementEasytoGuessSessionIdentifierName	2	Session Management	An easy-to-guess session identifier name can be used by an attacker for hijacking sessions or application reconnaissance.
FortifyObjectiveCSessionManagementInsufficientSessionIDEntropy	2	Session Management	Session identifiers with entropy lower than 64 bits can allow attackers to hijack legitimate user session and lead to information theft.
FortifyObjectiveCSessionManagementInsufficientSessionIDLength	2	Session Management	Session identifiers should be at least 128 bits long to prevent brute-force session guessing attacks.
FortifyObjectiveCSettingManipulationCharacterSet	3	Setting Manipulation	Allowing external control of system settings can disrupt service or cause an application to behave in unexpected ways.
FortifyObjectiveCSystemInformationLeak	2	System Information Leak	Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.
FortifyObjectiveCSystemInformationLeakCVSEntries	2	System Information Leak	Insufficient access control could reveal system information and allow an attacker to better map the application attack surface.
FortifyObjectiveCSystemInformationLeakExternal	2	System Information Leak	Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.
FortifyObjectiveCSystemInformationLeakInternal	2	System Information Leak	Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.
FortifyObjectiveCSystemInformationLeakInternalIP	2	System Information Leak	Disclosing the IP addressing scheme of the internal network can allow attackers to discover internal systems and expand the attack surface.
FortifyObjectiveCSystemInformationLeakiOSPropertyList	2	System Information Leak	System information which is stored and not protected, such as device IDs in a clear-text file, endangers system security. Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.
FortifyObjectiveCSystemInformationLeakLDAPError	2	System Information Leak	Revealing verbose error messages could allow an attacker to learn about the application and form a plan of attack.
FortifyObjectiveCSystemInformationLeakLDAPQuery	2	System Information Leak	Disclosure of LDAP queries can allow attackers to retrieve information from an LDAP server using LDAP injection.
FortifyObjectiveCSystemInformationLeakSQLQuery	2	System Information Leak	Disclosing SQL queries used by an application to communicate with the backend database could allow an attacker to steal sensitive information, manipulate the application's behavior or interrupt the database operation.
FortifyObjectiveCSystemInformationLeakXPathError	2	System Information Leak	Revealing detailed error messages could allow an attacker to learn about the application and form a plan of attack.
FortifyObjectiveCSystemInformationLeakXPathQuery	2	System Information Leak	Disclosing XPath queries used by an application to interact with XML documents could allow an attacker to steal sensitive information or disrupt the execution of the application.
FortifyObjectiveCTrustBoundaryViolation	3	Trust Boundary Violation	Commingling trusted and untrusted data in the same data structure encourages programmers to mistakenly trust unvalidated data.
FortifyObjectiveCUnreleasedResourceStreams	4	Unreleased Resource	The program can potentially fail to release a system resource.
FortifyObjectiveCUnsafeReflection	3	Unsafe Reflection	An attacker may be able to create unexpected control flow paths through the application, potentially bypassing security checks.
FortifyObjectiveCWeakCryptographicHash	1	Weak Cryptographic Hash	Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.
FortifyObjectiveCWeakCryptographicHashEmptyPBESalt	1	Weak Cryptographic Hash	An empty salt may compromise system security in a way that cannot be easily remedied.
FortifyObjectiveCWeakCryptographicHashHardcodedPBESalt	1	Weak Cryptographic Hash	A hardcoded salt may compromise system security in a way that cannot be easily remedied.
FortifyObjectiveCWeakCryptographicHashInsecurePBEIterationCount	1	Weak Cryptographic Hash	The iteration count used by a password-based key derivation function is too low.
FortifyObjectiveCWeakCryptographicHashNullPBESalt	1	Weak Cryptographic Hash	A null (nil) salt may compromise system security in a way that cannot be easily remedied.
FortifyObjectiveCWeakCryptographicHashUserControlledPBESalt	1	Weak Cryptographic Hash	Potentially tainted user inputs should not be passed as the salt parameter to a Password-Based Key Derivation Function (PBKDF).
FortifyObjectiveCWeakEncryption	1	Weak Encryption	The identified call uses a weak encryption algorithm that cannot guarantee the confidentiality of sensitive data.
FortifyObjectiveCWeakEncryptionInsecureInitializationVector	1	Weak Encryption	Initialization vectors should be created using a cryptographic pseudorandom number generator.
FortifyObjectiveCWeakEncryptionInsecureModeofOperation	1	Weak Encryption	Cryptographic encryption algorithms should not be used with an insecure mode of operation.
FortifyObjectiveCWeakEncryptionInsufficientKeySize	1	Weak Encryption	An otherwise strong encryption algorithm is vulnerable to brute-force attack when an insufficient key size is used.
FortifyObjectiveCWeakEncryptionUserControlledKeySize	1	Weak Encryption	Encryption functions that take a key size parameter should not be passed a tainted key size value.
FortifyObjectiveCWeakWSSecurityPolicyInsecureTransport	1	Weak WS-SecurityPolicy	The application configuration should ensure that HTTPS is used to transport all sensitive information.
FortifyObjectiveCWeakWSSecurityPolicyInsufficientSupportingTokenProtection	1	Weak WS-SecurityPolicy	The integrity of tokens cannot be guaranteed on unsigned tokens. Similarly, the confidentiality of tokens cannot be guaranteed on unencrypted tokens.
FortifyObjectiveCWeakWSSecurityPolicyMissingEncryptiononMessageAttachments	1	Weak WS-SecurityPolicy	Unencrypted messages fail to protect confidentiality.
FortifyObjectiveCWeakWSSecurityPolicyMissingEncryptiononMessageBody	1	Weak WS-SecurityPolicy	Unencrypted messages fail to protect confidentiality.
FortifyObjectiveCWeakWSSecurityPolicyMissingEncryptiononMessageHeaders	1	Weak WS-SecurityPolicy	Unencrypted messages fail to protect confidentiality.
FortifyObjectiveCWeakWSSecurityPolicyMissingEncryptionToken	1	Weak WS-SecurityPolicy	Unencrypted messages fail to protect confidentiality.
FortifyObjectiveCWeakWSSecurityPolicyMissingInitiatorEncryptionToken	1	Weak WS-SecurityPolicy	Unencrypted messages fail to protect confidentiality.
FortifyObjectiveCWeakWSSecurityPolicyMissingInitiatorSignatureToken	1	Weak WS-SecurityPolicy	A missing signature means the integrity of a SOAP message cannot be guaranteed.
FortifyObjectiveCWeakWSSecurityPolicyMissingRecipientEncryptionToken	1	Weak WS-SecurityPolicy	Unencrypted messages fail to protect confidentiality.
FortifyObjectiveCWeakWSSecurityPolicyMissingRecipientSignatureToken	1	Weak WS-SecurityPolicy	A missing signature means the integrity of a SOAP message cannot be guaranteed.
FortifyObjectiveCWeakWSSecurityPolicyMissingSignatureonMessageAttachments	1	Weak WS-SecurityPolicy	A missing signature means the integrity of a SOAP message cannot be guaranteed.
FortifyObjectiveCWeakWSSecurityPolicyMissingSignatureonMessageBody	1	Weak WS-SecurityPolicy	A missing signature means the integrity of a SOAP message cannot be guaranteed.
FortifyObjectiveCWeakWSSecurityPolicyMissingSignatureonMessageHeaders	1	Weak WS-SecurityPolicy	A missing signature means the integrity of a SOAP message cannot be guaranteed.
FortifyObjectiveCWeakWSSecurityPolicyMissingSignatureToken	1	Weak WS-SecurityPolicy	A missing signature means the integrity of a SOAP message cannot be guaranteed.
FortifyObjectiveCWeakWSSecurityPolicyMissingTimestamp	1	Weak WS-SecurityPolicy	A missing timestamp can leave a SOAP message open to replay attacks.
FortifyObjectiveCWeakWSSecurityPolicyTokensNotProtected	1	Weak WS-SecurityPolicy	When token protection is not enabled, the integrity of tokens might not be guaranteed since token protection enforces token signing.
FortifyObjectiveCWeakWSSecurityPolicyWeakToken	1	Weak WS-SecurityPolicy	Using a UsernameToken with a plain text password over an unencrypted channel exposes the password to attackers who can sniff the SOAP messages.
FortifyObjectiveCWeakXMLSchemaLaxProcessing	3	Weak XML Schema	When the processContents attribute is set to lax or skip, no input validation is performed for wildcard elements and attributes.
FortifyObjectiveCWeakXMLSchemaTypeAny	3	Weak XML Schema	The <any> element makes it easier to perform attacks like XML injection.
FortifyObjectiveCWeakXMLSchemaUnboundedOccurrences	3	Weak XML Schema	Setting a maxOccurs value to unbounded can lead to resources exhaustion and ultimately a denial of service.
FortifyObjectiveCWeakXMLSchemaUndefinedNamespace	3	Weak XML Schema	Specifying a namespace of ##any in the <any> element means the schema allows elements beyond what is explicitly defined in the schema, thereby making it easier to craft malicious documents.
FortifyObjectiveCWebServerMisconfigurationAccountInformation	2	Web Server Misconfiguration	Disclosure of user account information could allow an attacker to impersonate a user with higher privileges, steal sensitive information or execute arbitrary commands.
FortifyObjectiveCWebServerMisconfigurationCaseSensitivity	2	Web Server Misconfiguration	Failure to properly restrict access to application resources could allow an attacker to steal sensitive information.
FortifyObjectiveCWebServerMisconfigurationDeprecatedSSLTLSCertificate	2	Web Server Misconfiguration	Use of a deprecated SSL/TLS certificate on the target server can compromise the privacy and integrity of user data on the communication channel.
FortifyObjectiveCWebServerMisconfigurationDirectoryListing	2	Web Server Misconfiguration	Listing directory contents without restriction can expose sensitive information and private resources.
FortifyObjectiveCWebServerMisconfigurationExpiredSSLCertificate	2	Web Server Misconfiguration	Presenting an invalid certificate breaks the trust relationship between the client and the server and could also make it easier for an attacker to trick victim into accepting a spoofed SSL certificate.
FortifyObjectiveCWebServerMisconfigurationHTTPBasicAuthentication	2	Web Server Misconfiguration	Using HTTP Basic authentication mechanism over insecure channel can allow attackers to steal credentials.
FortifyObjectiveCWebServerMisconfigurationInformationDisclosure	2	Web Server Misconfiguration	Failure to restrict access to files could lead to exposure of sensitive information or interfaces.
FortifyObjectiveCWebServerMisconfigurationInsecureContentTypeSetting	2	Web Server Misconfiguration	Failure to correctly enforce the content-type could allow an attacker to conduct Cross-Site Scripting or information theft attacks.
FortifyObjectiveCWebServerMisconfigurationInsecureMappingDirectives	2	Web Server Misconfiguration	Misconfiguration of mapping directives can allow attackers to gain unauthorized access to sensitive resources.
FortifyObjectiveCWebServerMisconfigurationMissingUnicodeCharset	2	Web Server Misconfiguration	Allowing user input to control the web page's character set could allow an attacker to bypass application's user input filters.
FortifyObjectiveCWebServerMisconfigurationOpenProxyAccess	2	Web Server Misconfiguration	A proxy server allowing CONNECT or GET requests without any restriction can enable an attacker to masquerade the origin of their attacks or access resources internal to the network.
FortifyObjectiveCWebServerMisconfigurationOPTIONSHTTPMethod	2	Web Server Misconfiguration	Revealing the HTTP methods supported by web server configuration helps an adversary learn further about the system and form a specific plan of attack.
FortifyObjectiveCWebServerMisconfigurationRequestThrottlingNotEnabled	2	Web Server Misconfiguration	Misconfiguration of a server could leave the application vulnerable to Denial of Service attacks.
FortifyObjectiveCWebServerMisconfigurationResponseHeaders	2	Web Server Misconfiguration	Each browser responds differently to an incorrectly formatted response header which may pose security implication.
FortifyObjectiveCWebServerMisconfigurationServerErrorMessage	2	Web Server Misconfiguration	Server error responses could offer invaluable information about the application and the server allowing an attacker to formulate more effective attack payloads.
FortifyObjectiveCWebServerMisconfigurationServiceEnumeration	2	Web Server Misconfiguration	Allowing public access to a web services description document could allow an attacker to gain unauthorized access to critical server data.
FortifyObjectiveCWebServerMisconfigurationServletRuntimeError	2	Web Server Misconfiguration	Unhandled runtime exceptions could reveal sensitive system information or lead to denial of service conditions.
FortifyObjectiveCWebServerMisconfigurationSOAPExceptionMessage	2	Web Server Misconfiguration	An unhandled SOAP exception could reveal sensitive system information or trigger a denial of service condition.
FortifyObjectiveCWebServerMisconfigurationSSLCertificateHostnameDiscrepancy	2	Web Server Misconfiguration	Incorrect SSL certificate information can cause the validation process to fail, negating the security benefits of using a certificate to verify the server is trusted.
FortifyObjectiveCWebServerMisconfigurationUnprotectedDirectory	2	Web Server Misconfiguration	Insecure deployment and exposure of directories can supply attackers with invaluable information about the application enabling them to conduct targeted attacks.
FortifyObjectiveCWebServerMisconfigurationUnprotectedFile	2	Web Server Misconfiguration	Insecure deployment and exposure of files can supply attackers with invaluable information about the application enabling them to orchestrate targeted attacks.
FortifyObjectiveCWebServerMisconfigurationWeakAuthentication	2	Web Server Misconfiguration	Insecure configuration of a web server's authentication module could allow an attacker to gain administrative privileges and orchestrate complete system compromise.
FortifyObjectiveCXMLExternalEntityInjection	1	XML External Entity Injection	The identified method allows external entity references. This call could allow an attacker to inject an XML external entity into the XML document to reveal the contents of files or internal network resources.
FortifyObjectiveCXMLInjection	1	XML Injection	The identified method writes unvalidated XML input. This call could allow an attacker to inject arbitrary elements or attributes into the XML document.
FortifyObjectiveCXPathInjection	1	XPath Injection	Constructing a dynamic XPath query with user input could allow an attacker to modify the statement's meaning.
