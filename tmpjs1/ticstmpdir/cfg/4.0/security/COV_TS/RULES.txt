// Coverity 2022.03 and below
COV_CONFIG.ENABLED_DEBUG_MODE_TYPESCRIPT	3	Audit impact security	Having a debug statement in the production code leads to security risks because it modifies the behavior of the application in an unexpected way.
COV_CONFIG.HARDCODED_CREDENTIALS_AUDIT_TYPESCRIPT	1	Audit impact security	Having hardcoded credentials in configuration files accessible to potentially malicious users leads an attacker using those credential to gain access to the application's data and services.
COV_CONFIG.HARDCODED_TOKEN_TYPESCRIPT	2	Audit impact security	Having a hardcoded token in configuration files accessible to potentially malicious users leads to security risks, because an attacker could use the token to gain access to application's data and services.
COV_CORS_MISCONFIGURATION_AUDIT_TYPESCRIPT	2	Audit impact security	Allowing an attacker to specify any HTTP header on a CORS request may help with bypassing authorization and CSRF controls.
COV_DNS_PREFETCHING_TYPESCRIPT	2	Audit impact security	DNS prefetching may leak sensitive information to an attacker on the same network by disclosing information about other resources used on the page.
COV_EXPRESS_WINSTON_SENSITIVE_LOGGING_TYPESCRIPT	2	Audit impact security	Storing sensitive information within log files may lead to financial loss or reputation damage to users and companies and assist attackers in gaining access to systems via information exposure.
COV_INSECURE_COOKIE_TYPESCRIPT	3	Audit impact security	While web browsers send cookies with the 'secure' attribute only over HTTPS, they do send cookies without it over HTTP. If an attacker can fool the victim's browser into sending an HTTP request to the vulnerable site (for example, with JavaScript code on a malicious page or with a phishing link), the victim's browser will send the vulnerable cookie in clear text. If the attacker can also intercept this network traffic, then they can steal the victim's session cookie and impersonate the victim.
COV_INSECURE_REFERRER_POLICY_TYPESCRIPT	2	Audit impact security	The Referrer-Policy HTTP header controls how browsers set the Referrer HTTP header, which may expose the page the user visited before.
COV_UNSAFE_BUFFER_METHOD_TYPESCRIPT	3	Audit impact security	If an attacker is able to read the contents of the uninitialized buffer objects, the attacker may access sensitive data from system memory.
COV_WEAK_URL_SANITIZATION_TYPESCRIPT	1	Audit impact security	Malicious URLs can bypass the weak regular expression. The incomplete check might cause attacks such as request forgeries and malicious redirects.

COV_ANGULAR_EXPRESSION_INJECTION_TYPESCRIPT	1	High impact security	An attacker may be able to maliciously affect the application's behavior by controlling an Angular expression.
COV_CORS_MISCONFIGURATION_TYPESCRIPT	1	High impact security	Dynamically setting the Access-Control-Allow-Origin header to reflect the origin of the request may allow a malicious origin to submit authenticated AJAX requests when the 'withCredentials' flag is enabled. This means that the malicious origin will be able to read the server's response to authenticated requests.
COV_OPEN_REDIRECT_TYPESCRIPT	1	High impact security	An attacker can instantiate arbitrary classes, possibly resulting in a denial of service or potentially unintended code execution.
COV_PATH_MANIPULATION_TYPESCRIPT	1	High impact security	An attacker may access, modify, or corrupt files that contain sensitive information or are critical to the application.
COV_REGEX_INJECTION_TYPESCRIPT	1	High impact security	An attacker that can intercept network traffic can recover the sensitive data
COV_RISKY_CRYPTO_TYPESCRIPT	1	High impact security	Controllers that execute actions or tasks may be accessed to perform activities without the user's knowledge or authorization. These attacks are difficult to distinguish from legitimate requests.
COV_SENSITIVE_DATA_LEAK_TYPESCRIPT	1	High impact security	Attackers can read the sensitive data from the cookie with widely available tools.
COV_SQLI_TYPESCRIPT	1	High impact security	A user can change the intent of the SQL query, which may inappropriately disclose or corrupt data within the database.
COV_TEMPLATE_INJECTION_TYPESCRIPT	1	High impact security	An attacker may be able to alter the behavior of the program in an unintended way or run malicious code.
COV_UNSAFE_DESERIALIZATION_TYPESCRIPT	1	High impact security	A user can execute arbitrary JavaScript on a web page viewed or accessed by another user, potentially allowing session hijacking, disclosing sensitive data in the DOM, or viewing of keyboard and mouse events.
COV_XSS_TYPESCRIPT	1	High impact security	A user can change the intent of an operating system command. This change may result in the disclosure, destruction, or modification of sensitive data or operating system resources.

COV_AWS_INSUFFICIENT_PRESIGNED_URL_TIMEOUT_TYPESCRIPT	3	Low impact security	A longer expiration time on a presigned URL for a GET or a POST request provides a larger window of opportunity for an attacker to steal and abuse the presigned resource or functionality.
COV_CONFIG.COOKIE_SIGNING_DISABLED_TYPESCRIPT	3	Low impact security	A malicious user may easily change the value of the cookie and thus abuse any functionality that uses session data.
COV_CONFIG.CORDOVA_PERMISSIVE_WHITELIST_TYPESCRIPT	3	Low impact security	Allowing unrecognized URLs to be handled by other applications on the device may result in information leakage or phishing attacks.
COV_CONFIG.JSONWEBTOKEN_NON_EXPIRING_TOKEN_TYPESCRIPT	3	Low impact security	Not setting the expiration time on the token or setting it to an extremely large value increases the window of opportunity for an attacker to gain sensitive information or access sensitive functionality with the stolen token.
COV_CONFIG.REQUEST_STRICTSSL_DISABLED_TYPESCRIPT	3	Low impact security	The code does not validate the SSL certificate used to request resources which may lead to man-in-the-middle attacks and leaking sensitive data.
COV_CONFIG.SEQUELIZE_ENABLED_LOGGING_TYPESCRIPT	3	Low impact security	Logging every SQL query to the console or a log file will result in leaking sensitive information into logs and, potentially, storing sensitive data unencrypted.
COV_CONFIG.SEQUELIZE_INSECURE_CONNECTION_TYPESCRIPT	3	Low impact security	Establishing an insecure connection between the database and the server will result in leaking sensitive information as all queries are transmitted over that channel.
COV_CONFIG.SOCKETIO_ORIGINS_ACCEPT_ALL_TYPESCRIPT	3	Low impact security	Setting the origins field for the Socket.IO server to a wildcard opens up the server instance to connections from any origins, and thus, may cause denial of service situations and sensitive data leakage.
COV_CONFIG.UNSAFE_SESSION_TIMEOUT_TYPESCRIPT	3	Low impact security	Session-based attacks require an active session. The longer a session lasts, the longer an attacker has to steal and hijack it.
COV_CONFIG.VUE_ROUTER_PARAMS_EXPOSED_TO_PROPS_TYPESCRIPT	3	Low impact security	This issue does not necessarily manifest a security vulnerability, but it demonstrates a bad practice that may lead to information exposure.
COV_COOKIE_INJECTION_TYPESCRIPT	3	Low impact security	An attacker may be able to set a session ID (session fixation), change the scope or expiration time of a cookie, and otherwise affect the application's behavior by setting new cookies.
COV_EXPOSED_DIRECTORY_LISTING_TYPESCRIPT	3	Low impact security	An attacker can learn the names of files in this directory which can help them probe for insufficiently protected files or target path traversal attacks.
COV_EXPRESS_X_POWERED_BY_ENABLED_TYPESCRIPT	3	Low impact security	Knowing what software your server runs helps attackers exploit known vulnerabilities or craft more targeted exploits.
COV_INSECURE_RANDOM_TYPESCRIPT	3	Low impact security	An attacker may be able to set important HTTP headers and disable security protections or fix the session ID. The severity of the defect depends on which headers can be manipulated and if the attacker is able to directly or indirectly control the header value.
COV_INSUFFICIENT_PRESIGNED_URL_TIMEOUT_TYPESCRIPT	3	Low impact security	A longer expiration time on a presigned URL for a GET or a POST request provides a larger window of opportunity for an attacker to steal and abuse the presigned resource or functionality.
COV_LOCALSTORAGE_MANIPULATION_TYPESCRIPT	3	Low impact security	An attacker may be able to affect the behavior of the application by overwriting sensitive keys in localStorage.
COV_OS_CMD_INJECTION_TYPESCRIPT	3	Low impact security	An attacker may be able to retrieve sensitive information, alter the behavior of the program, or exhaust resources within the application.
COV_REACT_DYNAMIC_URL_INSECURE_TARGET_TYPESCRIPT	3	Low impact security	A malicious page linked with this link will be able to navigate the original page to an arbitrary site and perform a phishing attack.
COV_REVERSE_TABNABBING_TYPESCRIPT	3	Low impact security	A malicious page associated with this link will be able to navigate the original page to an arbitrary site, such as a phishing site, and thus, execute a reverse tabnabbing attack.
COV_SESSIONSTORAGE_MANIPULATION_TYPESCRIPT	3	Low impact security	An attacker may be able to affect the behavior of the application by overwriting sensitive keys in sessionStorage.
COV_SOCKET_ACCEPT_ALL_ORIGINS_TYPESCRIPT	3	Low impact security	Setting the origins field for the Socket.IO server to a wildcard opens up the server instance to connections from any origins, and thus, may cause denial of service situations and sensitive data leakage.
COV_TAINTED_ENVIRONMENT_WITH_EXECUTION_TYPESCRIPT	3	Low impact security	An attacker may be able to change what the process does, which could bypass security controls or disclose unauthorized data.
COV_UNRESTRICTED_MESSAGE_TARGET_TYPESCRIPT	3	Low impact security	A malicious site can intercept the message by changing the location of the window.
COV_URL_MANIPULATION_TYPESCRIPT	3	Low impact security	An attacker may access unintended server-side functionality or make the application access a malicious website.

COV_ANGULAR_ELEMENT_REFERENCE_TYPESCRIPT	2	Medium impact security	Reported for a call to ElementRef.nativeElement where the element's innerHTML attribute is written or querySelector is called on the element
COV_ANGULAR_SCE_DISABLED_TYPESCRIPT	2	Medium impact security	Disabling the Strict Contextual Escaping mode would make the application allow user controlled input to be rendered as as, which can introduce security vulnerabilities such as XSS.
COV_BAD_CERT_VERIFICATION_TYPESCRIPT	2	Medium impact security	Improper certificate verification may allow an attacker to spoof a trusted entity by using a man-in-the-middle attack.
COV_CONFIG.HANA_XS_PREVENT_XSRF_DISABLED_TYPESCRIPT	2	Medium impact security	Application request handlers that execute actions or update state may be hijacked to perform activities without the user's knowledge or authorization.
COV_CSRF_TYPESCRIPT	2	Medium impact security	An attacker can mount a phishing attack by modifying the URL value to point to a malicious Web site.
COV_CSS_INJECTION_TYPESCRIPT	2	Medium impact security	An attacker may be able to steal information contained in the web page, or leverage this CSS injection to facilitate phishing attacks.
COV_DOM_XSS_TYPESCRIPT	2	Medium impact security	A user can execute arbitrary JavaScript on a web page viewed or accessed by another user, potentially allowing session hijacking, disclosing sensitive data in the DOM, or viewing of keyboard and mouse events.
COV_HARDCODED_CREDENTIALS_TYPESCRIPT	2	Medium impact security	Users with access to source code can use this password to gain access to services or data at a protected URI. The credentials may also be visible as clear text whenever the full URI is logged, stored, or transmitted insecurely.
COV_HEADER_INJECTION_TYPESCRIPT	2	Medium impact security	An attacker can change the intent of the NoSQL query, which may bypass security controls or disclose unauthorized data.
COV_INSECURE_COMMUNICATION_TYPESCRIPT	2	Medium impact security	Having an unencrypted connection allows an attacker to eavesdrop and tamper with the data sent on the channel.
COV_INSECURE_SALT_TYPESCRIPT	2	Medium impact security	Given the salt and the output of a hash function, an attacker with enough resources can feasibly compute the input that yields that output. Re-using the same salt for many uses of the hash function reduces the cost for the attacker to reverse a large number of hashes.
COV_INSUFFICIENT_LOGGING_TYPESCRIPT	2	Medium impact security	Shows a branch or method that handles an error condition where the code does not log the event
COV_JSONWEBTOKEN_IGNORED_EXPIRATION_TIME_TYPESCRIPT	2	Medium impact security	Since the token never expires, an attacker has a longer window to brute-force or exploit the stolen the token.
COV_JSONWEBTOKEN_UNTRUSTED_DECODE_TYPESCRIPT	2	Medium impact security	Not verifying JWT signatures allows attackers to forge or change JWT tokens and thus gain user privileges, read sensitive data, execute sensitive commands, depending on the application functionality.
COV_LOCALSTORAGE_WRITE_TYPESCRIPT	2	Medium impact security	A write to the localStorage using a native JavaScript API or through one of the Angular localStorage plugins: ngx-pwa or angularwebstorage-service
COV_MISSING_AUTHZ_TYPESCRIPT	2	Medium impact security	Processing an arbitrary DTD without limiting entity expansion may result in parsing a large number of entities, causing denial of service.
COV_MISSING_IFRAME_SANDBOX_TYPESCRIPT	2	Medium impact security	An attacker may break out of the iframe and mount a Clickjacking or Phishing attack.
COV_NOSQL_QUERY_INJECTION_TYPESCRIPT	2	Medium impact security	Missing or insufficient authorization may permit unintended users to perform actions or access sensitive data for which they do not have permission.
COV_SA.RISKY_CRYPTO_TYPESCRIPT	2	Medium impact security	A use of an insecure SSL connection protocol was detected.
COV_SCRIPT_CODE_INJECTION_TYPESCRIPT	2	Medium impact security	An attacker with access to the database can read this sensitive data.
COV_UNCHECKED_ORIGIN_TYPESCRIPT	2	Medium impact security	An attacker can send arbitrary data via event messages, which may lead to DOM-XSS or other injection-based client-side security issues.
COV_UNLESS_CASE_SENSITIVE_ROUTE_MATCHING_TYPESCRIPT	2	Medium impact security	A case-sensitive negative regex route matching may allow an attacker to bypass authentication by providing a route using characters in different cases.
COV_XML_EXTERNAL_ENTITY_TYPESCRIPT	2	Medium impact security	A use of a weak hashing algorithm was detected. There exist well known ways to produce collisions on the hashes.

COV_SIGMA.certificate_verification_disabled_node_request_reject_unauthorized_TYPESCRIPT	1	Sigma: High impact security	Certificate verification disabled: The application disables certificate validation which leads to a rogue certificate not being rejected when its signature cannot be verified by any of the certificate authorities. This allows for an insecure connection and a man-in-the-middle attack.
COV_SIGMA.certificate_verification_disabled_socket_io_TYPESCRIPT	1	Sigma: High impact security	Certificate verification disabled: Certificate validation is disabled, which means that any certificate, including rogue certificates, will be accepted even if its signature cannot be verified by any certificate authority. Accepting certificates in this manner can open the application up to a man-in-the-middle attack.
COV_SIGMA.cors_with_credentials_all_origin_koa_TYPESCRIPT	1	Sigma: High impact security	CORS configuration allows credentialed requests from all origins: The `origin` option of the `@koa/cors`, `koa-cors` or `koa2-cors` middleware is set to either the wildcard `*` or `true` (the default value), loosening CORS controls and allowing any origin to read the response. This means that a malicious origin will be able to submit authenticated AJAX requests with the `credentials` flag enabled and read the server's response to those authenticated requests.
COV_SIGMA.empty_encryption_key_node_crypto_TYPESCRIPT	1	Sigma: High impact security	Empty encryption key: The application calls a `crypto` function with an encryption key argument set to `null` or the empty string. An attacker with access to the encrypted data can easily decrypt it by guessing the null or empty key.
COV_SIGMA.file_upload_misconfiguration_of_fields_express_TYPESCRIPT	1	Sigma: High impact security	Unrestricted number of uploaded file/non-file fields: The `express-fileupload` module does not restrict the number of file/non-file fields in a single request. Thus, a denial-of-service attack is possible, because an attacker may submit a very large number of file/non-file fields in one request.
COV_SIGMA.file_upload_misconfiguration_of_fields_multer_TYPESCRIPT	1	Sigma: High impact security	Unrestricted number of uploaded file/non-file fields: The `multer` module does not restrict the number of file/non-file fields in a single request.  Thus, a denial-of-service attack is possible, because an attacker may submit a very large number  of file/non-file fields in one request.
COV_SIGMA.file_upload_misconfiguration_of_filesize_express_TYPESCRIPT	1	Sigma: High impact security	File upload with unrestricted filesize: The `express-fileupload` module does not restrict the size of the uploaded file. Thus, a denial-of-service attack is possible, because an attacker may submit a series of requests with very large files and use up all the space on the server.
COV_SIGMA.file_upload_misconfiguration_of_filesize_multer_TYPESCRIPT	1	Sigma: High impact security	File upload with unrestricted filesize: The `multer` module does not restrict the size of the uploaded file. Thus, a denial-of-service  attack is possible, because an attacker may submit a series of requests with very large files and  use up all the space on the server.
COV_SIGMA.file_upload_misconfiguration_of_temp_files_express_TYPESCRIPT	1	Sigma: High impact security	Memory buffers used for uploaded files: Memory buffers are used for managing uploads in the `express-fileupload` module. Thus, a denial-of-service attack is possible, because an attacker may submit a very large number of file fields in one request and exhaust the server memory.
COV_SIGMA.missing_tls_node_grpc_TYPESCRIPT	1	Sigma: High impact security	Missing TLS: The application creates a gRPC connection to a gRPC client or server without encryption. As a result, application data is transmitted over an insecure channel where it can be read and modified by attackers.
COV_SIGMA.certificate_verification_disabled_node_request_strict_ssl_TYPESCRIPT	3	Sigma: Low impact security	The request module establishes a connection over SSL, but does not validate the SSL certificate. The strictSSL setting is set to false, and therefore, a rogue certificate will be trusted. This may lead to man-in-the-middle attacks and sensitive data leaks when resources are requested.
COV_SIGMA.cors_no_credentials_permissive_origin_apollo_graphql_TYPESCRIPT	3	Sigma: Low impact security	The Apollo Server enables the default cross-origin resource sharing (CORS) configuration by setting the cors option to true. As a result, server responses will be shared with all origins.
COV_SIGMA.debug_enabled_apollo_graphql_js_TYPESCRIPT	3	Sigma: Low impact security	The Apollo Server has the debug option set to true enabling development mode helpers which results in verbose logging and client error messages that include full stack traces
COV_SIGMA.deprecated_file_upload_apollo_graphql_js_TYPESCRIPT	3	Sigma: Low impact security	The Apollo Server uses the built-in file upload module which is not fully supported in Node 14 and later, resulting in unexpected behavior. The Apollo GraphQL documentation warns against using this built-in module and states it will be removed in Apollo Server 3.
COV_SIGMA.file_upload_misconfiguration_filesize_graphql_js_TYPESCRIPT	3	Sigma: Low impact security	The file upload middleware from the graphql-module is missing the maxFileSize options. As a result, a malicious user can upload extremely large files to exhause server-side resources and create a denial of service condition.
COV_SIGMA.file_upload_misconfiguration_max_files_graphql_js_TYPESCRIPT	3	Sigma: Low impact security	The file upload middleware from the graphql-module is missing the maxFiles options. As a result, a malicious user can upload an unlimited number of files to exhause server-side resources and create a denial of service condition.
COV_SIGMA.file_upload_misconfiguration_of_fields_busboy_TYPESCRIPT	3	Sigma: Low impact security	The busboy module does not restrict the number of file/non-file fields in a single request. Thus, a denial-of-service attack is possible, because an attacker may submit a very large number of file/non-file fields in one request.
COV_SIGMA.file_upload_misconfiguration_of_filesize_busboy_TYPESCRIPT	3	Sigma: Low impact security	The busboy module does not restrict the size of the uploaded file. Thus, a denial-of-service attack is possible, because an attacker may submit a series of requests with very large files and use up all the space on the server.
COV_SIGMA.insecure_network_bind_apollo_graphql_js_TYPESCRIPT	3	Sigma: Low impact security	The Apollo GraphQL server binds to all network interfaces, possibly exposing it to unintended networks.
COV_SIGMA.introspection_enabled_apollo_graphql_js_TYPESCRIPT	3	Sigma: Low impact security	The Apollo GraphQL server has introspection enabled, exposing query schema data. An attacker can use this information to facilitate subsequent attacks against the query schema.
COV_SIGMA.jwt_ignored_expiration_time_hapi_TYPESCRIPT	3	Sigma: Low impact security	Ignoring the expiration time for a JSON web token means it is valid forever. Since the token never expires, an attacker has a longer window to brute-force or exploit the stolen the token.
COV_SIGMA.jwt_ignored_expiration_time_jsonwebtoken_TYPESCRIPT	3	Sigma: Low impact security	Ignoring the expiration time for a JSON web token means it is valid forever. Since the token never expires, an attacker has a longer window to brute-force or exploit the stolen the token.
COV_SIGMA.jwt_ignored_start_time_hapi_TYPESCRIPT	3	Sigma: Low impact security	Ignoring the not-before setting of a JSON web token means it is valid immediately. The token is valid sooner than intended, and thus has a slightly larger window for an attacker to exploit it.
COV_SIGMA.jwt_ignored_start_time_jsonwebtoken_TYPESCRIPT	3	Sigma: Low impact security	Ignoring the not-before setting of a JSON web token means it is valid immediately. The token is valid sooner than intended, and thus has a slightly larger window for an attacker to exploit it.
COV_SIGMA.jwt_non_expiring_token_jsonwebtoken_TYPESCRIPT	3	Sigma: Low impact security	When the expiresIn field is not set in the options argument to the sign() method, the returned token is valid forever. This increases the window of opportunity for an attacker to gain sensitive information or access sensitive functionality with the stolen token.
COV_SIGMA.jwt_untrusted_decode_jsonwebtoken_TYPESCRIPT	3	Sigma: Low impact security	The application decodes a JWT using the decode() function, but does not verify the token signature beforehand. Thus, an attacker can use a forged token accepted by the application to gain user privileges, read sensitive data, or execute sensitive commands, depending on the application functionality.
COV_SIGMA.missing_tls_node_ftp_TYPESCRIPT	3	Sigma: Low impact security	Communication over the File Transfer Protocol (FTP) is not encrypted. Thus FTP traffic is sent in cleartext allowing the credentials and any data to easily be captured via MITM attacks, eavesdropping, or sniffing.
COV_SIGMA.missing_tls_node_http_TYPESCRIPT	3	Sigma: Low impact security	Performing an HTTP request with the insecure http protocol is dangerous as the server is attempting to connect to a website that does not encrypt traffic with TLS. If sensitive or security-critical data were sent in cleartext over a communication channel without TLS, that data can be sniffed by unauthorized actors.
COV_SIGMA.missing_tls_sequelize_TYPESCRIPT	3	Sigma: Low impact security	The sequelize module sets the ssl option to false, which is the default value. With that setting sequelize establishes an unencrypted connection between the database and the server. This may result in leaking sensitive data since every query is transmitted over an insecure channel.
COV_SIGMA.query_logging_enabled_sequelize_TYPESCRIPT	3	Sigma: Low impact security	The sequelize module sets the logging option to console.log, which is the default value. With that setting sequelize logs every query to the console. This might result in leaking sensitive data since console outputs are often streamed to log files when the application is deployed.
COV_SIGMA.broad_domain_attribute_cookie_express_TYPESCRIPT	3	Sigma: Low impact security	Broadly scoped session cookie domain: The `client-sessions`, `cookie-session` or `express-session` library sets a `domain` attribute on the session cookie that is overly broad, which allows any subdomain to share that cookie. If one of the subdomains becomes compromised, then an attacker is able to steal this cookie via a subdomain and impersonate the user in the parent domain.
COV_SIGMA.certificate_verification_disabled_node_restify_TYPESCRIPT	3	Sigma: Low impact security	Certificate verification disabled: The application disables certificate validation. This leads to a rogue certificate not being rejected when its signature cannot be verified by any of the certificate authorities, resulting in an insecure connection and a man-in-the-middle attack
COV_SIGMA.content_security_policy_disabled_express_helmet_TYPESCRIPT	3	Sigma: Low impact security	Content security policy disabled: The `helmet.contentSecurityPolicy` middleware is disabled. Disabling this middleware may increase the risk of Cross-Site Scripting (XSS) and data injection attacks.
COV_SIGMA.cookie_session_signing_disabled_express_TYPESCRIPT	3	Sigma: Low impact security	Cookie signing disabled: The `cookie-session` module disables the signing of the cookie allowing a malicious user to change the value of the cookie and thus abuse any functionality that uses session data.
COV_SIGMA.cors_configured_globally_express_cors_TYPESCRIPT	3	Sigma: Low impact security	CORS middleware configured globally: The CORS policies registered by the `cors` middleware are applied globally for the Express server. The CORS headers will be included for all routes, violating the principle of least privileges by loosening the browser's Same Origin Policy restrictions for the entire the application. This can lead to cross-origin information leakage.
COV_SIGMA.cors_configured_globally_koa_TYPESCRIPT	3	Sigma: Low impact security	CORS middleware configured globally: The CORS policies applied by the `@koa/cors`, `koa-cors` or `koa2-cors` middleware are registered globally. This means the CORS headers will be included for all routes, violating the principle of least privileges by loosening the browser's Same Origin Policy restrictions for the entire the application. This can lead to cross-origin information leakage.
COV_SIGMA.cors_no_credentials_permissive_origin_express_cors_TYPESCRIPT	3	Sigma: Low impact security	CORS configuration allows non-credentialed requests from all origins: The `origin` option of the `cors()` middleware is configured with the value wildcard `*` or `null` origins which bypass CORS controls and share the requested resource with any origin. As a result, internal application resources that can be accessed without authentication may be exposed to untrusted external origins via the user's browser.
COV_SIGMA.cors_no_credentials_permissive_origin_koa_TYPESCRIPT	3	Sigma: Low impact security	CORS configuration allows non-credentialed requests from all origins: The `origin` option of the `@koa/cors`, `koa-cors` or `koa2-cors` middleware is configured to the value wildcard `*` or `null` origins which bypass CORS controls and share the requested resource with any origin. As a result, internal application resources that can be accessed without authentication may be exposed to untrusted external origins via the user's browser.
COV_SIGMA.cors_no_credentials_permissive_origin_nestjs_TYPESCRIPT	3	Sigma: Low impact security	CORS configuration allows non-credentialed requests from all origins: The `Access-Control-Allow-Origin` header is configured to bypass CORS controls and share the requested resource with any origins, including a malicious one. If the resource is non-public, an attacker will be able to steal it.
COV_SIGMA.cors_origin_string_express_cors_TYPESCRIPT	3	Sigma: Low impact security	CORS origin configured as a single string: The `origin` option of the `cors()` middleware is configured with a single string value. As a result, the CORS policy will disclose the trusted origin to all other origins via the `Access-Control-Allow-Origin` header.
COV_SIGMA.cors_preflight_age_too_long_express_cors_TYPESCRIPT	3	Sigma: Low impact security	CORS Configuration preflight age too long: The `maxAge` option of the `cors` middleware is set to a value greater than 1800 seconds. This property sets how long the CORS preflight response is cached. An excessively long cache timeout increases the risk that changes to a server's CORS policy will not be honored by some user agents as they still use a cached response.
COV_SIGMA.cors_preflight_age_too_long_koa_TYPESCRIPT	3	Sigma: Low impact security	CORS Configuration preflight age too long: The `maxAge` option of the `@koa/cors`, `koa-cors` or `koa2-cors` middleware is set to a value greater than 1800 seconds. This property sets how long the CORS preflight response is cached. An excessively long cache timeout increases the risk that changes to a server's CORS policy will not be honored by some user agents as they still use a cached response.
COV_SIGMA.cors_preflight_age_too_long_nestjs_TYPESCRIPT	3	Sigma: Low impact security	CORS Configuration preflight age too long: The CORS preflight response caching time is too long. An excessively long cache timeout increases the risk that changes to a server's CORS policy will not be honored by some user agents as they still use a cached response.
COV_SIGMA.cors_with_credentials_all_origin_express_cors_TYPESCRIPT	3	Sigma: Low impact security	CORS configuration allows credentialed requests from all origins: The `origin` option of the `cors()` middleware is set to either the wildcard `*` (the default value) or `true`, loosening CORS controls and allowing any origin to read the response. This means that a malicious origin will be able to submit authenticated AJAX requests with the `credentials` flag enabled and read the server's response to those authenticated requests.
COV_SIGMA.cors_with_credentials_all_origin_nestjs_TYPESCRIPT	3	Sigma: Low impact security	CORS configuration allows credentialed requests from all origins: The CORS policy is set to allow credentials and it reflects any origin in the `origin`. Dynamically setting the `origin` to reflect the origin of the request may allow a malicious origin to submit authenticated AJAX requests when the `credentials` flag is enabled. This means that the malicious origin will be able to read the server's response to authenticated requests.
COV_SIGMA.csp_frame_ancestors_disabled_express_helmet_TYPESCRIPT	3	Sigma: Low impact security	CSP frame-ancestors protections disabled: The Content Security Policy (CSP) `frame-ancestors` directive is missing or configured with a scheme such as `https:` and `http:`. This can lead to clickjacking attacks by allowing an attacker to embed the application into their site.
COV_SIGMA.dns_prefetch_control_disabled_express_helmet_TYPESCRIPT	3	Sigma: Low impact security	DNS prefetch control disabled: The `helmet.dnsPrefetchControl` middleware is disabled. Disabling this middleware may increase the risk of user privacy exposure through data exfiltration.
COV_SIGMA.excessive_http_buffer_size_socket_io_TYPESCRIPT	3	Sigma: Low impact security	HTTP buffer size too large: The `maxHttpBufferSize` property in the `socket.io` module sets the upper limit on how many bytes a message can contain when polling, before the session is forcibly closed. Setting the buffer size too large may cause a denial of service situation when extremely long messages are sent to the server in a polling fashion, exhausting server resources.
COV_SIGMA.excessive_session_lifetime_connect_mongo_TYPESCRIPT	3	Sigma: Low impact security	Excessive session lifetime: The user sessions stored in the Mongo database are configured with an exceedingly long timeout value. Session-based attacks require an active session. Therefore, the longer a session lasts, the more time an attacker has to hijack the session.
COV_SIGMA.excessive_session_lifetime_connect_redis_TYPESCRIPT	3	Sigma: Low impact security	Excessive session lifetime: The user sessions stored in the Redis database are configured with an exceedingly long timeout value. Session-based attacks require an active session. Therefore, the longer a session lasts, the more time an attacker has to hijack the session.
COV_SIGMA.excessive_session_lifetime_express_client_sessions_TYPESCRIPT	3	Sigma: Low impact security	Excessive session lifetime: The session is configured with an exceedingly long timeout value when using the `client-sessions` library. Session-based attacks require an active session. Therefore, the longer a session lasts, the more time an attacker has to hijack the session.
COV_SIGMA.excessive_session_lifetime_express_cookie_session_TYPESCRIPT	3	Sigma: Low impact security	Excessive session lifetime: The session is configured with an exceedingly long timeout value when using the `cookie-session` library. Session-based attacks require an active session. Therefore, the longer a session lasts, the more time an attacker has to hijack the session.
COV_SIGMA.excessive_session_lifetime_express_session_TYPESCRIPT	3	Sigma: Low impact security	Excessive session lifetime: The session is configured with an exceedingly long timeout value when using the `express-session` library. Session-based attacks require an active session. Therefore, the longer a session lasts, the more time an attacker has to hijack the session.
COV_SIGMA.excessive_session_lifetime_google_cloud_datastore_TYPESCRIPT	3	Sigma: Low impact security	Excessive session lifetime: The session stored in `Google Cloud Datastore` is configured with an exceedingly long timeout value. Session-based attacks require an active session. Therefore, the longer a session lasts, the more time an attacker has to hijack the session.
COV_SIGMA.excessive_token_lifetime_node_aws_sdk_TYPESCRIPT	3	Sigma: Low impact security	Excessive token lifetime: The `DurationSeconds` property in the options used by the `assumeRoleWithWebIdentity()` method of the AWS Security Token Service is set to a value greater than 4 hours (by default it is set to 1 hour). The token lifetime determining an active session is excessive. Session-based attacks require an active session. Thus, the longer a session lasts, the longer an attacker has to steal and hijack it.
COV_SIGMA.expect_ct_disabled_express_helmet_TYPESCRIPT	3	Sigma: Low impact security	ExpectCT disabled: The `helmet.expectCt` middleware is disabled. Disabling the middleware will prevent the reporting of Certificate Transmission policy violations for SSL certificates.
COV_SIGMA.file_upload_misconfiguration_of_safe_file_names_express_TYPESCRIPT	3	Sigma: Low impact security	No sanitization of user-provided filenames: The dangerous characters from user-provided file names are not stripped in the `express-fileupload` module. Path manipulation is then possible since users can upload files with unsafe names.
COV_SIGMA.file_upload_misconfiguration_of_storage_multer_TYPESCRIPT	3	Sigma: Low impact security	File upload with insecure storage: The `multer` middleware is configured to use memory for storing file uploads rather than persisting them on disk. It is possible to cause a denial of service attack by uploading a large number of files or one big file into the server's memory.
COV_SIGMA.hardcoded_secret_express_jwt_TYPESCRIPT	3	Sigma: Low impact security	Hard-coded secret: The `secret` option passed to the `express-jwt` constructor contains a hard-coded credential that could be viewed by anyone with access to the source code.
COV_SIGMA.hardcoded_secret_passport_TYPESCRIPT	3	Sigma: Low impact security	Hard-coded secret: The `passport` options object passed to the `Strategy()` constructor contains a hard-coded credential.
COV_SIGMA.hide_powered_by_disabled_express_helmet_TYPESCRIPT	3	Sigma: Low impact security	X-Powered-By header is displayed: The `helmet.hidePoweredBy` middleware is disabled. Disabling this middleware may disclose the type of software running on the server and possibly help attackers to craft targeted exploits against your application.
COV_SIGMA.hpkp_max_age_too_long_express_TYPESCRIPT	3	Sigma: Low impact security	Caching time for the HPKP policy is set too long: The `maxAge` property is set to a value greater than two months. The longer a client stores the pinned keys, the longer an attacker has to steal and hijack them.
COV_SIGMA.hpkp_max_age_too_long_koa_TYPESCRIPT	3	Sigma: Low impact security	Caching time for the HPKP policy is set too long: The `maxAge` property is set to a value greater than two months. The longer a client stores the pinned keys, the longer an attacker has to steal and hijack them.
COV_SIGMA.hpkp_report_uri_missing_tls_express_TYPESCRIPT	3	Sigma: Low impact security	Violation reports sent over an insecure channel: The report URI is set to use an insecure channel for violation reports. If this endpoint is offered over an insecure channel, an attacker may modify the violation reports in transit.
COV_SIGMA.hpkp_report_uri_missing_tls_koa_TYPESCRIPT	3	Sigma: Low impact security	Violation reports sent over an insecure channel: The report URI is set to use an insecure channel for violation reports. If this endpoint is offered over an insecure channel, an attacker may modify the violation reports in transit.
COV_SIGMA.hsts_disabled_express_helmet_TYPESCRIPT	3	Sigma: Low impact security	HSTS is disabled: The `helmet.hsts` middleware is disabled. Disabling the middleware may not automatically convert all requests from HTTP to HTTPS, creating opportunities for a man-in-the-middle attack.
COV_SIGMA.hsts_http_header_short_max_age_express_helmet_TYPESCRIPT	3	Sigma: Low impact security	HTTP Strict Transport Security (HSTS) expires too quickly: Sending a HTTP Strict Transport Security (HSTS) header that expires too quickly. HSTS is a defense in depth security measure that helps ensure that communication with your site happens over HTTPS rather than HTTP. If the user visits your site after the HSTS policy has expired, their browser will not force the connection to be HTTPS. Setting a HSTS Max-Age less than 18 weeks makes your site ineligible for the HSTS preload list.
COV_SIGMA.hsts_http_header_subdomains_disabled_express_helmet_TYPESCRIPT	3	Sigma: Low impact security	HTTP Strict Transport Security (HSTS) disabled for sub-domains: The application sets the `helmet.hsts()` option `includeSubDomains` to `false`, disabling HTTP Strict Transport Security (HSTS) protections for all sub-domains. HSTS is a defense-in-depth security measure that helps ensure that communication with the site happens over HTTPS rather than HTTP. Disabling HSTS for the sub-domains means the browser will allow this communication to occur over HTTP instead of HTTPS.
COV_SIGMA.hsts_http_header_subdomains_disabled_express_hsts_TYPESCRIPT	3	Sigma: Low impact security	HTTP Strict Transport Security (HSTS) disabled for sub-domains: The application sets the `hsts()` option `includeSubDomains` to `false`, disabling HTTP Strict Transport Security (HSTS) protections for all sub-domains. HSTS is a defense-in-depth security measure that helps ensure that communication with the site happens over HTTPS rather than HTTP. Disabling HSTS for the sub-domains means the browser will allow this communication to occur over HTTP instead of HTTPS.
COV_SIGMA.ie_no_open_disabled_express_helmet_TYPESCRIPT	3	Sigma: Low impact security	IE8 no open is disabled: The `helmet.ieNoOpen` middleware is disabled. Disabling this middleware will not force potentially-unsafe downloads to be saved and may not mitigate the execution of untrusted HTML in the site's context for Internet Explorer 8.
COV_SIGMA.insecure_referrer_policy_express_helmet_TYPESCRIPT	3	Sigma: Low impact security	Insecure referrer policy: The insecure referrer policy may have privacy implications. The `Referrer-Policy` HTTP header controls how browsers set the `Referer` HTTP header, which may expose the previous page a user has visited.
COV_SIGMA.insecure_tls_cipher_suite_node_https_TYPESCRIPT	3	Sigma: Low impact security	Insecure TLS Cipher Suite: A broken or weak cipher suite is used for encrypting communication. This may allow an attacker to obtain or tamper with a victim's sensitive information in-transit.
COV_SIGMA.insecure_tls_cipher_suite_node_tls_TYPESCRIPT	3	Sigma: Low impact security	Insecure TLS Cipher Suite: A broken or weak cipher suite is used for encrypting communication. This may allow an attacker to obtain or tamper with a victim's sensitive information in-transit.
COV_SIGMA.insecure_tls_renegotiation_node_https_TYPESCRIPT	3	Sigma: Low impact security	Insecure TLS renegotiation: Enabling TLS renegotiation may allow an attacker to perform denial of service and downgrade attacks.   More recent versions of TLS have this disabled by default in order to avoid such attacks.
COV_SIGMA.insecure_tls_renegotiation_node_request_TYPESCRIPT	3	Sigma: Low impact security	Insecure TLS renegotiation: Enabling TLS renegotiation may allow an attacker to perform denial of service and downgrade attacks.   More recent versions of TLS have this disabled by default in order to avoid such attacks.
COV_SIGMA.insecure_tls_renegotiation_node_tls_TYPESCRIPT	3	Sigma: Low impact security	Insecure TLS renegotiation: Enabling TLS renegotiation may allow an attacker to perform denial of service and downgrade attacks.   More recent versions of TLS have this disabled by default in order to avoid such attacks.
COV_SIGMA.insecure_xss_filter_express_helmet_TYPESCRIPT	3	Sigma: Low impact security	Insecure XSS filter enabled: Setting the `setOnOldIE` option of `xssFilter` to `true` will enable XSS filtering in older web browsers, which may introduce XSS attacks instead of preventing them.
COV_SIGMA.insufficient_presigned_url_timeout_node_aws_sdk_TYPESCRIPT	3	Sigma: Low impact security	Insufficient presigned URL timeout: The expiration time of the presigned request in the AWS S3 is too long. A longer expiration time on a presigned URL for a GET request provides a larger window of opportunity for an attacker.
COV_SIGMA.insufficient_presigned_url_timeout_node_google_cloud_storage_TYPESCRIPT	3	Sigma: Low impact security	Insufficient presigned URL timeout: The expiration time of the presigned request in the Google Cloud Storage is too long. A longer expiration time on a presigned URL for a GET or a POST request provides a larger window of opportunity for an attacker to steal and abuse the presigned resource or functionality.
COV_SIGMA.insufficient_token_entropy_hapi_crumb_TYPESCRIPT	3	Sigma: Low impact security	Insufficient token size: The `hapi` application is set to generate csrf token with fewer than 43 characters by the `crumb` middleware. An insufficiently random CSRF token is vulnerable for prediction, guessing, or brute force attacks. An attacker who can figure out a CSRF token, can evade anti-CSRF checks and execute a CSRF attack.
COV_SIGMA.jwt_revoke_missing_express_jwt_TYPESCRIPT	3	Sigma: Low impact security	JSON Web Token missing revoke functionality: The application uses `express-jwt` without configuring the `isRevoked` option to revoke the token when necessary. A leaked token that is unable to be revoked has a larger window of time to be used by an attacker.
COV_SIGMA.missing_global_exception_handler_winston_TYPESCRIPT	3	Sigma: Low impact security	Missing global exception handler: Uncaught exceptions are not written to any logger by the logging library `winston`, which may result in displaying a stack trace to a user, leaking internal information about the application that can be abused by attackers.
COV_SIGMA.missing_httponly_attribute_session_cookie_express_TYPESCRIPT	3	Sigma: Low impact security	HttpOnly attribute not set for session cookie: The configuration of the `client-sessions`, `cookie-session` or `express-session` library does not enable the `HttpOnly` attribute of the session cookie. Enabling the `HttpOnly` flag prevents an attacker from stealing or modifying session cookie data via cross-site scripting attacks executed against vulnerable client-side applications.
COV_SIGMA.missing_samesite_attribute_session_cookie_express_TYPESCRIPT	3	Sigma: Low impact security	Missing or insecure samesite attribute for session cookie: The `cookie.sameSite` option is either undefined or set to the insecure value `'none'` or `false`. In all three cases, the cookie's `SameSite` attribute protections are disabled, allowing the browser to send cookies in cross-site requests. An attacker can abuse this missing protection to facilitate cross-site request forgery (CSRF) attacks.
COV_SIGMA.missing_secure_attribute_session_cookie_express_TYPESCRIPT	3	Sigma: Low impact security	Secure attribute not set for session cookie: The configuration of the `client-sessions`, `cookie-session` or `express-session` library does  not set the `secure` attribute of the session cookie. While web browsers send cookies with the  `secure` attribute only over HTTPS, they do send cookies without it over HTTP. If an attacker can  fool the victim's browser into sending an HTTP request to the vulnerable site (for example, with  JavaScript code on a malicious page or with a phishing link), the victim's browser will send the  vulnerable cookie in clear text. If the attacker can also intercept this network traffic, then  they can steal the victim's session cookie and impersonate the victim.
COV_SIGMA.missing_tls_axios_TYPESCRIPT	3	Sigma: Low impact security	Missing TLS: Using the `axios` library to send an HTTP request using the insecure `http://` protocol is dangerous as the server is attempting to connect to a website that does not encrypt traffic with TLS. If sensitive or security-critical data were sent in cleartext over a communication channel without TLS, that data can be sniffed by unauthorized actors.
COV_SIGMA.missing_tls_got_TYPESCRIPT	3	Sigma: Low impact security	Missing TLS: Using the `got` library to send an HTTP request using the insecure `http://` protocol is dangerous as the server is attempting to connect to a website that does not encrypt traffic with TLS. If sensitive or security-critical data were sent in cleartext over a communication channel without TLS, that data can be sniffed by unauthorized actors.
COV_SIGMA.missing_tls_node_rest_client_TYPESCRIPT	3	Sigma: Low impact security	Missing TLS: Using the `node_rest_client` library to send an HTTP request using  the insecure `http://` protocol is dangerous as the server is attempting to connect to a website that does not encrypt traffic with TLS. If sensitive or security-critical data were sent in cleartext over a communication channel without TLS, that data can be sniffed by unauthorized actors.
COV_SIGMA.missing_tls_node_telnet_TYPESCRIPT	3	Sigma: Low impact security	Missing TLS: Creating a telnet server by calling `telnet.createServer()`, does not encrypt data sent over this communication channel. This could lead to data leaks and allow man-in-the-middle attacks.
COV_SIGMA.missing_tls_node_telnet_client_TYPESCRIPT	3	Sigma: Low impact security	Missing TLS: Creating a telnet client with the method `telnet-client.connect()` does not support encryption. This could lead to data leaks and allow man-in-the-middle attacks.
COV_SIGMA.missing_tls_socket_io_client_TYPESCRIPT	3	Sigma: Low impact security	Missing TLS: The application initiates an insecure websocket channel to send or receive data, allowing an attacker to eavesdrop and tamper with the data sent on the channel.
COV_SIGMA.missing_tls_websocket_TYPESCRIPT	3	Sigma: Low impact security	Missing TLS: The application uses the `websocket` library to initiate an insecure web socket connection using the unencrypted `ws://` protocol, allowing an attacker to eavesdrop and tamper with the data sent on the channel.
COV_SIGMA.missing_tls_ws_TYPESCRIPT	3	Sigma: Low impact security	Missing TLS: The application uses the `ws` library to initiate an insecure web socket connection using the unencrypted `ws://` protocol, allowing an attacker to eavesdrop and tamper with the data sent on the channel.
COV_SIGMA.no_sniff_disabled_express_helmet_TYPESCRIPT	3	Sigma: Low impact security	MIME type sniffing prevention disabled: The `helmet.noSniff` middleware is disabled. Disabling the middleware may increase the risk of MIME type sniffing.
COV_SIGMA.permitted_cross_domain_policies_disabled_express_helmet_TYPESCRIPT	3	Sigma: Low impact security	Permitted cross-domain policies disabled: The `helmet.permittedCrossDomainPolicies` middleware is disabled. Disabling this middleware may allow untrusted clients to access the domain.
COV_SIGMA.referrer_policy_disabled_express_helmet_TYPESCRIPT	3	Sigma: Low impact security	Referrer policy disabled: The `helmet.referrerPolicy` middleware is disabled. Disabling this middleware may lead to the leaking of potentially-private information.
COV_SIGMA.root_path_attribute_cookie_express_TYPESCRIPT	3	Sigma: Low impact security	Broadly scoped session cookie path: The `client-sessions`, `cookie-session` or `express-session` library sets the `path` attribute on the session cookie to the root or doesn't set `path` attribute (default value is root). If the application is hosted beneath a subdirectory and the cookie is copied to the root, then applications in other subdirectories will have access to this cookie. If any of these applications become compromised, the cookie of the victim site can be stolen from this application.
COV_SIGMA.socket_accepts_all_origins_socket_io_TYPESCRIPT	3	Sigma: Low impact security	Socket accepts all origins: The Socket.IO server is configured to accept cross-origin requests from any origin. Having the connection open to anyone may lead to a malicious client connecting to the Socket.IO server, exhausting its resources and causing a denial of service, or gaining sensitive information from the server.
COV_SIGMA.verbose_server_banner_express_TYPESCRIPT	3	Sigma: Low impact security	Sending X-Powered-By header: HTTP responses contain an `X-Powered-By` header that reveals information about the server which helps attackers exploit known vulnerabilities or craft more targeted exploits
COV_SIGMA.weak_hash_node_crypto_TYPESCRIPT	3	Sigma: Low impact security	Weak hash algorithm: This application uses a weak algorithm to generate hash digests, which may lead to collision attacks.
COV_SIGMA.xml_external_entity_enabled_libxmljs_TYPESCRIPT	3	Sigma: Low impact security	XML external entity processing enabled: The application uses the libxmljs parser with the `noent` property set to `true`. If the parser handles untrusted data, it will be vulnerable to XML External Entity (XXE) attacks.
COV_SIGMA.xss_filter_disabled_express_helmet_TYPESCRIPT	3	Sigma: Low impact security	XSS filter disabled: The `helmet.xssFilter` middleware is disabled. Disabling the middleware may enable browsers' buggy Cross-Site Scripting (XSS) filter and may introduce additional security issues.
COV_SIGMA.file_upload_misconfiguration_of_file_path_busboy_TYPESCRIPT	2	Sigma: Medium impact security	The busboy module allows users to provide their own paths for storing uploaded files. This allows for path manipulation is possible since users can upload and overwrite existing files in user-selected locations.
COV_SIGMA.allow_all_authz_policy_node_aws_sdk_s3_bucket_TYPESCRIPT	2	Sigma: Medium impact security	Allow-All Authorization Policy: Applying the `public-read-write` access control list (ACL) or the `FULL_CONTROL` permission to an AWS S3 bucket will grant all users `READ` and `WRITE` access and may lead to exposure of sensitive information or modification of the resource by malicious parties. This is especially dangerous when the resource is related to application configuration, execution, or contains sensitive user data.
COV_SIGMA.allow_all_authz_policy_node_aws_sdk_s3_object_TYPESCRIPT	2	Sigma: Medium impact security	Allow-All Authorization Policy: Applying the `public-read-write` access control list (ACL) or the `FULL_CONTROL` permission to an AWS S3 object will grant all users `READ` and `WRITE` access and may lead to exposure of sensitive information or modification of the resource by malicious parties. This is especially dangerous when the resource is related to application configuration, execution, or contains sensitive user data.
COV_SIGMA.allow_all_authz_policy_node_google_cloud_storage_bucket_TYPESCRIPT	2	Sigma: Medium impact security	Allow-All Authorization Policy: The `allUsers` entity is assigned the `OWNER` role on a bucket, which will grant all users `READER` and `WRITER` access. Thus, it may lead to exposure of sensitive information or modification of the resource by malicious parties. This is especially dangerous when the resource is related to application configuration, execution, or contains sensitive user data.
COV_SIGMA.certificate_verification_disabled_node_https_TYPESCRIPT	2	Sigma: Medium impact security	Certificate verification disabled: The application disables certificate validation which leads to a rogue certificate not being rejected when its signature cannot be verified by any of the certificate authorities. This allows for an insecure connection and a man-in-the-middle attack.
COV_SIGMA.certificate_verification_disabled_node_libcurl_TYPESCRIPT	2	Sigma: Medium impact security	Certificate verification disabled: The application disables certificate validation by setting option `SSL_VERIFYPEER` to `0` or `false` which leads to a rogue certificate not being rejected when its signature cannot be verified by any of the certificate authorities. This allows for an insecure connection and a man-in-the-middle attack.
COV_SIGMA.certificate_verification_disabled_node_mysql_TYPESCRIPT	2	Sigma: Medium impact security	Certificate verification disabled: The module used for MySQL communication establishes a connection over SSL, but does not validate the SSL certificate. The `rejectUnauthorized` setting is set to `false`; therefore, an invalid or a malicious certificate can be used to establish an SSL connection. This may lead to man-in-the-middle attacks and leaking sensitive data.
COV_SIGMA.certificate_verification_disabled_node_mysql2_TYPESCRIPT	2	Sigma: Medium impact security	Certificate verification disabled: The module used for MySQL2 communication establishes a connection over SSL, but does not validate the SSL certificate. The `rejectUnauthorized` setting is set to `false`; therefore, an invalid or a malicious certificate can be used to establish an SSL connection. This may lead to man-in-the-middle attacks and leaking sensitive data.
COV_SIGMA.certificate_verification_disabled_node_tls_TYPESCRIPT	2	Sigma: Medium impact security	Certificate verification disabled: The application disables certificate validation which leads to a rogue certificate not being rejected when its signature cannot be verified by any of the certificate authorities. This allows for an insecure connection and a man-in-the-middle attack.
COV_SIGMA.certificate_verification_disabled_node_ws_TYPESCRIPT	2	Sigma: Medium impact security	Certificate verification disabled: The application disables certificate validation which leads to a rogue certificate not being rejected when its signature cannot be verified by any of the certificate authorities. This allows for an insecure connection and a man-in-the-middle attack.
COV_SIGMA.certificate_verification_disabled_sequelize_TYPESCRIPT	2	Sigma: Medium impact security	Certificate verification disabled: The application disables certificate validation when using `sequelize` to connect to a `mariadb`, `mysql` or `postgres` database which leads to a rogue certificate not being rejected when its signature cannot be verified by any of the certificate authorities. This allows for an insecure connection and a man-in-the-middle attack.
COV_SIGMA.certificate_verification_disabled_sequelize_mssql_TYPESCRIPT	2	Sigma: Medium impact security	Certificate verification disabled: The application disables certificate validation when using `sequelize` to connect to a `mssql` database which leads to a rogue certificate not being rejected when its signature cannot be verified by any of the certificate authorities. This allows for an insecure connection and a man-in-the-middle attack.
COV_SIGMA.cors_with_credentials_http_origin_express_cors_TYPESCRIPT	2	Sigma: Medium impact security	CORS Configuration allows credentialed requests from unencrypted origins: The `origin` option for the `cors` middleware is set to a non-HTTPS value. If the response is served over a non-HTTPS connection, the response is vulnerable to man-in-the-middle attacks.
COV_SIGMA.cors_with_credentials_http_origin_koa_TYPESCRIPT	2	Sigma: Medium impact security	CORS Configuration allows credentialed requests from unencrypted origins: The `origin` option for the `@koa/cors`, `koa-cors` or `koa2-cors` middleware is set to a non-HTTPS value. If the response is served over a non-HTTPS connection, the response is vulnerable to man-in-the-middle attacks.
COV_SIGMA.cors_with_credentials_http_origin_nestjs_TYPESCRIPT	2	Sigma: Medium impact security	CORS Configuration allows credentialed requests from unencrypted origins: The CORS policy shares responses to credentialed requests with non-HTTPS origins. If the response is served over a non-HTTPS connection, the response is vulnerable to man-in-the-middle attacks.
COV_SIGMA.cors_with_credentials_null_origin_express_cors_TYPESCRIPT	2	Sigma: Medium impact security	CORS configuration allows credentialed requests from the `null` origin: The `origin` option of the `cors` middleware is set to `null`. An attacker can use iFrames or HTTP redirects to generate requests with a null origin. Since these requests are credentialed,their responses may contain sensitive information that can now be read by the attacker, compromising the user's session.
COV_SIGMA.cors_with_credentials_null_origin_koa_TYPESCRIPT	2	Sigma: Medium impact security	CORS configuration allows credentialed requests from the `null` origin: The `origin` option of the `@koa/cors`, `koa-cors` or `koa2-cors` middleware is set to `null`. An attacker can use iFrames or HTTP redirects to generate requests with null origin. Since these requests are credentialed, their responses may contain sensitive information that can now be read and abused by the attacker, compromising the user's session.
COV_SIGMA.cors_with_credentials_null_origin_nestjs_TYPESCRIPT	2	Sigma: Medium impact security	CORS configuration allows credentialed requests from the `null` origin: The CORS policy shares sensitive responses with the null origin. An attacker can use iFrames or HTTP redirects to generate requests with null origin. Since these requests are credentialed, their responses may contain sensitive information, that can now be read and abused by the attacker, compromising the user's session.
COV_SIGMA.credentials_validation_disabled_node_aws_sdk_TYPESCRIPT	2	Sigma: Medium impact security	Credentials validation disabled globally: Credentials validation is disabled globally. Disabling credentials validation might allow an attacker to spoof a trusted entity and access a sensitive resource.
COV_SIGMA.csrf_protection_disabled_express_csurf_TYPESCRIPT	2	Sigma: Medium impact security	CSRF protection is disabled: The current configuration of the `ignoreMethods` property for the `csurf` middleware does not protect certain of the HTTP methods that change state from CSRF attacks. Therefore, an attacker may be able to submit forged requests on user's behalf.
COV_SIGMA.exposed_directory_listing_hapi_inert_TYPESCRIPT	2	Sigma: Medium impact security	Exposed directory listing: The `hapi.js` server is configured to display all the files of a directory when it is browsed. Thus, an attacker can learn the names of files in this directory which can help them probe for insufficiently protected files or target path traversal attacks.
COV_SIGMA.file_upload_misconfiguration_of_file_path_express_TYPESCRIPT	2	Sigma: Medium impact security	User specified path used: The `express-fileupload` module allows users to provide their own paths for storing uploaded files. This allows for path manipulation since users can upload and overwrite existing files in user-selected locations.
COV_SIGMA.file_upload_misconfiguration_of_file_path_multer_TYPESCRIPT	2	Sigma: Medium impact security	User specified path used: The `multer` module allows users to provide their own paths for storing uploaded files. This allows for path manipulation since users can upload and overwrite existing files in user-selected locations.
COV_SIGMA.insecure_tls_cipher_suite_node_request_TYPESCRIPT	2	Sigma: Medium impact security	Insecure TLS Cipher Suite: Broken or weak ciphers are allowed for encrypting communication. This can result in an attacker obtaining or tampering with victim's sensitive information in-transit.
COV_SIGMA.insecure_tls_version_node_https_TYPESCRIPT	2	Sigma: Medium impact security	Insecure TLS version: A Transport Layer Security (TLS or SSL) version was specified that is known to be insecure. This may allow an attacker to decrypt or extract sensitive data that is transmitted over the network.
COV_SIGMA.insecure_tls_version_node_request_TYPESCRIPT	2	Sigma: Medium impact security	Insecure TLS version: A Transport Layer Security (TLS or SSL) version was specified that is known to be insecure. This may allow an attacker to decrypt or extract sensitive data that is transmitted over the network.
COV_SIGMA.insecure_tls_version_node_tls_TYPESCRIPT	2	Sigma: Medium impact security	Insecure TLS version: A Transport Layer Security (TLS or SSL) version was specified that is known to be insecure. This may allow an attacker to decrypt or extract sensitive data that is transmitted over the network.
COV_SIGMA.jwt_algorithm_none_jsonwebtoken_TYPESCRIPT	2	Sigma: Medium impact security	JSON Web Token with algorithm `None`: The application accepts unsigned JWT tokens, i.e., tokens containing the `None` signature algorithm. This allows an attacker to impersonate other users by forging an unsigned JWT tokens with data of their choice.
COV_SIGMA.middleware_applied_globally_express_multer_TYPESCRIPT	2	Sigma: Medium impact security	Middleware Applied Globally: The `multer` middleware is configured globally, which may cause unauthenticated file uploading on any routes.
COV_SIGMA.missing_tls_hapi_session_mongo_TYPESCRIPT	2	Sigma: Medium impact security	Missing TLS: The `hapi.js` application is configured to use a remote `MongoDB` instance for session storage. However, the communication with `MongoDB` happens without SSL enabled. An attacker with access to the network can eavesdrop on any data sent to or retrieved from the database.
COV_SIGMA.missing_tls_node_aws_sdk_TYPESCRIPT	2	Sigma: Medium impact security	Missing TLS: If the application disables SSL on the calls to an AWS service, sensitive data is transmitted over an insecure communication channel and can be read and modified by attackers.
COV_SIGMA.parameters_validation_disabled_node_aws_sdk_TYPESCRIPT	2	Sigma: Medium impact security	Parameters validation disabled globally: Parameters validation is disabled globally. Disabling parameters validation might lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution.
COV_SIGMA.unsafe_session_storage_express_session_TYPESCRIPT	2	Sigma: Medium impact security	Unsafe storage of session data: The session storage that the `express-session` module provides explicitly or by default is insecure. This type of memory storage leaks memory under most conditions. An attacker may create numerous active sessions and cause a Denial-of-Service situation.

// New in Coverity 2022.03
COV_SIGMA.cloud_resource_assigned_public_ip_node_aws_sdk_rds_TYPESCRIPT	1	Sigma: High impact security	Cloud resource assigned public IP: The Amazon Relational Database Service (RDS) initializes a database instance with `PubliclyAccessible` set to `true`, which makes the database instance publicly accessible.
COV_SIGMA.cors_with_credentials_all_origin_corser_TYPESCRIPT	1	Sigma: High impact security	CORS configuration allows credentialed requests from all origins: The `origins` option of the `corser` middleware is set to an empty array or omitted, loosening CORS controls and allowing any origin to read the response. This means that a malicious origin will be able to submit authenticated AJAX requests with the `credentials` flag enabled and read the server's response to those authenticated requests.
COV_SIGMA.cors_with_credentials_all_origin_fastify_TYPESCRIPT	1	Sigma: High impact security	CORS configuration allows credentialed requests from all origins: The `origin` option of the `fastify-cors` middleware is set to either the wildcard `*` (the default value) or `true`, loosening CORS controls and allowing any origin to read the response. This means that a malicious origin will be able to submit authenticated AJAX requests with the `credentials` flag enabled and read the server's response to those authenticated requests.
COV_SIGMA.cors_with_credentials_all_origin_restify_TYPESCRIPT	1	Sigma: High impact security	CORS configuration allows credentialed requests from all origins: The `origins` option of the `restify-cors-middleware` middleware or the `restify-cors-middleware2` middleware is set to either the wildcard `*` (the default value), loosening CORS controls and allowing any origin to read the response. This means that a malicious origin will be able to submit authenticated AJAX requests with the `credentials` (`allowCredentialsAllOrigins` for `restify-cors-middleware2`) flag enabled and read the server's response to those authenticated requests.
COV_SIGMA.cors_with_credentials_null_origin_corser_TYPESCRIPT	1	Sigma: High impact security	CORS configuration allows credentialed requests from the `null` origin: The `origins` option of the `corser` middleware is set to an array that contains the `null` origin. An attacker can use iFrames or HTTP redirects to generate requests with the `null` origin. Since these requests are credentialed, their responses may contain sensitive information that can now be read and abused by the attacker, compromising the user's session.
COV_SIGMA.cors_with_credentials_null_origin_fastify_TYPESCRIPT	1	Sigma: High impact security	CORS configuration allows credentialed requests from the `null` origin: The `origin` option of the `fastify-cors` middleware is set to `null`. An attacker can use iFrames or HTTP redirects to generate requests with null origin. Since these requests are credentialed, their responses may contain sensitive information that can now be read and abused by the attacker, compromising the user's session.
COV_SIGMA.disk_encryption_disabled_node_aws_sdk_efs_TYPESCRIPT	1	Sigma: High impact security	Disk-level encryption is disabled: The Amazon Elastic File System (Amazon EFS) creates an unencrypted file system that may expose data at rest.
COV_SIGMA.empty_signing_key_node_crypto_TYPESCRIPT	1	Sigma: High impact security	Empty signing key: The application calls the `crypto.createHmac()` function with an empty signing key. An attacker can easily guess the empty key and sign forged data that will be accepted by the recipient.
COV_SIGMA.unrestricted_ingress_node_aws_sdk_rds_TYPESCRIPT	1	Sigma: High impact security	Unrestricted ingress: The RDS security group allows inbound traffic from any IP indicated by the CidrIp value `0.0.0.0/0` or `::/0`.
COV_SIGMA.unsafe_deserialization_node_serialize_TYPESCRIPT	1	Sigma: High impact security	Unsafe deserialization: The application performs deserialization by invoking the dangerous `node-serialize.unserialize()` function. If the application passes untrusted data to this function, an attacker can use specialized payloads to achieve remote code execution (RCE).
COV_SIGMA.unsafe_innerhtml_manipulation_angular_TYPESCRIPT	1	Sigma: High impact security	Unsafe output of data into innerHtml: The application is bypassing sanitization of some input data. Angular sanitizers protect the application from XSS vulnerabilities by automatically sanitizing untrusted data. Bypassing this protection without correctly filtering or escaping the data may leave the application vulnerable to XSS.
COV_SIGMA.admin_access_enabled_node_azure_container_registry_TYPESCRIPT	3	Sigma: Low impact security	Admin access enabled: Setting the `adminUserEnabled` attribute to `true` enables the admin super-user account. This account is designed for a single user to access the registry, mainly for setup and testing purposes. Because it has full permissions to the registry, this account should be disabled and replaced by individual, managed accounts.
COV_SIGMA.broad_domain_attribute_cookie_hapi_server_session_TYPESCRIPT	3	Sigma: Low impact security	Broadly scoped session cookie domain: The plugin `hapi_server_session` for `Hapi.js` sets a `domain` attribute on the session cookie that is overly broad, which allows any subdomain to share that cookie. If one of the subdomains becomes compromised, then an attacker is able to steal this cookie via a subdomain and impersonate the user in the parent domain.
COV_SIGMA.cloud_database_deletion_protection_disabled_node_aws_sdk_TYPESCRIPT	3	Sigma: Low impact security	Cloud database deletion protection disabled: The AWS database deletion protection is disabled by setting `DeletionProtection` to `false` explicitly or omitting the setting, as its default value is `false`. Not enabling this protection may lead to deleting a database by accident and losing sensitive information.
COV_SIGMA.cloud_object_lock_disabled_node_aws_sdk_legacy_TYPESCRIPT	3	Sigma: Low impact security	Cloud object lock disabled: The application does not enable the S3 Object lock for the S3 buckets of Amazon object storage service to prevent objects from being overwritten or deleted permanently.
COV_SIGMA.cloud_object_lock_disabled_node_aws_sdk_v3_TYPESCRIPT	3	Sigma: Low impact security	Cloud object lock disabled: The application does not enable the S3 Object lock for the S3 buckets of Amazon object storage service to prevent objects from being overwritten or deleted permanently.
COV_SIGMA.cloud_resource_assigned_public_ip_node_azure_networking_TYPESCRIPT	3	Sigma: Low impact security	Cloud resource assigned public IP: The cloud resource is assigned a public IP address, exposing it to the external network.
COV_SIGMA.cloud_storage_encryption_disabled_node_aws_sdk_ec2_TYPESCRIPT	3	Sigma: Low impact security	Cloud storage encryption disabled: This application disables the EBS encryption on Amazon EC2 for your account in the current Region. This exposes both data-at-rest and data-in-transit between an instance and its attached EBS storage to attackers, which may lead to leaked sensitive data or MITM attacks.
COV_SIGMA.content_security_policy_disabled_express_lusca_TYPESCRIPT	3	Sigma: Low impact security	Content security policy disabled: The Content Security Policy (CSP) middleware is disabled in the Express application, which may increase the risk of Cross-Site Scripting (XSS) and data injection attacks.
COV_SIGMA.content_security_policy_disabled_koa_lusca_TYPESCRIPT	3	Sigma: Low impact security	Content security policy disabled: The Content Security Policy (CSP) middleware is disabled in the Koa application, which may increase the risk of Cross-Site Scripting (XSS) and data injection attacks.
COV_SIGMA.cors_configured_globally_corser_TYPESCRIPT	3	Sigma: Low impact security	CORS middleware configured globally: The CORS policies registered by the `corser` middleware are applied globally for the server. The CORS headers will be included for all routes, violating the principle of least privileges by loosening the browser's Same Origin Policy restrictions for the entire application. This can lead to cross-origin information leakage.
COV_SIGMA.cors_configured_globally_fastify_TYPESCRIPT	3	Sigma: Low impact security	CORS middleware configured globally: The CORS policies registered by the `fastify-cors` middleware are applied globally for the fastify server. The CORS headers will be included for all routes, violating the principle of least privileges by loosening the browser's Same Origin Policy restrictions for the entire application. This can lead to cross-origin information leakage.
COV_SIGMA.cors_configured_globally_restify_TYPESCRIPT	3	Sigma: Low impact security	CORS middleware configured globally: The CORS policies registered by the `restify-cors-middleware` middleware or the `restify-cors-middleware2` middleware are applied globally for the restify server. The CORS headers will be included for all routes, violating the principle of least privileges by loosening the browser's Same Origin Policy restrictions for the entire application. This can lead to cross-origin information leakage.
COV_SIGMA.cors_no_credentials_permissive_origin_aws_sdk_s3_TYPESCRIPT	3	Sigma: Low impact security	CORS configuration allows non-credentialed requests from all origins: The `CORSConfiguration.CORSRules.AllowedOrigins` option of AWS S3 is set to a wildcard `*`, which allows the application to share the requested resource with any origin. As a result, internal application resources that can be accessed without authentication may be exposed to untrusted external origins via the user's browser.
COV_SIGMA.cors_no_credentials_permissive_origin_corser_TYPESCRIPT	3	Sigma: Low impact security	CORS configuration allows non-credentialed requests from all origins: The `origins` option of the `corser` middleware is set to an array that contains `null` or an empty array or omitted which bypass CORS controls and share the requested resource with any origin. As a result, internal application resources that can be accessed without authentication may be exposed to untrusted external origins via the user's browser.
COV_SIGMA.cors_no_credentials_permissive_origin_fastify_TYPESCRIPT	3	Sigma: Low impact security	CORS configuration allows non-credentialed requests from all origins: The `origin` option of the `fastify-cors` middleware is configured to the wildcard `*` or `null` origins which bypass CORS controls and share the requested resource with any origin. As a result, internal application resources that can be accessed without authentication may be exposed to untrusted external origins via the user's browser.
COV_SIGMA.cors_no_credentials_permissive_origin_node_google_cloud_storage_TYPESCRIPT	3	Sigma: Low impact security	CORS configuration allows non-credentialed requests from all origins: The `origin` option of the `Google Cloud Storage` is configured to the wildcard `*` or `null` origins which bypass CORS controls and share the requested resource with any origin. As a result, internal application resources that can be accessed without authentication may be exposed to untrusted external origins via the user's browser.
COV_SIGMA.cors_no_credentials_permissive_origin_restify_TYPESCRIPT	3	Sigma: Low impact security	CORS configuration allows non-credentialed requests from all origins: The `origins` option of the `restify-cors-middleware` middleware or the `restify-cors-middleware2` middleware is configured to include the wildcard `*` or `null` origins which bypass CORS controls and share the requested resource with any origin. As a result, internal application resources that can be accessed without authentication may be exposed to untrusted external origins via the user's browser.
COV_SIGMA.cors_origin_string_fastify_TYPESCRIPT	3	Sigma: Low impact security	CORS origin configured as a single string: The `origin` option of the `fastify-cors` middleware is configured to a single string value. As a result, the CORS policy will disclose the trusted origin to all other origins via the `Access-Control-Allow-Origin` header.
COV_SIGMA.cors_preflight_age_too_long_aws_sdk_s3_TYPESCRIPT	3	Sigma: Low impact security	CORS Configuration preflight age too long: The `CORSConfiguration.CORSRules.MaxAgeSeconds` option of AWS S3 is set to a value greater than 1800 seconds. This property sets how long the CORS preflight response is cached. Setting the time too long increases the possibility of user agents using stale CORS policies.
COV_SIGMA.cors_preflight_age_too_long_corser_TYPESCRIPT	3	Sigma: Low impact security	CORS Configuration preflight age too long: The `maxAge` option of the `corser` middleware is set to a value greater than 1800 seconds. This property sets how long the CORS preflight response is cached. An excessively long cache timeout increases the risk that changes to a server's CORS policy will not be honored by some user agents as they still use a cached response.
COV_SIGMA.cors_preflight_age_too_long_fastify_TYPESCRIPT	3	Sigma: Low impact security	CORS Configuration preflight age too long: The `maxAge` option of the `fastify-cors` middleware is set to a value greater than 1800 seconds. This property sets how long the CORS preflight response is cached. An excessively long cache timeout increases the risk that changes to a server's CORS policy will not be honored by some user agents as they still use a cached response.
COV_SIGMA.cors_preflight_age_too_long_node_google_cloud_storage_TYPESCRIPT	3	Sigma: Low impact security	CORS Configuration preflight age too long: The `maxAgeSeconds` option of the `Google Cloud Storage` is set to a value greater than 1800 seconds. This property sets how long the CORS preflight response is cached. An excessively long cache timeout increases the risk that changes to a server's CORS policy will not be honored by some user agents as they still use a cached response.
COV_SIGMA.cors_preflight_age_too_long_restify_TYPESCRIPT	3	Sigma: Low impact security	CORS Configuration preflight age too long: The `preflightMaxAge` option of the `restify-cors-middleware` middleware or the `restify-cors-middleware2` middleware is set to a value greater than 1800 seconds. This property sets how long the CORS preflight response is cached. An excessively long cache timeout increases the risk that changes to a server's CORS policy will not be honored by some user agents as they still use a cached response.
COV_SIGMA.cors_with_credentials_subdomain_origin_restify_TYPESCRIPT	3	Sigma: Low impact security	CORS configuration allows credentialed requests to all subdomains: The `origins` option is set to allow credentials and it reflects any subdomain origin in the Access-Control-Allow-Origin header. Dynamically setting the Access-Control-Allow-Origin header to reflect the origin of the request may allow a malicious origin to submit authenticated AJAX requests when the `withCredentials` flag is enabled. This means that the malicious origin will be able to read the server's response to authenticated requests.
COV_SIGMA.csrf_protection_disabled_hapi_crumb_TYPESCRIPT	3	Sigma: Low impact security	CSRF protection is disabled: The CSRF protection of this application is set to be disabled as CSRF token is not validated. Then an attacker may trick a client into making an unintentional request to the web server which will be treated as an authentic request. It may result in unintended execution of sensitive functionality or in exposure of data if the CSRF protection is disabled.
COV_SIGMA.deprecated_runtime_version_node_aws_sdk_lambda_TYPESCRIPT	3	Sigma: Low impact security	Deprecated runtime used: The AWS Lambda function is configured to use a deprecated runtime environment. As a result, missing security updates and security features that are otherwise available in supported runtime versions may cause vulnerabilities in the Lambda function.
COV_SIGMA.disk_encryption_disabled_node_aws_sdk_elastic_search_TYPESCRIPT	3	Sigma: Low impact security	Disk-level encryption is disabled: The Amazon ElasticSearch or OpenSearch Domain does not have the encryption for data at rest enabled, potentially exposing sensitive data.
COV_SIGMA.empty_password_sequelize_TYPESCRIPT	3	Sigma: Low impact security	Empty Password: The application creates a Sequelize database connection using an empty password string. An attacker who guesses or otherwise obtains a username with an empty password can authenticate to the database and access protected data.
COV_SIGMA.excessive_session_lifetime_node_google_cloud_datastore_TYPESCRIPT	3	Sigma: Low impact security	Excessive session lifetime: The session stored in `Google Cloud Datastore` is configured with an exceedingly long timeout value. Session-based attacks require an active session. Therefore, the longer a session lasts, the more time an attacker has to hijack the session.
COV_SIGMA.full_table_scan_node_aws_sdk_dynamodb_TYPESCRIPT	3	Sigma: Low impact security	Full table scan: This application invokes `DynamoDB.Scan()` which scans the entire table or secondary index, and then filters out values to provide the result set. This approach may unintentionally leak sensitive data. Additionally, consecutive calls that scan large tables may consume excessive resources resulting in a denial of service (DoS) condition or unexpected usage bills.
COV_SIGMA.image_scanning_disabled_node_aws_sdk_ecr_TYPESCRIPT	3	Sigma: Low impact security	Container image scanning disabled: Automatic AWS ECR image scanning is disabled, allowing users to push vulnerable container images to the repository.
COV_SIGMA.insecure_network_bind_moleculer_web_TYPESCRIPT	3	Sigma: Low impact security	Insecure network bind: The `moleculer-web` API gateway service is bound to all interfaces, potentially exposing the service to unintended networks.
COV_SIGMA.insecure_network_bind_node_grpc_TYPESCRIPT	3	Sigma: Low impact security	Insecure network bind: The gRPC server binds to all network interfaces, which exposes the server to every possible network.
COV_SIGMA.insecure_tls_version_node_aws_cdk_apigateway_TYPESCRIPT	3	Sigma: Low impact security	Insecure TLS version: The AWS API Gateway supports insecure TLS versions, indicated by the `securityPolicy` value `SecurityPolicy.TLS_1_0`. Early TLS versions contain publicly known vulnerabilities that could be used to read or modify sensitive data in transit.
COV_SIGMA.insecure_tls_version_node_aws_sdk_apigateway_TYPESCRIPT	3	Sigma: Low impact security	Insecure TLS version: The AWS API Gateway supports insecure TLS versions, indicated by the `securityPolicy` value `TLS_1_0`. Early TLS versions contain publicly known vulnerabilities that could be used to read or modify sensitive data in transit.
COV_SIGMA.insufficient_password_hash_iterations_node_argon2_TYPESCRIPT	3	Sigma: Low impact security	Insufficient password hash iterations: The application uses the `Argon2` hashing algorithm with insecure parameters, making the data vulnerable to side-channel and GPU-based attacks.
COV_SIGMA.insufficient_password_hash_iterations_node_bcrypt_TYPESCRIPT	3	Sigma: Low impact security	Insufficient password hash iterations: Using `bcrypt` with a cost factor less than 10 provides insufficient protection against brute force attacks. This may lead to exposure of sensitive information or loss of data integrity.
COV_SIGMA.insufficient_password_hash_iterations_node_crypto_TYPESCRIPT	3	Sigma: Low impact security	Insufficient password hash iterations: Using fewer than 10,000 iterations with the `PBKDF2` key generation algorithm is not recommended. Without enough iterations, a password-based key derivation function is more susceptible to brute-force attacks aimed at discovering passwords.
COV_SIGMA.introspection_enabled_moleculer_apollo_server_TYPESCRIPT	3	Sigma: Low impact security	Introspection enabled: The GraphQL server used with the Moleculer API enables introspection, which exposes query schema data. An attacker can use this information to facilitate subsequent attacks against the query schema.
COV_SIGMA.missing_httponly_attribute_session_cookie_fastify_session_TYPESCRIPT	3	Sigma: Low impact security	HttpOnly attribute not set for session cookie: The plugin `fastify_session` for `fastify` disables the `HttpOnly` attribute of the session cookie. Disabling the `HttpOnly` attribute allows an attacker to steal or modify session cookie data via cross-site scripting attacks executed against vulnerable client-side applications.
COV_SIGMA.missing_httponly_attribute_session_cookie_hapi_server_session_TYPESCRIPT	3	Sigma: Low impact security	HttpOnly attribute not set for session cookie: The plugin `hapi_server_session` for `Hapi.js` does not enable the `HttpOnly` attribute of the session cookie. Enabling the `HttpOnly` flag prevents an attacker from stealing or modifying session cookie data via cross-site scripting attacks executed against vulnerable client-side applications.
COV_SIGMA.missing_mfa_node_aws_sdk_cognito_TYPESCRIPT	3	Sigma: Low impact security	Missing multi-factor authentication: The AWS Cognito User Pool does not have multi-factor authentication (MFA) enabled.
COV_SIGMA.missing_samesite_attribute_session_cookie_fastify_session_TYPESCRIPT	3	Sigma: Low impact security	Missing or insecure samesite attribute for session cookie: The `cookie.sameSite` option of `fastify-session` application is either undefined or set to the insecure value 'none' or `false`. In all three cases, the cookie's SameSite attribute protections are disabled, allowing the browser to send cookies in cross-site requests. An attacker can abuse this missing protection to facilitate cross-site request forgery (CSRF) attacks.
COV_SIGMA.missing_secure_attribute_csrf_cookie_hapi_crumb_TYPESCRIPT	3	Sigma: Low impact security	Secure attribute not set for CSRF cookie: The application uses module `crumb` in a `hapi` application without setting the 'Secure' attribute on the cookie. The CSRF token in the cookie without the 'Secure' attribute can be stolen by an attacker performing a man-in-the-middle attack.
COV_SIGMA.missing_secure_attribute_session_cookie_fastify_session_TYPESCRIPT	3	Sigma: Low impact security	Secure attribute not set for session cookie: The plugin `fastify_session` for `fastify` sets the cookie attrubute `secure` to `false`. This means the cookie may be sent over a non-TLS connection, leaking it to a suitably positioned attacker on the network.
COV_SIGMA.missing_secure_attribute_session_cookie_hapi_server_session_TYPESCRIPT	3	Sigma: Low impact security	Secure attribute not set for session cookie: The plugin `hapi_server_session` for `Hapi.js` does not enable the `secure` attribute of the session cookie. This means the cookie may be sent over a non-TLS connection, leaking it to a suitably positioned attacker on the network.
COV_SIGMA.missing_tls_node_fetch_TYPESCRIPT	3	Sigma: Low impact security	Missing TLS: The `node_fetch` library is used to send an HTTP request using the insecure HTTP protocol. This is dangerous as the server is attempting to connect to a resource that does not encrypt traffic with TLS. If sensitive or security-critical data were sent in cleartext over a communication channel without TLS, that data can be sniffed by unauthorized actors.
COV_SIGMA.missing_tls_node_http_server_TYPESCRIPT	3	Sigma: Low impact security	Missing TLS: A web server is created using the insecure `HTTP` scheme. As a result, application data is transmitted over an insecure channel where it can be read and modified by attackers.
COV_SIGMA.no_password_change_on_first_login_node_aws_sdk_iam_TYPESCRIPT	3	Sigma: Low impact security	User password reset not required on first login: The AWS IAM user is initialized with a password that is not required to be changed on first login.
COV_SIGMA.root_path_attribute_cookie_hapi_server_session_TYPESCRIPT	3	Sigma: Low impact security	Broadly scoped session cookie path: The plugin `hapi_server_session` for `Hapi.js` sets the `path` attribute of the session cookie to the root path `/`. If the application is hosted in a sub-path and the cookie is scoped to the root path, then the cookie will be sent to all other applications on the domain, leaking the sensitive session cookie.
COV_SIGMA.socket_accepts_all_origins_node_websocket_TYPESCRIPT	3	Sigma: Low impact security	Socket accepts all origins: The websocket server is configured to accept cross-origin requests from any origin. Having the connection open to anyone may lead to a malicious client connecting to the websocket server, exhausting its resources and causing a denial of service, or gaining sensitive information from the server.
COV_SIGMA.storage_versioning_disabled_node_aws_sdk_rds_TYPESCRIPT	3	Sigma: Low impact security	Storage versioning disabled: The application creates an Amazon Relational Database Service (RDS) instance or cluster with `BackupRetentionPeriod` set to `0`, which disables automated backups, preventing data recovery.
COV_SIGMA.storage_versioning_disabled_node_aws_sdk_s3_legacy_TYPESCRIPT	3	Sigma: Low impact security	Storage versioning disabled: The application configures an S3 bucket with storage versioning disabled. As a result, objects in the bucket may be permanently overwritten or deleted with no means of recovery.
COV_SIGMA.storage_versioning_disabled_node_aws_sdk_s3_v3_TYPESCRIPT	3	Sigma: Low impact security	Storage versioning disabled: The application configures an S3 bucket with storage versioning disabled. As a result, objects in the bucket may be permanently overwritten or deleted with no means of recovery.
COV_SIGMA.storage_versioning_disabled_node_google_cloud_storage_TYPESCRIPT	3	Sigma: Low impact security	Storage versioning disabled: The `Google Cloud Storage` bucket is configured to disable storage versioning, which protects from accidentally overwriting or deleting information by allowing the application to recover the needed information from a backup.
COV_SIGMA.allow_all_authz_policy_multer_s3_TYPESCRIPT	2	Sigma: Medium impact security	Allow-All Authorization Policy: Applying the `public-read-write` access control list (ACL) when using the `multer-s3` library or the `multer-s3-v3` library will grant all users `READ` and `WRITE` access and may lead to exposure of sensitive information or modification of the resource by malicious parties. Note that public resources often only need read access, but not public write access. Having a public read-write access is especially dangerous when the resource is related to application configuration, execution, or contains sensitive user data.
COV_SIGMA.allow_all_authz_policy_node_aws_sdk_lambda_legacy_TYPESCRIPT	2	Sigma: Medium impact security	Allow-All Authorization Policy: The resource-based permissions policies for the AWS Lambda function allows all users to interact with the function.
COV_SIGMA.allow_all_authz_policy_node_aws_sdk_lambda_v3_TYPESCRIPT	2	Sigma: Medium impact security	Allow-All Authorization Policy: The resource-based permissions policies for the AWS Lambda function allows all users to interact with the function.
COV_SIGMA.allow_all_authz_policy_node_aws_sdk_s3_bucket_legacy_TYPESCRIPT	2	Sigma: Medium impact security	Allow-All Authorization Policy: Applying the `public-read-write` access control list (ACL) or the `FULL_CONTROL` permission to an AWS S3 bucket will grant all users `READ` and `WRITE` access and may lead to exposure of sensitive information or modification of the resource by malicious parties. This is especially dangerous when the resource is related to application configuration, execution, or contains sensitive user data.
COV_SIGMA.allow_all_authz_policy_node_aws_sdk_s3_bucket_v3_TYPESCRIPT	2	Sigma: Medium impact security	Allow-All Authorization Policy: Applying the `public-read-write` access control list (ACL) or the `FULL_CONTROL` permission to an AWS S3 bucket will grant all users `READ` and `WRITE` access and may lead to exposure of sensitive information or modification of the resource by malicious parties. This is especially dangerous when the resource is related to application configuration, execution, or contains sensitive user data.
COV_SIGMA.allow_all_authz_policy_node_aws_sdk_s3_object_legacy_TYPESCRIPT	2	Sigma: Medium impact security	Allow-All Authorization Policy: Applying the `public-read-write` access control list (ACL) or the `FULL_CONTROL` permission to an AWS S3 object will grant all users `READ` and `WRITE` access and may lead to exposure of sensitive information or modification of the resource by malicious parties. This is especially dangerous when the resource is related to application configuration, execution, or contains sensitive user data.
COV_SIGMA.allow_all_authz_policy_node_aws_sdk_s3_object_v3_TYPESCRIPT	2	Sigma: Medium impact security	Allow-All Authorization Policy: Applying the `public-read-write` access control list (ACL) or the `FULL_CONTROL` permission to an AWS S3 object will grant all users `READ` and `WRITE` access and may lead to exposure of sensitive information or modification of the resource by malicious parties. This is especially dangerous when the resource is related to application configuration, execution, or contains sensitive user data.
COV_SIGMA.certificate_verification_disabled_got_TYPESCRIPT	2	Sigma: Medium impact security	Certificate verification disabled: The application has disabled certificate validation allowing for the acceptance of a rogue certificate. This leaves the application open to a man-in-the-middle attack.
COV_SIGMA.cors_with_credentials_http_origin_corser_TYPESCRIPT	2	Sigma: Medium impact security	CORS Configuration allows credentialed requests from unencrypted origins: The `origins` option for the `corser` middleware is set to a non-HTTPS value. If the response is served over a non-HTTPS connection, the response is vulnerable to man-in-the-middle attacks.
COV_SIGMA.cors_with_credentials_http_origin_fastify_TYPESCRIPT	2	Sigma: Medium impact security	CORS Configuration allows credentialed requests from unencrypted origins: The `origin` option for the `fastify-cors` middleware is set to a non-HTTPS value. If the response is served over a non-HTTPS connection, the response is vulnerable to man-in-the-middle attacks.
COV_SIGMA.cors_with_credentials_http_origin_restify_TYPESCRIPT	2	Sigma: Medium impact security	CORS Configuration allows credentialed requests from unencrypted origins: The `origins` option of the `restify-cors-middleware` middleware or the `restify-cors-middleware2` middleware is set to a non-HTTPS value. If the response is served over a non-HTTPS connection, the response is vulnerable to man-in-the-middle attacks.
COV_SIGMA.cors_with_credentials_null_origin_restify_TYPESCRIPT	2	Sigma: Medium impact security	CORS configuration allows credentialed requests from the `null` origin: The `origins` option of the `restify-cors-middleware` middleware or the `restify-cors-middleware2` middleware is set to `null`. An attacker can use iFrames or HTTP redirects to generate requests with null origin. Since these requests are credentialed, their responses may contain sensitive information that can now be read and abused by the attacker, compromising the user's session.
COV_SIGMA.csrf_protection_disabled_express_lusca_TYPESCRIPT	2	Sigma: Medium impact security	CSRF protection is disabled: The CSRF protection of this Express application provided by the `lusca` plugin is set to be disabled. An attacker may trick a client into making an unintentional request to the web server which will be treated as an authentic request. This may result in unintended execution of sensitive functionality or in exposure of data since the CSRF protection is disabled.
COV_SIGMA.csrf_protection_disabled_koa_lusca_TYPESCRIPT	2	Sigma: Medium impact security	CSRF protection is disabled: The CSRF protection of this Koa application provided by the `lusca` plugin is set to be disabled. An attacker may trick a client into making an unintentional request to the web server which will be treated as an authentic request. This may result in unintended execution of sensitive functionality or in exposure of data since the CSRF protection is disabled.
COV_SIGMA.disk_encryption_disabled_node_aws_sdk_legacy_TYPESCRIPT	2	Sigma: Medium impact security	Disk-level encryption is disabled: AWS `WorkSpaces` are created without encrypting the data stored on the root or user volume, which could allow an attacker to view or modify sensitive data.
COV_SIGMA.disk_encryption_disabled_node_aws_sdk_v3_TYPESCRIPT	2	Sigma: Medium impact security	Disk-level encryption is disabled: AWS `WorkSpaces` are created without encrypting the data stored on the root or user volume, which could allow an attacker to view or modify sensitive data.
COV_SIGMA.empty_salt_node_crypto_TYPESCRIPT	2	Sigma: Medium impact security	Empty salt: The application uses an empty string as the salt value of the password hash function. An attacker who has access to the hashed value can more easily brute force the original value.
COV_SIGMA.expression_escaping_disabled_handlebars_TYPESCRIPT	2	Sigma: Medium impact security	Expression escaping is disabled: Setting the `noEscape` attribute for the Handlebars template engine to `true` disables the escaping mechanism. This may lead to XSS attack if untrusted data is not properly validated and escaped.
COV_SIGMA.expression_escaping_disabled_squirrelly_TYPESCRIPT	2	Sigma: Medium impact security	Expression escaping is disabled: Setting the `autoEscape` for the Squirrelly template engine to `false` disables the escaping mechanism. This may lead to XSS attack if untrusted data is not properly validated and escaped.
COV_SIGMA.expression_escaping_disabled_swig_TYPESCRIPT	2	Sigma: Medium impact security	Expression escaping is disabled: Setting the `autoescape` attribute to `false` disables the escaping mechanism of the Swig template engine. This may lead to XSS attack if untrusted data is not properly validated and escaped.
COV_SIGMA.file_upload_misconfiguration_of_fields_fastify_multipart_TYPESCRIPT	2	Sigma: Medium impact security	Unrestricted number of uploaded file/non-file fields: The plugin `fastify-multipart` for `fastify` does not restrict the number of file/non-file fields in a single request. Thus, a denial-of-service (DoS) attack is possible, because an attacker may submit a very large number of file/non-file fields in one request.
COV_SIGMA.file_upload_misconfiguration_of_file_path_fastify_multipart_TYPESCRIPT	2	Sigma: Medium impact security	User specified path used: The `preservePath` property in the `fastify` plugin `fastify-multipart` is set to `true`. This allows for path manipulation enabling an attacker to upload and overwrite existing files in user-selected locations.
COV_SIGMA.file_upload_misconfiguration_of_filesize_fastify_multipart_TYPESCRIPT	2	Sigma: Medium impact security	File upload with unrestricted filesize: There is either no restriction on the file upload size or an extremely large file upload size has been set in the `fastify` plugin `fastify-multipart`. This could enable an attacker to submit a series of upload requests with very large files and use up all the space on the server, causing a denial-of-service (DoS) attack.
COV_SIGMA.insecure_cipher_crypto_js_TYPESCRIPT	2	Sigma: Medium impact security	Insecure Cipher: Use of a weak cipher algorithm from the `crypto-js` library is dangerous and may lead to the exposure of sensitive information or loss of data integrity.
COV_SIGMA.insecure_cipher_node_crypto_TYPESCRIPT	2	Sigma: Medium impact security	Insecure Cipher: Using a weak cipher algorithm is dangerous and may lead to the exposure of sensitive information or loss of data integrity.
COV_SIGMA.insecure_cipher_node_forge_TYPESCRIPT	2	Sigma: Medium impact security	Insecure Cipher: Use of a weak cipher algorithm from the `node-forge` library is dangerous and may lead to the exposure of sensitive information or loss of data integrity.
COV_SIGMA.log_file_validation_disabled_node_aws_sdk_cloudtrail_TYPESCRIPT	2	Sigma: Medium impact security	Log file validation disabled: Log file integrity validation for CloudTrail is disabled; therefore, the integrity of the log files cannot be guaranteed.
COV_SIGMA.message_encryption_disabled_node_aws_sdk_sns_TYPESCRIPT	2	Sigma: Medium impact security	Message broker encryption disabled: The application creates an Amazon Simple Notification Service (SNS) topic without setting a Customer Master Key (CMK). As a result, the service will not encrypt data for that topic, exposing the data at rest.
COV_SIGMA.missing_tls_node_azure_postgresql_TYPESCRIPT	2	Sigma: Medium impact security	Missing TLS: The Azure Postgresql server does not have TLS enabled, causing the server to transmit data over an insecure channel where it can be read and modified by attackers.
COV_SIGMA.session_cookie_misuse_express_client_sessions_TYPESCRIPT	2	Sigma: Medium impact security	Session cookie configuration misused: The `httpOnly`, `secure`, `ephemeral`, `maxAge`, or `path` attribute is set outside the the `cookie` object of the `client_sessions` options object. This use is incorrect. The misused attributes will not be applied to the cookie by the `client_sessions` middleware and may leave the cookie insecure.
COV_SIGMA.session_cookie_misuse_express_cookie_session_TYPESCRIPT	2	Sigma: Medium impact security	Session cookie configuration misused: The options object for the `cookie-session` configuration sets the `cookie` object, which is incorrect. The `cookie-session` middleware does not have the `cookie` object for containing cookie-specific properties. All properties should be set in the main `options` object. The misused attributes will not be applied to the cookie by the `cookie-session` middleware and may leave the cookie insecure.
COV_SIGMA.session_cookie_misuse_express_session_TYPESCRIPT	2	Sigma: Medium impact security	Session cookie configuration misused: The `httpOnly`, `secure`, `sameSite`, `maxAge`, `domain`, `expires` or `path` attribute is set outside the `cookie` object of the `express-session` options object. This use is incorrect. The misused attributes will not be applied to the cookie by the `express-session` middleware and may leave the cookie insecure.
COV_SIGMA.vendor_provided_encryption_key_node_aws_sdk_cloudtrail_TYPESCRIPT	2	Sigma: Medium impact security	Missing customer-supplied encryption key: The Amazon CloudTrail service is created without setting an Amazon KMS-managed key (SSE-KMS) protected by a customer master key (CMK) to encrypt the log data. The service will use the default Amazon S3-managed encryption key (SSE-S3) instead.
COV_SIGMA.vendor_provided_encryption_key_node_aws_sdk_efs_TYPESCRIPT	2	Sigma: Medium impact security	Missing customer-supplied encryption key: The Amazon Elastic File System (EFS) is encrypted with an Amazon-managed customer master key (CMK) instead of a customer-managed CMK. For sensitive data, a customer-managed CMK is preferred to ensure only the customer can access the encrypted data.

