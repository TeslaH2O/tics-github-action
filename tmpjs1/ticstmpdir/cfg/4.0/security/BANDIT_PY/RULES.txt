BANDIT_PY_B105	2	Credentials Management	Possible hardcoded password in assigned variable or used in a comparison with a variable that looks like a password.
BANDIT_PY_B106	2	Credentials Management	Possible hardcoded password being passed a keyword argument.
BANDIT_PY_B107	2	Credentials Management	Possible hardcoded password.

BANDIT_PY_B303	2	Cryptography	Use of insecure MD2, MD4, MD5, or SHA1 hash function.
BANDIT_PY_B304	1	Cryptography	Use of insecure cipher. Replace with a known secure cipher such as AES.
BANDIT_PY_B305	2	Cryptography	Use of insecure cipher mode. Replace with a known secure cipher such as AES.
BANDIT_PY_B311	3	Cryptography	Standard pseudo-random generators are not suitable for security/cryptographic purposes.
BANDIT_PY_B505	1	Cryptography	Weak cryptographic key use.

BANDIT_PY_B301	2	Deserializer Usage	Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data.
BANDIT_PY_B302	2	Deserializer Usage	Deserialization with the marshal module is possibly dangerous.

BANDIT_PY_B103	2	Improper Control of a Resource	Setting bad file permissions.
BANDIT_PY_B108	2	Improper Control of a Resource	Insecure usage of tmp file/directory.
BANDIT_PY_B321	1	Improper Control of a Resource	FTP-related functions are being called. FTP is considered insecure. Use SSH/SFTP/SCP or some other encrypted protocol.

BANDIT_PY_B110	3	Improper Handling of Exceptional Conditions	Pass in the except block: Suppressing errors can be a potential security issue.
BANDIT_PY_B112	3	Improper Handling of Exceptional Conditions	A continue in the except block: Suppressing errors can be a potential security issue.

BANDIT_PY_B104	1	Information Leakage	Binding to all network interfaces can potentially open up a service to traffic on unintended interfaces, that may not be properly documented or secured.

BANDIT_PY_B201	2	Injection	A Flask app appears to be run with debug=True, which exposes the Werkzeug debugger and allows the execution of arbitrary code.
BANDIT_PY_B601	2	Injection	Possible shell injection via Paramiko call, check inputs are properly sanitized.
BANDIT_PY_B602	3	Injection	Subprocess call with shell=True seems safe, but may be changed in the future, consider rewriting without shell.
BANDIT_PY_B604	1	Injection	Method calls for the presence of a keyword parameter shell equalling true.
BANDIT_PY_B605	2	Injection	Starting a process with a shell: check for injection.
BANDIT_PY_B606	2	Injection	Starting a process without a shell; sanitize any user provided or variable input.
BANDIT_PY_B607	3	Injection	Starting a process with a partial executable path; may allow a malicious actor to exert control over a system.
BANDIT_PY_B608	2	Injection	Possible SQL injection vector through string-based query construction.
BANDIT_PY_B609	2	Injection	Possible wildcard injection in call.
BANDIT_PY_B610	3	Injection	Potential SQL injection on extra function.
BANDIT_PY_B611	3	Injection	Potential SQL injection on RawSQL function.

BANDIT_PY_B701	2	Input Neutralization	Using jinja2 templates with autoescape=False is dangerous and can lead to XSS. Use autoescape=True to mitigate XSS vulnerabilities.
BANDIT_PY_B702	2	Input Neutralization	Mako templates allow HTML/JS rendering by default and are inherently open to XSS attacks. Ensure variables in all templates are properly sanitized via the 'n', 'h' or 'x' flags (depending on context).
BANDIT_PY_B703	3	Input Neutralization	Potential XSS on mark_safe function.

BANDIT_PY_B310	2	Input Validation	Audit url open for permitted schemes. Allowing use of "file:" or custom schemes is often unexpected.
BANDIT_PY_B313	2	Input Validation	Using various XML methods (xml.etree.cElementTree.parse, xml.etree.cElementTree.iterparse, xml.etree.cElementTree.fromstring, xml.etree.cElementTree.XMLParser) to parse untrusted XML data is known to be vulnerable to XML attacks. Methods should be replaced with their defusedxml equivalents.
BANDIT_PY_B314	2	Input Validation	Using various XML methods (xml.etree.ElementTree.parse, xml.etree.ElementTree.iterparse, xml.etree.ElementTree.fromstring, xml.etree.ElementTree.XMLParser) to parse untrusted XML data is known to be vulnerable to XML attacks. Methods should be replaced with their defusedxml equivalents.
BANDIT_PY_B315	2	Input Validation	Using various XML methods (xml.sax.expatreader.create_parser) to parse untrusted XML data is known to be vulnerable to XML attacks. Methods should be replaced with their defusedxml equivalents.
BANDIT_PY_B316	2	Input Validation	Using various XML methods (xml.dom.expatbuilder.parse, xml.dom.expatbuilder.parseString) to parse untrusted XML data is known to be vulnerable to XML attacks. Methods should be replaced with their defusedxml equivalents.
BANDIT_PY_B317	2	Input Validation	Using various XML methods (xml.etree.cElementTree.parse, xml.etree.cElementTree.iterparse, xml.etree.cElementTree.fromstring, xml.etree.cElementTree.XMLParser) to parse untrusted XML data is known to be vulnerable to XML attacks. Methods should be replaced with their defusedxml equivalents.
BANDIT_PY_B318	2	Input Validation	Using various XML methods (xml.dom.minidom.parse, xml.dom.minidom.parseString) to parse untrusted XML data is known to be vulnerable to XML attacks. Methods should be replaced with their defusedxml equivalents.
BANDIT_PY_B319	2	Input Validation	Using various XML methods (xml.dom.pulldom.parse, xml.dom.pulldom.parseString) to parse untrusted XML data is known to be vulnerable to XML attacks. Methods should be replaced with their defusedxml equivalents.
BANDIT_PY_B320	2	Input Validation	Using various XML methods (lxml.etree.parse, lxml.etree.fromstring, lxml.etree.RestrictedElement, lxml.etree.GlobalParserTLS, lxml.etree.getDefaultParser, lxml.etree.check_docinfo) to parse untrusted XML data is known to be vulnerable to XML attacks. Methods should be replaced with their defusedxml equivalents.
BANDIT_PY_B405	3	Input Validation	Using xml.sax to parse untrusted XML data is known to be vulnerable to XML attacks. Replace vulnerable imports with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called.
BANDIT_PY_B406	3	Input Validation	Using xml.sax to parse untrusted XML data is known to be vulnerable to XML attacks. Replace vulnerable imports with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called.
BANDIT_PY_B407	3	Input Validation	Using xml.dom.expatbuilder to parse untrusted XML data is known to be vulnerable to XML attacks. Replace vulnerable imports with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called.
BANDIT_PY_B408	3	Input Validation	Using xml.dom.minidom to parse untrusted XML data is known to be vulnerable to XML attacks. Replace vulnerable imports with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called.
BANDIT_PY_B409	3	Input Validation	Using xml.dom.pulldom to parse untrusted XML data is known to be vulnerable to XML attacks. Replace vulnerable imports with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called.
BANDIT_PY_B507	1	Input Validation	Paramiko call with policy set to automatically trust the unknown host key.
BANDIT_PY_B603	4	Input Validation	Subprocess call - check for execution of untrusted input.

BANDIT_PY_B323	2	Misconfiguration	Unverified context: Python allows using an insecure context via the _create_unverified_context that reverts to the previous behavior that does not validate certificates or perform hostname checks.
BANDIT_PY_B501	1	Misconfiguration	Missing certificate validation.
BANDIT_PY_B502	1	Misconfiguration	ssl.wrap_socket call with insecure SSL/TLS protocol version identified, security issue.
BANDIT_PY_B503	2	Misconfiguration	Function definition identified with insecure SSL/TLS protocol version by default, possible security issue.
BANDIT_PY_B504	3	Misconfiguration	ssl.wrap_socket call with no SSL/TLS protocol version specified.

BANDIT_PY_B101	3	Using Components with Known Vulnerabilities	The use of assert is also considered as general bad practice in OpenStack codebases.
BANDIT_PY_B102	2	Using Components with Known Vulnerabilities	Use of exec detected; The Python docs succinctly describe why the use of exec is risky.
BANDIT_PY_B306	2	Using Components with Known Vulnerabilities	Use of insecure and deprecated function (mktemp).
BANDIT_PY_B307	3	Using Components with Known Vulnerabilities	Use of possibly insecure function - consider using safer ast.literal_eval.
BANDIT_PY_B308	3	Using Components with Known Vulnerabilities	Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed.
BANDIT_PY_B309	1	Using Components with Known Vulnerabilities	Use of HTTPSConnection (httplib.HTTPSConnection, http.client.HTTPSConnection, six.moves.http_client.HTTPSConnection) on older versions of Python prior to 2.7.9 and 3.4.3 do not provide security.
BANDIT_PY_B312	1	Using Components with Known Vulnerabilities	Telnet-related functions are being called. Telnet is considered insecure. Use SSH or some other encrypted protocol.
BANDIT_PY_B325	2	Using Components with Known Vulnerabilities	Use of os.tempnam() and os.tmpnam() is vulnerable to symlink attacks. Consider using tmpfile() instead.
BANDIT_PY_B401	1	Using Components with Known Vulnerabilities	A telnet-related module is being imported. Telnet is considered insecure. Use SSH or some other encrypted protocol.
BANDIT_PY_B402	1	Using Components with Known Vulnerabilities	A FTP-related module is being imported (ftplib). FTP is considered insecure. Use SSH/SFTP/SCP or some other encrypted protocol.
BANDIT_PY_B403	3	Using Components with Known Vulnerabilities	Possible security implications associated with pickle modules (pickle, cPickle,dill, shelve).
BANDIT_PY_B404	4	Using Components with Known Vulnerabilities	Consider possible security implications associated with subprocess modules.
BANDIT_PY_B410	3	Using Components with Known Vulnerabilities	Using lxml to parse untrusted XML data is known to be vulnerable to XML attacks. Replace vulnerable imports with the equivalent defusedxml package.
BANDIT_PY_B411	1	Using Components with Known Vulnerabilities	XMLRPC is particularly dangerous as it is also concerned with communicating data over a network. Use defused.xmlrpc.monkey_patch() function to monkey-patch xmlrpclib and mitigate remote XML attacks.
BANDIT_PY_B412	1	Using Components with Known Vulnerabilities	httpoxy is a set of vulnerabilities that affect application code running in CGI, or CGI-like environments. The use of CGI for web applications should be avoided to prevent this class of attack.
BANDIT_PY_B413	1	Using Components with Known Vulnerabilities	pycrypto library is known to have publicly disclosed buffer overflow vulnerability.
BANDIT_PY_B506	3	Using Components with Known Vulnerabilities	Unsafe usage of the yaml.load function from the PyYAML package.