FortifyCSAccessControlAdministrativeInterface	1	Access Control	Failure to restrict access to administrative interfaces could allow an attacker gain complete control over the application.
FortifyCSAccessControlAnonymousLDAPBind	1	Access Control	Without proper access control, executing an LDAP statement that contains a user-controlled value can allow an attacker to access unauthorized records.
FortifyCSAccessControlDatabase	1	Access Control	Without proper access control, executing a SQL statement that contains a user-controlled primary key can allow an attacker to view unauthorized records.
FortifyCSAccessControlFormAuthenticationBypass	1	Access Control	The application sets a property that allows unvalidated input to native APIs and may lead to an attacker being able to bypass authentication.
FortifyCSAccessControlLDAP	1	Access Control	Without proper access control, executing an LDAP statement that contains a user-controlled value can allow an attacker to access unauthorized directory entries.
FortifyCSAccessControlMissingAuthentication	1	Access Control	The target web application contains a page with sensitive information or privileged functionality that does not require authentication.
FortifyCSAccessControlMissingURLNormalization	1	Access Control	Failure to convert request URLs into their canonical form before performing URL authorization can allow attackers to bypass Basic Authentication and gain unauthorized access to resources.
FortifyCSASPNETBadPracticesLeftoverDebugCode	1	ASP.NET Bad Practices	Debug code can create unintended entry points in a deployed web application.
FortifyCSASPNETBadPracticesNonSerializableObjectStoredinSession	1	ASP.NET Bad Practices	Storing a non-serializable object as an HttpSessionState attribute can damage application reliability.
FortifyCSASPNETBadPracticesUnminifiedCode	1	ASP.NET Bad Practices	Unminified JavaScript has been included in this file. Microsoft recommends that minified versions of JavaScript libraries should be included for performance reasons.
FortifyCSASPNETBadPracticesUnvalidatedWebAPIModel	1	ASP.NET Bad Practices	ASP.NET Web API action methods which receive a model should check if validation of the model passes, in order to prevent vulnerabilities that result from unchecked input.
FortifyCSASPNETBadPracticesUseofImpersonationContext	1	ASP.NET Bad Practices	Impersonating user credentials could allow an attacker to gain unauthorized access to protected resources.
FortifyCSASPNETMisconfigurationCertificateValidationDisabled	1	ASP.NET Misconfiguration	Certificates that are self-issued might not be trustworthy.
FortifyCSASPNETMisconfigurationCookieProtectionDisabled	1	ASP.NET Misconfiguration	The contents of unprotected cookies could be viewed or modified by attackers.
FortifyCSASPNETMisconfigurationDebugInformation	1	ASP.NET Misconfiguration	Debugging messages help attackers learn about the system and plan a form of attack.
FortifyCSASPNETMisconfigurationExcessiveSessionTimeout	1	ASP.NET Misconfiguration	An overly long authentication timeout gives attackers more time to potentially compromise user accounts.
FortifyCSASPNETMisconfigurationHeaderCheckingDisabled	1	ASP.NET Misconfiguration	Disabling header checking opens the door for attackers to perform header manipulation attacks such as HTTP Response Splitting.
FortifyCSASPNETMisconfigurationIncompleteCertificateValidation	1	ASP.NET Misconfiguration	Certificates that are self-issued might not be trustworthy.
FortifyCSASPNETMisconfigurationIncompleteCookieProtection	1	ASP.NET Misconfiguration	The contents of unprotected cookies could be viewed or modified by attackers.
FortifyCSASPNETMisconfigurationIncompleteRoleProtection	1	ASP.NET Misconfiguration	Unprotected role information in cookies can be viewed or modified by attackers.
FortifyCSASPNETMisconfigurationInformationDisclosure	1	ASP.NET Misconfiguration	The Documentation Protocol for ASP.NET Web Services is enabled which may disclose information on how to misuse the service.
FortifyCSASPNETMisconfigurationMissingErrorHandling	1	ASP.NET Misconfiguration	An ASP .NET application must enable custom error pages in order to prevent attackers from mining information from the framework's built-in error responses.
FortifyCSASPNETMisconfigurationMissingHMACSignature	1	ASP.NET Misconfiguration	The application sets a property that disables signature verification performed by ASP.NET when configured to use encryption.
FortifyCSASPNETMisconfigurationPasswordProtectionDisabled	1	ASP.NET Misconfiguration	Storing a password in plain text or using weak encryption could result in a system compromise.
FortifyCSASPNETMisconfigurationPersistentAuthentication	1	ASP.NET Misconfiguration	Persistent authentication tickets leave users vulnerable to session hijacking.
FortifyCSASPNETMisconfigurationRequestValidationDisabled	1	ASP.NET Misconfiguration	Use the ASP.NET validation framework to prevent vulnerabilities that result from unchecked input.
FortifyCSASPNETMisconfigurationRoleProtectionDisabled	1	ASP.NET Misconfiguration	Unprotected role information in cookies could be viewed or modified by attackers.
FortifyCSASPNETMisconfigurationSessionCookiesDisabled	1	ASP.NET Misconfiguration	The program does not use cookies to transmit session identifiers, which can leave the door open to Session Fixation and Session Hijacking attacks.
FortifyCSASPNETMisconfigurationTraceOutput	1	ASP.NET Misconfiguration	Trace debug information helps attackers learn about the system and plan a form of attack.
FortifyCSASPNETMisconfigurationUseofImpersonationContext	1	ASP.NET Misconfiguration	Configuring an ASP.NET application to run with impersonated credentials might give the application unnecessary privileges.
FortifyCSASPNETMisconfigurationViewStateMacDisabled	1	ASP.NET Misconfiguration	Disabling the view state message authentication check (MAC) can allow attackers to modify the View State.
FortifyCSASPNETMisconfigurationWeakPasswordProtection	1	ASP.NET Misconfiguration	Storing a password in plain text or using weak encryption could result in a system compromise.
FortifyCSASPNETMVCBadPracticesControllerActionNotRestrictedtoPOST	1	ASP.NET MVC Bad Practices	The controller action may benefit from being restricted to accept only the POST verb.
FortifyCSASPNETMVCBadPracticesControllerActionWithoutAntiForgeryValidation	1	ASP.NET MVC Bad Practices	The controller action may benefit from antiforgery validation.
FortifyCSASPNETMVCBadPracticesFormWithoutAntiForgeryToken	1	ASP.NET MVC Bad Practices	The Razor view contains a form but does not include an antiforgery token with that form and therefore may be more susceptible to cross-site request forgery.
FortifyCSASPNETMVCBadPracticesModelWithOptionalandRequiredProperties	1	ASP.NET MVC Bad Practices	The model class has properties that are required and properties that are not required and therefore may be susceptible to over-posting attacks.
FortifyCSASPNETMVCBadPracticesModelWithRequiredNonNullableProperty	1	ASP.NET MVC Bad Practices	The model class has a required non-nullable property and therefore may be susceptible to under-posting attacks.
FortifyCSASPNETMVCBadPracticesOptionalSubmodelWithRequiredProperty	1	ASP.NET MVC Bad Practices	The model class has a required property and is the type of an optional member of a parent model type and therefore may be susceptible to under-posting attacks.
FortifyCSCacheManagementHeaders	3	Cache Management	Insecure cache management policies could allow attackers to extract application content through header manipulation.
FortifyCSCacheManagementInsecureManifest	3	Cache Management	Insecure cache management policy for HTML5 offline application manifest can hinder timely updates to cached contents, resulting in unexpected application behavior.
FortifyCSCacheManagementInsecurePolicy	3	Cache Management	Insecure caching policies could allow an attacker to conduct content spoofing or information theft attacks.
FortifyCSCacheManagementLanguage	3	Cache Management	Insecure cache management policies could allow attackers to gain access to restricted content by manipulating the language setting.
FortifyCSCacheManagementSessionCookies	3	Cache Management	Failure to restrict proxy servers from caching responses establishing authentication cookies can expose sensitive session information to attackers enabling to conduct session hijacking attacks.
FortifyCSCacheManagementUnspecifiedCriteria	3	Cache Management	Insecure cache management policies could lead to information exposure.
FortifyCSCacheManagementUserAgent	3	Cache Management	Insecure cache management policies could lead to information exposure.
FortifyCSCertificateManagementCertificateinConfigurationFile	2	Certificate Management	Storing a plain text certificate in a configuration or manifest file could result in a compromise of that certificate.
FortifyCSClassLoaderManipulationStruts	1	ClassLoader Manipulation	The target application uses a version of Apache Struts known to contain a remote command injection vulnerability (CVE-2014-0112 and CVE-2014-0114).
FortifyCSCodeCorrectnessCalltoGCCollect	4	Code Correctness	Explicit requests for garbage collection are a bellwether indicating likely performance problems.
FortifyCSCodeCorrectnessClassDoesNotImplementEquals	4	Code Correctness	Equals() is called on an object that does not implement Equals().
FortifyCSCodeCorrectnessClassImplementsICloneable	4	Code Correctness	The ICloneable interface specifies a weak contract for its Clone method and should be avoided.
FortifyCSCodeCorrectnessErroneousClassCompare	4	Code Correctness	Determining an object's type based on its class name can lead to unexpected behavior or allow an attacker to inject a malicious class.
FortifyCSCodeCorrectnessMisleadingMethodSignature	4	Code Correctness	This looks like an effort to override a common .NET method, but it probably does not have the intended effect.
FortifyCSCodeCorrectnessMissingSerializableAttribute	4	Code Correctness	Classes that implement the ISerializable interface but do not declare the [Serializable] attribute will not be serialized.
FortifyCSCodeCorrectnessnullArgumenttoEquals	4	Code Correctness	The expression obj.Equals(null) should always be false.
FortifyCSCodeCorrectnessReadonlyCollectionReference	4	Code Correctness	The readonly keyword enforces the rule that the variable must be initialized as it's declared or in the constructor and cannot be modified anywhere else. This works as expected for value types, however the content of objects and lists are still modifiable even if it is declared as private readonly.
FortifyCSCodeCorrectnessToStringonArray	4	Code Correctness	ToString() is called on an array.
FortifyCSCommandInjection	1	Command Injection	Executing commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker.
FortifyCSCommandInjectionServerSideInclude	1	Command Injection	Improper handling of data by server-side includes can result in arbitrary command injection.
FortifyCSComplianceFailureMissingPrivacyPolicy	2	Compliance Failure	The application fails to clearly state the policy to protect user information.
FortifyCSConnectionStringParameterPollution	3	Connection String Parameter Pollution	Concatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.
FortifyCSCookieSecurityCookienotSentOverSSL	2	Cookie Security	A cookie is created without the secure flag set to true.
FortifyCSCookieSecurityHTTPOnlynotSet	2	Cookie Security	The program creates a cookie, but fails to set the HttpOnly flag to true.
FortifyCSCookieSecurityHTTPOnlynotSetonApplicationCookie	2	Cookie Security	The program does not set the HttpCookie.HttpOnly property to true.
FortifyCSCookieSecurityOverlyBroadDomain	2	Cookie Security	A cookie with an overly broad domain opens an application to attack through other applications.
FortifyCSCookieSecurityOverlyBroadPath	2	Cookie Security	A cookie with an overly broad path can be accessed through other applications on the same domain.
FortifyCSCookieSecurityPersistentCookie	2	Cookie Security	Storing sensitive data in a persistent cookie can lead to a breach of confidentiality or account compromise.
FortifyCSCookieSecuritySessionCookienotSentOverSSL	2	Cookie Security	The program sets the session.cookie_secure property to 0> or off.
FortifyCSCredentialManagementDefaultCredentials	2	Credential Management	Failure to remove default credentials can lead to severe system compromise.
FortifyCSCredentialManagementSensitiveInformationDisclosure	2	Credential Management	An attacker can capture sensitive information such as username, password and pin from HTML comments, URLs and unencrypted requests/responses.
FortifyCSCredentialManagementSensitiveInformationinURL	2	Credential Management	Attackers can capture any passwords transmitted in the URL.
FortifyCSCrossFrameScripting	1	Cross-Frame Scripting	Failure to restrict framing of an application within an Iframe can lead to Cross-Site Request Forgery or phishing attacks.
FortifyCSCrossSiteRequestForgery	2	Cross-Site Request Forgery	Form posts must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.
FortifyCSCrossSiteScriptingInterComponentCommunication	1	Cross-Site Scripting	Sending unvalidated data to a web browser can result in the browser executing malicious code.
FortifyCSCrossSiteScriptingInterComponentCommunicationCloud	1	Cross-Site Scripting	Sending unvalidated data to a web browser can result in the browser executing malicious code.
FortifyCSCrossSiteScriptingPersistent	1	Cross-Site Scripting	Sending unvalidated data to a web browser can result in the browser executing malicious code.
FortifyCSCrossSiteScriptingPoorValidation	1	Cross-Site Scripting	Relying on HTML, XML, and other types of encoding to validate user input can result in the browser executing malicious code.
FortifyCSCrossSiteScriptingReflected	1	Cross-Site Scripting	Sending unvalidated data to a web browser can result in the browser executing malicious code.
FortifyCSCrossSiteWebSocketHijacking	2	Cross-Site WebSocket Hijacking	Server fails to verify request origin effectively accepting cross-domain requests which can be used by an attacker to hijack a bidirectional WebSocket connection.
FortifyCSDangerousFileInclusion	1	Dangerous File Inclusion	Allowing unvalidated user input to control files that are included dynamically in a HTML file can lead to malicious code execution.
FortifyCSDangerousFileInclusionLocal	1	Dangerous File Inclusion	Allowing unvalidated user input to control files that are included dynamically in an HTML file can lead to malicious code execution.
FortifyCSDangerousFileInclusionRemote	1	Dangerous File Inclusion	Allowing unvalidated user input to control files that are included dynamically in an HTML file can lead to malicious code execution.
FortifyCSDeadCodeUnusedField	4	Dead Code	This field is never used directly or indirectly by a public method.
FortifyCSDeadCodeUnusedMethod	4	Dead Code	This method is not reachable from any method outside the class.
FortifyCSDeadCodeUnusedParameter	4	Dead Code	Supporting parameters to trigger unexposed, privileged functionality could allow an attacker to gain unauthorized access to application resources.
FortifyCSDenialofService	1	Denial of Service	An attacker could cause the program to crash or otherwise become unavailable to legitimate users.
FortifyCSDenialofServiceRegularExpression	1	Denial of Service	Untrusted data is passed to the application and used as a regular expression. This can cause the thread to overconsume CPU resources.
FortifyCSDenialofServiceRouting	1	Denial of Service	An attacker could cause the program to crash or otherwise become unavailable to legitimate users.
FortifyCSDirectoryTraversal	2	Directory Traversal	Failure to sufficiently validate user supplied input could allow an attacker read arbitrary files on the system.
FortifyCSDynamicCodeEvaluationCodeInjection	1	Dynamic Code Evaluation	Interpreting user-controlled instructions at run-time can allow attackers to execute malicious code.
FortifyCSDynamicCodeEvaluationRubyYAMLDeserialization	1	Dynamic Code Evaluation	Unsafe deserialization of user supplied input could allow  an attacker to inject arbitrary commands and gain unauthorized access to the system.
FortifyCSDynamicCodeEvaluationScriptInjection	1	Dynamic Code Evaluation	Interpreting user-controlled instructions at runtime can allow attackers to execute malicious code.
FortifyCSDynamicCodeEvaluationSerializableDelegate	1	Dynamic Code Evaluation	The serializable Delegate field in a given class may introduce arbitrary code execution vulnerability on or after the deserialization of that class.
FortifyCSDynamicCodeEvaluationUnsafeDeserialization	1	Dynamic Code Evaluation	Deserializing user-controlled object streams at runtime can allow attackers to execute arbitrary code on the server, abuse application logic, and/or lead to denial of service.
FortifyCSDynamicCodeEvaluationUnsafeJSONDeserialization	1	Dynamic Code Evaluation	Deserializing user-controlled Json streams might enable attackers to execute arbitrary code on the server, abuse application logic, and/or lead to denial of service.
FortifyCSDynamicCodeEvaluationUnsafeYAMLDeserialization	1	Dynamic Code Evaluation	Deserializing user-controlled YAML streams might enable attackers to execute arbitrary code on the server, abuse application logic, and/or lead to denial of service.
FortifyCSExposureofPOSTParametersinGETRequest	2	Exposure of POST Parameters in GET Request	Transmitting sensitive information via GET parameters can expose the application to Cross-Site Request Forgery attacks.
FortifyCSExternalContentContentDeliveryNetwork	1	External Content	Relying on a CDN to provide essential code directly to users can lead to malicious code execution.
FortifyCSFormulaInjection	1	Formula Injection	Attackers may control data written to a spreadsheet, which could enable them to target users opening the file on certain spreadsheet processors.
FortifyCSHardcodedDomaininHTML	2	Hardcoded Domain in HTML	Including a script from another domain means that the security of this web page is dependent on the security of the other domain.
FortifyCSHeaderCheckingDisabled	2	Header Checking Disabled	The application sets a property which causes validation errors to be ignored during HTTP parsing.
FortifyCSHeaderManipulation	2	Header Manipulation	Including unvalidated data in an HTTP response header can enable cache-poisoning, cross-site scripting, cross-user defacement, page hijacking, cookie manipulation or open redirect.
FortifyCSHeaderManipulationCookies	2	Header Manipulation	Including unvalidated data in Cookies can lead to HTTP Response header manipulation and enable cache-poisoning, cross-site scripting, cross-user defacement, page hijacking, cookie manipulation or open redirect.
FortifyCSHeaderManipulationIMAP	2	Header Manipulation	The target application unsafely constructs and saves an email over the Internet Message Access Protocol (IMAP), potentially allowing for an injection attack.
FortifyCSHiddenField	3	Hidden Field	A hidden form field is used.
FortifyCSHTML5CORSFunctionalityAbuse	2	HTML5	Failure to properly restrict cross domain access to sensitive resources could allow an attacker to carry out data theft or content spoofing attacks.
FortifyCSHTML5CORSProlongedCachingofPreflightResponse	2	HTML5	Unsafe caching of the preflight response could result in unauthorized cross domain access to sensitive resources based on an invalid policy.
FortifyCSHTML5CORSUnsafeMethodsAllowed	2	HTML5	Allowing unsafe HTTP methods such as PUT or DELETE could allow an attacker to inject malicious code, backdoor, deface site, or delete and lock resources to cause denial of service attacks.
FortifyCSHTML5CrossSiteScriptingProtection	2	HTML5	The X-XSS-Protection header is explicitly disabled which may increase the risk of cross-site scripting attacks.
FortifyCSHTML5DeprecatedContentSecurityPolicy	2	HTML5	Using deprecated Content Security Policy headers can cause unexpected behaviour in web browswers. 
FortifyCSHTML5FormValidationTurnedOff	2	HTML5	HTML5 validation of input form fields is disabled.
FortifyCSHTML5MIMESniffing	2	HTML5	The web.config file does not include the required header to mitigate MIME sniffing attacks
FortifyCSHTML5MisconfiguredContentSecurityPolicy	2	HTML5	Incorrectly configured Content Security Policy could expose an application against client-side threats including Cross-Site Scripting, Cross Frame Scripting and Cross-Site Request Forgery.
FortifyCSHTML5MissingContentSecurityPolicy	2	HTML5	The Content Security Policy (CSP) is an HTTP response security header that developers and security architects can leverage to whitelist domains from which the site is allowed to load resources.
FortifyCSHTML5OverlyPermissiveCORSPolicy	2	HTML5	The program defines an overly permissive Cross-Origin Resource Sharing (CORS) policy.
FortifyCSHTML5OverlyPermissiveReferrerPolicy	2	HTML5	Setting Referrer-Policy header to "Unsafe-URL" may cause applications to expose sensitive site and user data, such as session token and username and passwords to third party sites.
FortifyCSHTML5SensitiveInformationDisclosureviaClientSideStorage	2	HTML5	Improper use of client-side storage could lead to disclosure of sensitive information.
FortifyCSHTTPParameterPollution	3	HTTP Parameter Pollution	Concatenating unvalidated input into a URL can allow an attacker to override the value of a request parameter. Attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.
FortifyCSHTTPVerbTampering	2	HTTP Verb Tampering	Security constraints that specify HTTP verbs often allow more access than intended.
FortifyCSInsecureDeploymentDefaultConfiguration	1	Insecure Deployment	Leaving third-party application installations in default configuration could allow an attacker to gain unauthorized access or steal sensitive information.
FortifyCSInsecureDeploymentHTTPsys	1	Insecure Deployment	The target server uses a version of Microsoft's IIS web server software that contains a critical remote code execution vulnerability (CVE-2015-1635).
FortifyCSInsecureDeploymentKnownApplicationFingerprint	1	Insecure Deployment	Deploying unpatched versions of applications can allow attackers to exploit known vulnerabilities to compromise the target system.
FortifyCSInsecureDeploymentKnownCAPTCHAFingerprint	1	Insecure Deployment	Use of insecure CAPTCHA implementations can allow attackers to bypass anti-automation protections.
FortifyCSInsecureDeploymentKnownFrameworkFingerprint	1	Insecure Deployment	Knowledge about the framework used to build the application can allow attackers to devise attacks targeted for vulnerabilities specific to detected framework.
FortifyCSInsecureDeploymentKnownServerFingerprint	1	Insecure Deployment	Deploying web applications on unpatched or insecurely configured servers can allow attackers to compromise the target by exploiting known vulnerabilities against detected server.
FortifyCSInsecureDeploymentKnownTechnologyFingerprint	1	Insecure Deployment	Failure to follow security best practices guidelines established for the underlying technology can expose an application to exploits targeting known security weaknesses.
FortifyCSInsecureDeploymentMaliciousApplication	1	Insecure Deployment	Presence of a malicious application could indicate that an attacker installed backdoor that could render all the application security controls ineffective.
FortifyCSInsecureDeploymentOpenSSL	1	Insecure Deployment	Deploying vulnerable versions of the OpenSSL library could allow an attacker to intercept and hijack secure SSL/TLS communication.
FortifyCSInsecureDeploymentPathNormalizationConflict	1	Insecure Deployment	Path Normalization Conflict can allow attackers to gain access to sensitive resources that would otherwise be inaccessible.
FortifyCSInsecureDeploymentPredictableResourceName	1	Insecure Deployment	Use of predictable names for sensitive resources could aid an attacker in the application discovery process.
FortifyCSInsecureDeploymentSampleApplication	1	Insecure Deployment	Deploying sample applications alongside custom application code and resources could allow an attacker to gain unauthorized access to sensitive resources and functionality or remotely execute arbitrary commands.
FortifyCSInsecureDeploymentSitemap	1	Insecure Deployment	Ensure that restricted sensitive resources are not exposed through the sitemap.
FortifyCSInsecureDeploymentUnpatchedApplication	1	Insecure Deployment	Failure to install up-to-date patches could lead to severe system compromise
FortifyCSInsecureRandomness	1	Insecure Randomness	Standard pseudorandom number generators cannot withstand cryptographic attacks.
FortifyCSInsecureSSLServerIdentityVerificationDisabled	1	Insecure SSL	Server identity verification is disabled when making SSL connections.
FortifyCSInsecureTransport	1	Insecure Transport	The application uses an unencrypted protocol instead of an encrypted protocol to communicate with the server.
FortifyCSInsecureTransportChannelMixing	1	Insecure Transport	Mixing HTTP and HTTPS content in a single web page can lead to data exposure vulnerabilities.
FortifyCSInsecureTransportDatabase	1	Insecure Transport	The application is configured to communicate with its database server in plain text over unencrypted channels, making the communicated data vulnerable to interception via man-in-the-middle (MiTM) attacks.
FortifyCSInsecureTransportInsufficientDiffieHellmanStrength	1	Insecure Transport	Using Diffie-Hellman group with prime(p or small prime) of size 1024-bit or less leaves the server vulnerable to man in the middle attack (MitM).
FortifyCSInsecureTransportMailTransmission	1	Insecure Transport	Establishing an unencrypted connection to a mail server allows an attacker to carry out a man-in-the-middle attack and read all the mail transmissions.
FortifyCSInsecureTransportMisconfiguredPublicKeyPinning	1	Insecure Transport	Failure to configure Public-Key-Pins header as per RFC7469 guidance may result in an ineffective or weak protection against man-in-the-middle attacks arising from rogue or compromised certificate authority (CA).
FortifyCSInsecureTransportMissingPerfectForwardSecrecy	1	Insecure Transport	The target application does not support a cipher suite that implements Perfect Forward Secrecy (PFS).
FortifyCSInsecureTransportMissingPublicKeyPinning	1	Insecure Transport	Failure to include Public-Key-Pins security header may result in a hostile pinning attack against a host as described in header RFC7469. Usage of the header provides a declarative way to implement public key pinning and provides protection against threats arising from rogue or compromised certificate authorities (CA).
FortifyCSInsecureTransportOAuthCommunicationChannel	1	Insecure Transport	Conducting OAuth communication over an insecure channel could allow an attacker to gain access to sensitive information and perform privileged actions on behalf of the user.
FortifyCSInsecureTransportSecureSectionAccessNotSSLEnabled	1	Insecure Transport	Access to secure sections of a web site over an unencrypted communication channel can lead to unintended exposure of sensitive information.
FortifyCSInsecureTransportSSLv3TLSRenegotiationStreamInjection	1	Insecure Transport	Use of unsafe renegotiation could allow an attacker to inject plaintext into the SSL/TLS protocol stream.
FortifyCSInsecureTransportTLS_RSA	1	Insecure Transport	ROBOT attack allows an attacker to perform RSA signing operations with a private key of TLS server and decrypt previously recorded TLS sessions established with RSA key exchange. It may allow an attacker to potentially extract critical sensitive data including, but not limited to, usernames and passwords, business intellectual properties, personal identity, financial, social and political secrets etc.
FortifyCSInsecureTransportWeakSSLCipher	1	Insecure Transport	Relying on weak cipher suites to enable encrypted communication could allow an attacker to steal sensitive information.
FortifyCSInsecureTransportWeakSSLProtocol	1	Insecure Transport	The SSLv2, SSLv23, and SSLv3 protocols contain several flaws that make them insecure, so they should not be used to transmit sensitive data.
FortifyCSInsufficientAntiAutomation	1	Insufficient Anti-Automation	Failure to detect and block automated attacks could allow an attacker to conduct brute force attacks or trigger denial of service conditions.
FortifyCSJavaScriptHijackingJSONP	1	JavaScript Hijacking	JSONP is an insecure communication technique and it should only be used when no personal or sensitive data is involved and sanitizing the callback function.
FortifyCSJavaScriptHijackingVulnerableFramework	1	JavaScript Hijacking	Applications that leverage versions of the DWR Ajax framework 1.1.4 and earlier are vulnerable to JavaScript hijacking, which allows an unauthorized attacker to read confidential data.
FortifyCSJSONInjection	1	JSON Injection	The method writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.
FortifyCSKeyManagementEmptyHMACKey	1	Key Management	Empty HMAC keys could compromise system security in a way that cannot be easily remedied.
FortifyCSKeyManagementEmptyPBEPassword	1	Key Management	Using a key generated by a password-based key derivation function that was passed an empty value for its password argument may compromise system security in a way that cannot be easily remedied.
FortifyCSKeyManagementHardcodedEncryptionKey	1	Key Management	Hardcoded encryption keys can compromise security in a way that cannot be easily remedied.
FortifyCSKeyManagementHardcodedHMACKey	1	Key Management	Hardcoded HMAC keys could compromise system security in a way that cannot be easily remedied.
FortifyCSKeyManagementHardcodedPBEPassword	1	Key Management	Using a key generated by a password-based key derivation function that was passed a hardcoded value for its password argument may compromise system security in a way that cannot be easily remedied.
FortifyCSLDAPInjection	1	LDAP Injection	Constructing a dynamic LDAP filter with user input could allow an attacker to modify the statement's meaning.
FortifyCSLDAPManipulation	1	LDAP Manipulation	Executing an LDAP statement that contains a user-controlled value outside the filter string can allow an attacker to alter the statement's meaning or execute arbitrary LDAP commands.
FortifyCSLogForging	2	Log Forging	Writing unvalidated user input to log files can allow an attacker to forge log entries or inject malicious content into the logs.
FortifyCSMassAssignmentInsecureBinderConfiguration	2	Mass Assignment	The framework binder used for binding the HTTP request parameters to the model class has not been explicitly configured to allow, or disallow certain attributes
FortifyCSMassAssignmentRequestParametersBoundintoPersistedObjects	2	Mass Assignment	Allowing database persistent entities to be auto-populated by request parameters can allow an attacker to create unintended records in association entities or update unintended fields in the entity object.
FortifyCSMassAssignmentSensitiveFieldExposure	2	Mass Assignment	A sensitive field is exposed to the model binder.
FortifyCSMemcachedInjection	1	Memcached Injection	Invoking a Memcached operation with input from an untrusted source might allow an attacker to introduce new key/value pairs in Memcached cache.
FortifyCSMissingCheckagainstNull	4	Missing Check against Null	The program can dereference a null-pointer because it does not check the return value of a function that might return null.
FortifyCSMissingXMLValidation	2	Missing XML Validation	Failure to enable validation when parsing XML gives an attacker the opportunity to supply malicious input.
FortifyCSNoSQLInjectionMongoDB	1	NoSQL Injection	Constructing a dynamic MongoDB query with input coming from an untrusted source could allow an attacker to modify the statement's meaning.
FortifyCSNullDereference	4	Null Dereference	The program can potentially dereference a null-pointer, thereby causing a segmentation fault.
FortifyCSObjectModelViolationJustOneofEqualsandGetHashCodeDefined	3	Object Model Violation	This class overrides only one of Equals() and GetHashCode().
FortifyCSObsolete	3	Obsolete	The use of deprecated or obsolete functions could indicate neglected code.
FortifyCSOftenMisusedAssertingPermissions	4	Often Misused	The code asserts to its callers that a certain permission is given, potentially allowing an attacker to bypass security controls.
FortifyCSOftenMisusedAuthentication	4	Often Misused	The getlogin() function is easy to spoof. Do not rely on the name it returns.
FortifyCSOftenMisusedEncoding	4	Often Misused	Improper overriding of the classes in the .NET Framework, may lead to arbitrary code execution on the server, abuse of application logic or denial of service.
FortifyCSOftenMisusedFileUpload	4	Often Misused	Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.
FortifyCSOftenMisusedHTTPMethodOverride	4	Often Misused	Attackers may bypass server protections against dangerous HTTP verbs using override techniques.
FortifyCSOftenMisusedLogin	4	Often Misused	Insecure handling of login information can allow attackers to circumvent the application's authentication system.
FortifyCSOftenMisusedMACAddress	4	Often Misused	A MAC address is intended to be used as a network identifier. Since a MAC address permanently identifies a device, all apps using it as a user identifier will have the same ID value.  Hence, by correlating information from various apps, it is possible to identify a device and its user, threatening user privacy.
FortifyCSOftenMisusedMobileUDID	4	Often Misused	The target mobile application sends data that looks like a Universal Device Identifier (UDID) in a request.
FortifyCSOftenMisusedMobileUUID	4	Often Misused	The target mobile application sends data that looks like a Universally Unique Identifier (UUID) in a request.
FortifyCSOftenMisusedPriceRelatedFields	4	Often Misused	Relying solely on client-side security controls and failure to perform server-side validation can allow attackers to manipulate sensitive data and adversely affect the application operation.
FortifyCSOftenMisusedSMS	4	Often Misused	The application performs iOS specific SMS-related operations.
FortifyCSOftenMisusedWeakSSLCertificate	4	Often Misused	The target server uses a self-signed certificate.
FortifyCSOftenMisusedXDomainRequestAllowed	4	Often Misused	The target server included the XDomainRequestAllowed header in an HTTP request with a value of "1," potentially enabling unauthorized cross-domain requests.
FortifyCSOpenRedirect	2	Open Redirect	Allowing unvalidated input to control the URL used in a redirect can aid phishing attacks.
FortifyCSParameterTamperingSpecialCharacters	2	Parameter Tampering	Processing of user supplied input without proper validation could allow an attacker to gain unauthorized access to server resources, extract information from a database, or execute arbitrary operating-system level commands.
FortifyCSPasswordManagement	2	Password Management	Storing a password in plain text can result in a system compromise.
FortifyCSPasswordManagementEmptyPassword	2	Password Management	Empty passwords may compromise system security in a way that cannot be easily remedied.
FortifyCSPasswordManagementEmptyPasswordinConfigurationFile	2	Password Management	Using an empty string as a password is insecure.
FortifyCSPasswordManagementHardcodedPassword	2	Password Management	Hardcoded passwords could compromise system security in a way that cannot be easily remedied.
FortifyCSPasswordManagementInsecureSubmission	2	Password Management	Submitting a password as part of an HTTP GET request will cause the password to be displayed, logged, or stored in a cache.
FortifyCSPasswordManagementNullPassword	2	Password Management	Null passwords can compromise security.
FortifyCSPasswordManagementPasswordinComment	2	Password Management	Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.
FortifyCSPasswordManagementPasswordinConfigurationFile	2	Password Management	Storing a plain text password in a configuration file could result in a system compromise.
FortifyCSPasswordManagementPasswordinHTMLForm	2	Password Management	Populating password fields in an HTML form could result in a system compromise.
FortifyCSPasswordManagementPlainTextPasswordinTransit	2	Password Management	The application transmits a clear text password over unencrypted channels, making the communicated data vulnerable to interception via man-in-the-middle (MiTM) attacks.
FortifyCSPasswordManagementWeakCryptography	2	Password Management	Obscuring a password with trivial encoding does not protect the password.
FortifyCSPasswordManagementWeakPasswordPolicy	2	Password Management	Weak passwords can be easily guessed and are an easy target for brute force attacks. This can lead to an authentication system failure and compromise system security.
FortifyCSPathManipulation	3	Path Manipulation	Allowing user input to control paths used in file system operations could enable an attacker to access or modify otherwise protected files.
FortifyCSPathManipulationAbsolutePathTraversal	3	Path Manipulation	Allowing user to supply file paths to access without sufficient validation and access control checks could lead to sensitive data disclosure and potential recovery of proprietary business logic.
FortifyCSPathManipulationBasePathOverwriting	3	Path Manipulation	Allowing user input to control paths used in file system operations could enable an attacker to access or modify otherwise protected system resources.
FortifyCSPathManipulationRelativePathOverwrite	3	Path Manipulation	Anomalous handling of relative paths by an application server may allow attackers to bypass existing protections for vulnerabilities such as Cross-Site Scripting and provide new ways to attack the application.
FortifyCSPathManipulationSpecialCharacters	3	Path Manipulation	Use of unfiltered data in selection of requested application file path could lead to sensitive data disclosure and potential theft of proprietary business logic.
FortifyCSPathManipulationZipEntryOverwrite	3	Path Manipulation	Allowing user input to control paths used in file system operations could enable an attacker to arbitrarily overwrite files on the system.
FortifyCSPermissionManipulation	3	Permission Manipulation	Allowing user input to directly alter permissions may enable an attacker to access otherwise protected system resources.
FortifyCSPermissionManipulationLogging	3	Permission Manipulation	Allowing user input to directly alter permissions to determine auditing may enable an attacker to hide their activity.
FortifyCSPoorErrorHandlingColdFusionError	3	Poor Error Handling	The target ColdFusion application reveals potentially sensitive information within a publicly-displayed error message.
FortifyCSPoorErrorHandlingEmptyCatchBlock	3	Poor Error Handling	Ignoring an exception can cause the program to overlook unexpected states and conditions.
FortifyCSPoorErrorHandlingOverlyBroadCatch	3	Poor Error Handling	The catch block handles a broad swath of exceptions, potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.
FortifyCSPoorErrorHandlingProgramCatchesNullReferenceException	3	Poor Error Handling	It is generally a bad practice to catch NullReferenceException.
FortifyCSPoorLoggingPracticeUseofaSystemOutputStream	3	Poor Logging Practice	Using Console.Out or Console.Error rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.
FortifyCSPortabilityFlawFileSeparator	3	Portability Flaw	The use of hardcoded file separators causes portability problems.
FortifyCSPrivacyViolation	2	Privacy Violation	Mishandling private information, such as customer passwords or social security numbers, can compromise user privacy and is often illegal.
FortifyCSPrivacyViolationAutocomplete	2	Privacy Violation	Autocompletion of forms allows some browsers to retain sensitive information in their history.
FortifyCSPrivacyViolationCaliforniaDriverLicenseNumber	2	Privacy Violation	Revealing driver license numbers could contribute to successful identity theft attempts.
FortifyCSPrivacyViolationCreditCardNumber	2	Privacy Violation	Revealing a credit card number could pose a significant financial risk to the user and also contribute to successful identity theft attempts.
FortifyCSPrivacyViolationDatabaseConnectionString	2	Privacy Violation	Revealing database connection details through hardcoded connection strings can lead to data theft and data corruption by unauthorized parties.
FortifyCSPrivacyViolationEmailDisclosure	2	Privacy Violation	Disclosure of a personal email address can compromise an individual's identity, their privacy and is in direct violation of the EU General Data Protection Regulation (GDPR).
FortifyCSPrivacyViolationGeolocation	2	Privacy Violation	The target mobile application sends device geolocation data in a request to an external host.
FortifyCSPrivacyViolationHealthInformation	2	Privacy Violation	The identified function mishandles health information. This program could compromise user privacy.
FortifyCSPrivacyViolationHeapInspection	2	Privacy Violation	Storing sensitive data in an insecure manner makes it possible to extract the data via inspecting the heap.
FortifyCSPrivacyViolationImage	2	Privacy Violation	The application server persists sensitive information to disk in an unencrypted format. This data may not be removed under all conditions.
FortifyCSPrivacyViolationInconsistentFeedback	2	Privacy Violation	When entering an invalid user name or password during a login, forgotten password or new user signup function, an application may provide meaningful feedback through a response discrepancy. For the potential attacker, this discrepancy increases the chances of a successful brute force attack against the site's authentication.
FortifyCSPrivacyViolationNationalIDDisclosure	2	Privacy Violation	Disclosure of a person's national identification number can compromise an individual's identity, their privacy and is in direct violation of the EU General Data Protection Regulation (GDPR).
FortifyCSPrivacyViolationShoulderSurfing	2	Privacy Violation	A viewed password endangers system security.
FortifyCSPrivacyViolationSocialSecurityNumber	2	Privacy Violation	Revealing a social security number could contribute to successful identity theft attempts.
FortifyCSProcessControl	3	Process Control	Transferring program control to an untrusted program or a transaction, or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker.
FortifyCSRaceConditionRoamingDataAccess	2	Race Condition	The developer is using the RoamingFolder or RoamingSettings property of the Windows.Storage.ApplicationData class.
FortifyCSRegistryManipulation	3	Registry Manipulation	Allowing external control of registry settings can disrupt service or cause an application to behave in unexpected ways.
FortifyCSResourceInjection	1	Resource Injection	Allowing user input to control resource identifiers could enable an attacker to access or modify otherwise protected system resources.
FortifyCSSAMLBadPracticesInsecureMessageIDImplementation	2	SAML Bad Practices	SAML message that do not provide same unique ID for AuthnRequest, InResponseTo attributes and a unique ID for SAML Assertion  might be susceptible to replay attacks.
FortifyCSSAMLBadPracticesInsufficientMessageExpiration	2	SAML Bad Practices	Failure to properly restrict validity period for SAML Assertion could allow an attacker to carry out SAML Replay attacks.
FortifyCSSAMLBadPracticesMissingAssertionSignature	2	SAML Bad Practices	Service provider can not prove validity and integrity of SAML responses that are not cryptographically signed.
FortifyCSServerSideRequestForgery	1	Server-Side Request Forgery	The application initiates a network connection to a third-party system using user-controlled data to craft the resource URI.
FortifyCSServerSideScriptInjection	1	Server-Side Script Injection	Failure to validate user-supplied input could allow an attacker to bypass authentication, steal sensitive information or trigger a denial of service condition.
FortifyCSSessionFixationOAuth	2	Session Fixation	Authenticating a user without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.
FortifyCSSessionManagementEasytoGuessSessionIdentifierName	2	Session Management	An easy-to-guess session identifier name can be used by an attacker for hijacking sessions or application reconnaissance.
FortifyCSSessionManagementInsufficientSessionIDEntropy	2	Session Management	Session identifiers with entropy lower than 64 bits can allow attackers to hijack legitimate user session and lead to information theft.
FortifyCSSessionManagementInsufficientSessionIDLength	2	Session Management	Session identifiers should be at least 128 bits long to prevent brute-force session guessing attacks.
FortifyCSSettingManipulation	3	Setting Manipulation	Allowing external control of system settings can disrupt service or cause an application to behave in unexpected ways.
FortifyCSSettingManipulationCharacterSet	3	Setting Manipulation	Allowing external control of system settings can disrupt service or cause an application to behave in unexpected ways.
FortifyCSSilverlightMisconfigurationOverlyPermissiveCrossDomainPolicy	2	Silverlight Misconfiguration	The configuration file on the service host defines an overly permissive cross-domain policy.
FortifyCSSQLInjection	1	SQL Injection	Constructing a dynamic SQL statement with input that comes from an untrusted source could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.
FortifyCSSQLInjectionCastleActiveRecord	1	SQL Injection	Constructing a dynamic Castle ActiveRecord statement with input coming from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.
FortifyCSSQLInjectionLINQ	1	SQL Injection	Constructing a dynamic LINQ statement with input coming from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.
FortifyCSSQLInjectionNHibernate	1	SQL Injection	Using NHibernate to execute a dynamic SQL statement built with input coming from an untrusted source can allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.
FortifyCSSQLInjectionSubSonic	1	SQL Injection	Constructing a dynamic SubSonic statement with input coming from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.
FortifyCSSystemInformationLeak	2	System Information Leak	Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.
FortifyCSSystemInformationLeakCVSEntries	2	System Information Leak	Insufficient access control could reveal system information and allow an attacker to better map the application attack surface.
FortifyCSSystemInformationLeakExternal	2	System Information Leak	Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.
FortifyCSSystemInformationLeakInternal	2	System Information Leak	Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.
FortifyCSSystemInformationLeakInternalIP	2	System Information Leak	Disclosing the IP addressing scheme of the internal network can allow attackers to discover internal systems and expand the attack surface.
FortifyCSSystemInformationLeakLDAPError	2	System Information Leak	Revealing verbose error messages could allow an attacker to learn about the application and form a plan of attack.
FortifyCSSystemInformationLeakLDAPQuery	2	System Information Leak	Disclosure of LDAP queries can allow attackers to retrieve information from an LDAP server using LDAP injection.
FortifyCSSystemInformationLeakSignalRExposedJavaScriptProxy	2	System Information Leak	Automatically generated JavaScript proxy files can leak system information as they list all the exposed methods in the Hubs.
FortifyCSSystemInformationLeakSQLQuery	2	System Information Leak	Disclosing SQL queries used by an application to communicate with the backend database could allow an attacker to steal sensitive information, manipulate the application's behavior or interrupt the database operation.
FortifyCSSystemInformationLeakXPathError	2	System Information Leak	Revealing detailed error messages could allow an attacker to learn about the application and form a plan of attack.
FortifyCSSystemInformationLeakXPathQuery	2	System Information Leak	Disclosing XPath queries used by an application to interact with XML documents could allow an attacker to steal sensitive information or disrupt the execution of the application.
FortifyCSTrustBoundaryViolation	3	Trust Boundary Violation	Commingling trusted and untrusted data in the same data structure encourages programmers to mistakenly trust unvalidated data.
FortifyCSUncheckedReturnValue	4	Unchecked Return Value	Ignoring a method's return value can cause the program to overlook unexpected states and conditions.
FortifyCSUninitializedVariable	4	Uninitialized Variable	The program can potentially use a variable before it has been initialized.
FortifyCSUnreleasedResource	4	Unreleased Resource	The program can potentially fail to release a system resource.
FortifyCSUnreleasedResourceDatabase	4	Unreleased Resource	The program can potentially fail to release a database resource.
FortifyCSUnreleasedResourceLDAP	4	Unreleased Resource	The program can potentially fail to release an LDAP resource.
FortifyCSUnreleasedResourceStreams	4	Unreleased Resource	The program can potentially fail to release a system resource.
FortifyCSUnreleasedResourceSynchronization	4	Unreleased Resource	The program fails to release a lock it holds, which might lead to deadlock.
FortifyCSUnreleasedResourceUnmanagedObject	4	Unreleased Resource	The program fails to dispose of a managed object that utilizes unmanaged system resources.
FortifyCSUnsafeNativeInvoke	3	Unsafe Native Invoke	Improper use of the Platform Invocation Services can render managed applications vulnerable to security flaws in other languages.
FortifyCSUnsafeReflection	3	Unsafe Reflection	An attacker may be able to create unexpected control flow paths through the application, potentially bypassing security checks.
FortifyCSValueShadowing	3	Value Shadowing	The program accesses a variable in an ambiguous way, which can leave it open to attack.
FortifyCSValueShadowingServerVariable	3	Value Shadowing	The program accesses a server variable in an ambiguous way, which can leave it open to attack.
FortifyCSWCFMisconfigurationAnonymousMessageClient	2	WCF Misconfiguration	The absence of authentication means everyone is able to access this service.
FortifyCSWCFMisconfigurationAnonymousTransportClient	2	WCF Misconfiguration	The absence of authentication means everyone is able to access this service.
FortifyCSWCFMisconfigurationDebugInformation	2	WCF Misconfiguration	Debugging information helps attackers learn about the system and plan a form of attack.
FortifyCSWCFMisconfigurationInsecureTransport	2	WCF Misconfiguration	The application configuration should ensure that HTTPS is used for all access to sensitive information.
FortifyCSWCFMisconfigurationInsufficientAuditFailureHandling	2	WCF Misconfiguration	The program is configured not to generate an exception when it fails to write to an audit log.
FortifyCSWCFMisconfigurationInsufficientLogging	2	WCF Misconfiguration	The lack of a proper audit trail after a security incident can hamper forensic efforts.
FortifyCSWCFMisconfigurationMetadata	2	WCF Misconfiguration	Metadata can help attackers learn about the system and plan a form of attack.
FortifyCSWCFMisconfigurationMSMQAnonymousTransportClient	2	WCF Misconfiguration	Because the program fails to enable authentication when connecting to MSMQ queues, an attacker may anonymously submit messages to the queue for processing.
FortifyCSWCFMisconfigurationSecurityNotEnabled	2	WCF Misconfiguration	No transport or message security has been defined.
FortifyCSWCFMisconfigurationServiceEnumeration	2	WCF Misconfiguration	Publicly exposing information about a service can provide attackers with valuable insight into how they might exploit the service.
FortifyCSWCFMisconfigurationThrottlingNotEnabled	2	WCF Misconfiguration	Not placing a limit on the use of system resources could result in resource exhaustion and ultimately a denial of service.
FortifyCSWCFMisconfigurationTransportSecurityEnabled	2	WCF Misconfiguration	The application uses a WCF endpoint that relies upon transport mode transfer security. Transport mode is the least secure option and should be avoided.
FortifyCSWCFMisconfigurationUnauthorizedAccess	2	WCF Misconfiguration	This service does not use an authorization control.
FortifyCSWCFMisconfigurationUnsafeRevocationMode	2	WCF Misconfiguration	Because the program fails to enable certificate revocation checking, it will accept certificates that are either known or are suspected to be compromised.
FortifyCSWCFMisconfigurationWeakClassReference	2	WCF Misconfiguration	The program uses a weak class reference, which might allow an attacker to execute unauthorized code.
FortifyCSWCFMisconfigurationWeakToken	2	WCF Misconfiguration	Using a UsernameToken with a plain text password over an unencrypted channel exposes the password to attackers who can sniff the SOAP messages.
FortifyCSWeakCryptographicHash	1	Weak Cryptographic Hash	Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.
FortifyCSWeakCryptographicHashInsecurePBEIterationCount	1	Weak Cryptographic Hash	The iteration count used by a password-based key derivation function is too low.
FortifyCSWeakCryptographicHashPredictableSalt	1	Weak Cryptographic Hash	Salt values should be created using a cryptographic pseudorandom number generator.
FortifyCSWeakCryptographicHashUserControlledAlgorithm	1	Weak Cryptographic Hash	Using a user-controlled algorithm within a cryptographic hash may enable the attacker to specify a weak cryptographic hash algorithm, compromising data integrity and security of the application.
FortifyCSWeakCryptographicHashUserControlledPBESalt	1	Weak Cryptographic Hash	Potentially tainted user inputs should not be passed as the salt parameter to a Password-Based Key Derivation Function (PBKDF).
FortifyCSWeakCryptographicSignatureInsufficientKeySize	1	Weak Cryptographic Signature	An otherwise strong cryptographic signature algorithm can be significantly more vulnerable to brute-force attacks if an insufficient key size is used.
FortifyCSWeakCryptographicSignatureUserControlledKeySize	1	Weak Cryptographic Signature	Cryptographic signature functions that take a key size parameter should not be passed a tainted key size value.
FortifyCSWeakEncryption	1	Weak Encryption	The identified call uses a weak encryption algorithm that cannot guarantee the confidentiality of sensitive data.
FortifyCSWeakEncryptionInadequateRSAPadding	1	Weak Encryption	Public key RSA encryption is performed without using OAEP padding, thereby making the encryption weak.
FortifyCSWeakEncryptionInsecureInitializationVector	1	Weak Encryption	Initialization vectors should be created using a cryptographic pseudorandom number generator.
FortifyCSWeakEncryptionInsecureModeofOperation	1	Weak Encryption	Cryptographic encryption algorithms should not be used with an insecure mode of operation.
FortifyCSWeakEncryptionInsufficientKeySize	1	Weak Encryption	An otherwise strong encryption algorithm is vulnerable to brute-force attack when an insufficient key size is used.
FortifyCSWeakEncryptionUserControlledKeySize	1	Weak Encryption	Encryption functions that take a key size parameter should not be passed a tainted key size value.
FortifyCSWeakWSSecurityPolicyInsecureTransport	1	Weak WS-SecurityPolicy	The application configuration should ensure that HTTPS is used to transport all sensitive information.
FortifyCSWeakWSSecurityPolicyInsufficientSupportingTokenProtection	1	Weak WS-SecurityPolicy	The integrity of tokens cannot be guaranteed on unsigned tokens. Similarly, the confidentiality of tokens cannot be guaranteed on unencrypted tokens.
FortifyCSWeakWSSecurityPolicyMissingEncryptiononMessageAttachments	1	Weak WS-SecurityPolicy	Unencrypted messages fail to protect confidentiality.
FortifyCSWeakWSSecurityPolicyMissingEncryptiononMessageBody	1	Weak WS-SecurityPolicy	Unencrypted messages fail to protect confidentiality.
FortifyCSWeakWSSecurityPolicyMissingEncryptiononMessageHeaders	1	Weak WS-SecurityPolicy	Unencrypted messages fail to protect confidentiality.
FortifyCSWeakWSSecurityPolicyMissingEncryptionToken	1	Weak WS-SecurityPolicy	Unencrypted messages fail to protect confidentiality.
FortifyCSWeakWSSecurityPolicyMissingInitiatorEncryptionToken	1	Weak WS-SecurityPolicy	Unencrypted messages fail to protect confidentiality.
FortifyCSWeakWSSecurityPolicyMissingInitiatorSignatureToken	1	Weak WS-SecurityPolicy	A missing signature means the integrity of a SOAP message cannot be guaranteed.
FortifyCSWeakWSSecurityPolicyMissingRecipientEncryptionToken	1	Weak WS-SecurityPolicy	Unencrypted messages fail to protect confidentiality.
FortifyCSWeakWSSecurityPolicyMissingRecipientSignatureToken	1	Weak WS-SecurityPolicy	A missing signature means the integrity of a SOAP message cannot be guaranteed.
FortifyCSWeakWSSecurityPolicyMissingSignatureonMessageAttachments	1	Weak WS-SecurityPolicy	A missing signature means the integrity of a SOAP message cannot be guaranteed.
FortifyCSWeakWSSecurityPolicyMissingSignatureonMessageBody	1	Weak WS-SecurityPolicy	A missing signature means the integrity of a SOAP message cannot be guaranteed.
FortifyCSWeakWSSecurityPolicyMissingSignatureonMessageHeaders	1	Weak WS-SecurityPolicy	A missing signature means the integrity of a SOAP message cannot be guaranteed.
FortifyCSWeakWSSecurityPolicyMissingSignatureToken	1	Weak WS-SecurityPolicy	A missing signature means the integrity of a SOAP message cannot be guaranteed.
FortifyCSWeakWSSecurityPolicyMissingTimestamp	1	Weak WS-SecurityPolicy	A missing timestamp can leave a SOAP message open to replay attacks.
FortifyCSWeakWSSecurityPolicyTokensNotProtected	1	Weak WS-SecurityPolicy	When token protection is not enabled, the integrity of tokens might not be guaranteed since token protection enforces token signing.
FortifyCSWeakWSSecurityPolicyWeakToken	1	Weak WS-SecurityPolicy	Using a UsernameToken with a plain text password over an unencrypted channel exposes the password to attackers who can sniff the SOAP messages.
FortifyCSWeakXMLSchemaLaxProcessing	3	Weak XML Schema	When the processContents attribute is set to lax or skip, no input validation is performed for wildcard elements and attributes.
FortifyCSWeakXMLSchemaTypeAny	3	Weak XML Schema	The <any> element makes it easier to perform attacks like XML injection.
FortifyCSWeakXMLSchemaUnboundedOccurrences	3	Weak XML Schema	Setting a maxOccurs value to unbounded can lead to resources exhaustion and ultimately a denial of service.
FortifyCSWeakXMLSchemaUndefinedNamespace	3	Weak XML Schema	Specifying a namespace of ##any in the <any> element means the schema allows elements beyond what is explicitly defined in the schema, thereby making it easier to craft malicious documents.
FortifyCSWebServerMisconfigurationAccountInformation	2	Web Server Misconfiguration	Disclosure of user account information could allow an attacker to impersonate a user with higher privileges, steal sensitive information or execute arbitrary commands.
FortifyCSWebServerMisconfigurationCaseSensitivity	2	Web Server Misconfiguration	Failure to properly restrict access to application resources could allow an attacker to steal sensitive information.
FortifyCSWebServerMisconfigurationDeprecatedSSLTLSCertificate	2	Web Server Misconfiguration	Use of a deprecated SSL/TLS certificate on the target server can compromise the privacy and integrity of user data on the communication channel.
FortifyCSWebServerMisconfigurationDirectoryListing	2	Web Server Misconfiguration	Listing directory contents without restriction can expose sensitive information and private resources.
FortifyCSWebServerMisconfigurationExpiredSSLCertificate	2	Web Server Misconfiguration	Presenting an invalid certificate breaks the trust relationship between the client and the server and could also make it easier for an attacker to trick victim into accepting a spoofed SSL certificate.
FortifyCSWebServerMisconfigurationHTTPBasicAuthentication	2	Web Server Misconfiguration	Using HTTP Basic authentication mechanism over insecure channel can allow attackers to steal credentials.
FortifyCSWebServerMisconfigurationInformationDisclosure	2	Web Server Misconfiguration	Failure to restrict access to files could lead to exposure of sensitive information or interfaces.
FortifyCSWebServerMisconfigurationInsecureContentTypeSetting	2	Web Server Misconfiguration	Failure to correctly enforce the content-type could allow an attacker to conduct Cross-Site Scripting or information theft attacks.
FortifyCSWebServerMisconfigurationInsecureMappingDirectives	2	Web Server Misconfiguration	Misconfiguration of mapping directives can allow attackers to gain unauthorized access to sensitive resources.
FortifyCSWebServerMisconfigurationMissingUnicodeCharset	2	Web Server Misconfiguration	Allowing user input to control the web page's character set could allow an attacker to bypass application's user input filters.
FortifyCSWebServerMisconfigurationOpenProxyAccess	2	Web Server Misconfiguration	A proxy server allowing CONNECT or GET requests without any restriction can enable an attacker to masquerade the origin of their attacks or access resources internal to the network.
FortifyCSWebServerMisconfigurationOPTIONSHTTPMethod	2	Web Server Misconfiguration	Revealing the HTTP methods supported by web server configuration helps an adversary learn further about the system and form a specific plan of attack.
FortifyCSWebServerMisconfigurationRequestThrottlingNotEnabled	2	Web Server Misconfiguration	Misconfiguration of a server could leave the application vulnerable to Denial of Service attacks.
FortifyCSWebServerMisconfigurationResponseHeaders	2	Web Server Misconfiguration	Each browser responds differently to an incorrectly formatted response header which may pose security implication.
FortifyCSWebServerMisconfigurationServerErrorMessage	2	Web Server Misconfiguration	Server error responses could offer invaluable information about the application and the server allowing an attacker to formulate more effective attack payloads.
FortifyCSWebServerMisconfigurationServiceEnumeration	2	Web Server Misconfiguration	Allowing public access to a web services description document could allow an attacker to gain unauthorized access to critical server data.
FortifyCSWebServerMisconfigurationServletRuntimeError	2	Web Server Misconfiguration	Unhandled runtime exceptions could reveal sensitive system information or lead to denial of service conditions.
FortifyCSWebServerMisconfigurationSOAPExceptionMessage	2	Web Server Misconfiguration	An unhandled SOAP exception could reveal sensitive system information or trigger a denial of service condition.
FortifyCSWebServerMisconfigurationSSLCertificateHostnameDiscrepancy	2	Web Server Misconfiguration	Incorrect SSL certificate information can cause the validation process to fail, negating the security benefits of using a certificate to verify the server is trusted.
FortifyCSWebServerMisconfigurationUnprotectedDirectory	2	Web Server Misconfiguration	Insecure deployment and exposure of directories can supply attackers with invaluable information about the application enabling them to conduct targeted attacks.
FortifyCSWebServerMisconfigurationUnprotectedFile	2	Web Server Misconfiguration	Insecure deployment and exposure of files can supply attackers with invaluable information about the application enabling them to orchestrate targeted attacks.
FortifyCSWebServerMisconfigurationWeakAuthentication	2	Web Server Misconfiguration	Insecure configuration of a web server's authentication module could allow an attacker to gain administrative privileges and orchestrate complete system compromise.
FortifyCSWSEMisconfigurationInsufficientEncryption	2	WSE Misconfiguration	Failing to encrypt a signature increases the chance of a successful brute-force attack.
FortifyCSWSEMisconfigurationMissingAuthorization	2	WSE Misconfiguration	Not explicitly setting the <authorization> tag can result in privilege escalation or anonymous access.
FortifyCSWSEMisconfigurationUnsignedFaultTimestamp	2	WSE Misconfiguration	An unsigned timestamp can leave a SOAP message open to tampering and replay attacks.
FortifyCSWSEMisconfigurationUnsignedRequestTimestamp	2	WSE Misconfiguration	An unsigned timestamp can leave a SOAP message open to tampering and replay attacks.
FortifyCSWSEMisconfigurationUnsignedResponseTimestamp	2	WSE Misconfiguration	An unsigned timestamp can leave a SOAP message open to tampering and replay attacks.
FortifyCSXMLEntityExpansionInjection	1	XML Entity Expansion Injection	Using XML parsers configured to not prevent nor limit document type definition (DTD) entity resolution can expose the parser to an XML Entity Expansion injection attack
FortifyCSXMLExternalEntityInjection	1	XML External Entity Injection	The identified method allows external entity references. This call could allow an attacker to inject an XML external entity into the XML document to reveal the contents of files or internal network resources.
FortifyCSXMLInjection	1	XML Injection	The identified method writes unvalidated XML input. This call could allow an attacker to inject arbitrary elements or attributes into the XML document.
FortifyCSXMLInjectionOpenXML	1	XML Injection	Writing unvalidated data into an Open XML document can allow an attacker to change the structure and contents of the underlying XML.
FortifyCSXPathInjection	1	XPath Injection	Constructing a dynamic XPath query with user input could allow an attacker to modify the statement's meaning.
FortifyCSXQueryInjection	1	XQuery Injection	Constructing a dynamic XQuery expression with user input could allow an attacker to modify the statement's meaning.
FortifyCSXSLTInjection	1	XSLT Injection	Processing an unvalidated XSL stylesheet can allow an attacker to change the structure and contents of the resultant XML, include arbitrary files from the file system, or execute arbitrary code.
